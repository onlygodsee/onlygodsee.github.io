<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git Pages + Hexo 搭建个人博客记录</title>
    <url>/2020/04/26/article-1/</url>
    <content><![CDATA[<p>首先交代一下为什么使用Hexo而不是Jekyll。因为电脑环境有问题导致第一次安装Ruby失败了，然后懒得弄了。</p>
<p>开发环境：Mac</p>
<p>感谢 <strong><a href="https://blog.csdn.net/muzilanlan/article/details/81542917" target="_blank" rel="noopener">muzilan</a></strong> 兄台的分享</p>
<h3 id="设置Git-Pages"><a href="#设置Git-Pages" class="headerlink" title="设置Git Pages"></a>设置Git Pages</h3><p> 创建一个新仓库，命名规则为 <strong>{*username*}.github.io</strong></p>
<p> 注意这里的 <strong>“*username*”</strong> 是 Github 的用户名</p>
<p> 创建成功后创建 <strong><em>index.html\</em></strong> 文件，内容随意</p>
<p> 之后使用浏览器打开pages页面查看是否创建成功</p>
<h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p> <a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo模版地址</a></p>
<p> <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo中文文档</a></p>
<p> <a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">Next主题文档</a></p>
<p> Hexo 依赖 Node.js 环境，我这里已经安装过了便不再叙述。</p>
<h4 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p> 初始化 Hexo 目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir hexofolder</span><br><span class="line">hexo init hexofolder</span><br><span class="line">cd hexofolder</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<h4 id="Hexo-常用命令"><a href="#Hexo-常用命令" class="headerlink" title="Hexo 常用命令"></a>Hexo 常用命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g # 生成模版</span><br><span class="line">hexo s # 启动本地服务 http://localhost:4000</span><br><span class="line">hexo d # 部署</span><br><span class="line">hexo new post [postname] # 创建指定名称的文章文件,md格式</span><br><span class="line">hexo new page [pagename] # 创建新的页面，eg：tags， categories</span><br><span class="line">hexo d -g # 生成部署</span><br><span class="line">hexo s -g # 生成预览</span><br></pre></td></tr></table></figure>

<h4 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">cd hexofolder/themes</span><br><span class="line">git clone [theme地址] [themename] # 将theme模版以自定义name保存到本地</span><br></pre></td></tr></table></figure>

<h4 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd hexofolder/themes/[themename] # 进入主题目录</span><br><span class="line">git pull</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<h4 id="部署至-Git-Pages"><a href="#部署至-Git-Pages" class="headerlink" title="部署至 Git Pages"></a>部署至 Git Pages</h4><p> 安装插件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p> 修改 <strong><em>站点配置文件\</em></strong> <strong><em>_config.yml\</em></strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: [Git Pages 地址]</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p> 在 Hexo 中执行部署命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>至此 模版部署完成</p>
<h3 id="Hexo-添加分类、标签"><a href="#Hexo-添加分类、标签" class="headerlink" title="Hexo 添加分类、标签"></a>Hexo 添加分类、标签</h3><h4 id="新建分类页面"><a href="#新建分类页面" class="headerlink" title="新建分类页面"></a>新建分类页面</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>

<p>此时会在 <strong><em>source/categories\</em></strong> 下生成一个 <strong><em>index.md\</em></strong> 文件,对他进行编辑</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2020-04-26 12:11:21</span><br><span class="line">type: "categories"</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p><strong><em>comments\</em></strong> 为评论开关</p>
<p>修改 <strong><em>主题配置文件 _config.yml\</em></strong> ，将分类与标签的注释打开</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || fa fa-home</span><br><span class="line"><span class="meta">  #</span><span class="bash">about: /about/ || fa fa-user</span></span><br><span class="line">  tags: /tags/ || fa fa-tags</span><br><span class="line">  categories: /categories/ || fa fa-th</span><br><span class="line">  archives: /archives/ || fa fa-archive</span><br><span class="line"><span class="meta">  #</span><span class="bash">schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure>

<p>标签的设置方式同分类</p>
<h4 id="文章中添加标签和分类等"><a href="#文章中添加标签和分类等" class="headerlink" title="文章中添加标签和分类等"></a>文章中添加标签和分类等</h4><p>新建文章</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new post [articlename]</span><br></pre></td></tr></table></figure>

<p>修改文章头部信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: [标题名称]</span><br><span class="line">catalog: true</span><br><span class="line">date: 2018-09-29 14:23:53</span><br><span class="line">subtitle: "[子标题]"</span><br><span class="line">header-img: "[imgpath]"</span><br><span class="line">tags:</span><br><span class="line">- [tag1]</span><br><span class="line">- [tag2]</span><br><span class="line">categories:</span><br><span class="line">- [categorie1]</span><br><span class="line">- [categorie2]</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h3 id="装饰博客"><a href="#装饰博客" class="headerlink" title="装饰博客"></a>装饰博客</h3><h4 id="配置网站"><a href="#配置网站" class="headerlink" title="配置网站"></a>配置网站</h4><p>打开 <strong><em>站点配置文件 _config.yml\</em></strong>, 修改参数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Site</span></span><br><span class="line">title: 太液池 # 网站标题</span><br><span class="line">subtitle: ‘’ # 网站副标题</span><br><span class="line">description: ''</span><br><span class="line">keywords:</span><br><span class="line">author: 青桑 # 您的名字</span><br><span class="line">language: zh-CN # 网站使用的语言。参考你的主题的文档自行设置，常见的有 zh-Hans和 zh-CN</span><br><span class="line">timezone: ''</span><br></pre></td></tr></table></figure>

<h4 id="设置网站的图标Favicon-ico和头像"><a href="#设置网站的图标Favicon-ico和头像" class="headerlink" title="设置网站的图标Favicon.ico和头像"></a>设置网站的图标Favicon.ico和头像</h4><p>在 <strong>source</strong> 下创建文件夹 <strong>images</strong>， 将图片文件保存在 <strong>images</strong> 目录下，然后修改 <strong><em>主题配置文件 _config.yml\</em></strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">favicon:</span><br><span class="line">  small: /images/favicon-16x16-next.png</span><br><span class="line">  medium: /images/favicon.ico # 这里修改要生效的图标</span><br><span class="line">  apple_touch_icon: /images/apple-touch-icon-next.png</span><br><span class="line">  safari_pinned_tab: /images/logo.svg</span><br><span class="line"><span class="meta">  #</span><span class="bash">android_manifest: /images/manifest.json</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">ms_browserconfig: /images/browserconfig.xml</span></span><br><span class="line">avatar:</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Replace the default image and <span class="built_in">set</span> the url here.</span></span><br><span class="line">  url: /images/blog_head.png # 这里修改为要生效的头像</span><br><span class="line"><span class="meta">  #</span><span class="bash"> If <span class="literal">true</span>, the avatar will be dispalyed <span class="keyword">in</span> circle.</span></span><br><span class="line">  rounded: false</span><br><span class="line"><span class="meta">  #</span><span class="bash"> If <span class="literal">true</span>, the avatar will be rotated with the cursor.</span></span><br><span class="line">  rotated: false</span><br></pre></td></tr></table></figure>

<h4 id="配置站内搜索"><a href="#配置站内搜索" class="headerlink" title="配置站内搜索"></a>配置站内搜索</h4><p>采用 <strong>Local Search</strong> 方式，添加百度/谷歌/本地 自定义站点内容搜索</p>
<p>安装 <code>hexo-generator-searchdb</code> ，在站点的根目录下执行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p>在 <strong><em>站点配置文件\</em></strong> <strong><em>_config.yml\</em></strong> 末尾添加如下信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure>

<p>在 <strong><em>主题配置文件\</em></strong> <strong><em>_config.yml\</em></strong> 中启用本地搜索：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Local search</span></span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure>

<h4 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h4><p><strong>不蒜子统计</strong></p>
<p>修改 <strong><em>主题配置文件\</em></strong> <strong><em>_config.yml\</em></strong> 中 <strong><em>busuanzi_count\</em></strong> 配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">busuanzi_count:</span><br><span class="line">  enable: true # true 为启用状态</span><br><span class="line">  total_visitors: true # 统计访客数</span><br><span class="line">  total_visitors_icon: fa fa-user</span><br><span class="line">  total_views: true # 统计访问量</span><br><span class="line">  total_views_icon: fa fa-eye</span><br><span class="line">  post_views: true # 统计阅读数</span><br><span class="line">  post_views_icon: fa fa-eye</span><br></pre></td></tr></table></figure>

<h3 id="利用Shell脚本按序号递增创建文章"><a href="#利用Shell脚本按序号递增创建文章" class="headerlink" title="利用Shell脚本按序号递增创建文章"></a>利用Shell脚本按序号递增创建文章</h3><p>创建shell脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim crt_hexo_article.sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> 文件名命名示例 article-1.md<span class="string">"</span></span></span><br><span class="line">NEW_FILE=`ls Hexo文章目录 | sed '/sh/d' | tail -n1`</span><br><span class="line">echo $NEW_FILE</span><br><span class="line">var=`echo $&#123;NEW_FILE&#125;|awk -F '-' '&#123;print $2&#125;'|awk -F '.' '&#123;print $1&#125;'`</span><br><span class="line">echo "max index now -&gt; $var"</span><br><span class="line"></span><br><span class="line">let var+=1</span><br><span class="line">echo "create article index -&gt; $var"</span><br><span class="line">hexo new post article-$&#123;var&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用 typora 打开刚刚创建的md文件</span></span><br><span class="line">open -a typora Hexo文章路径</span><br></pre></td></tr></table></figure>

<p>在 <strong><em>.bash_profile\</em></strong> 中添加别名</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> shell 脚本别名</span></span><br><span class="line">alias crtart="/bin/bash /Users/woo/crt_hexo_article.sh" </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> typora 打开文件别名</span></span><br><span class="line">alias typora="open -a typora"</span><br></pre></td></tr></table></figure>

<p>保存退出后执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source .bash_profile</span><br></pre></td></tr></table></figure>

<p>进入站点目录输入别名 <strong><em>crtart\</em></strong></p>
<h3 id="文章图片"><a href="#文章图片" class="headerlink" title="文章图片"></a>文章图片</h3><h3 id="Github-图床"><a href="#Github-图床" class="headerlink" title="Github 图床"></a>Github 图床</h3><p>在Github中新建了一个图床仓库，将图片push到仓库中，然后在文本中引用图片的地址就可以</p>
<h4 id="本地图片"><a href="#本地图片" class="headerlink" title="本地图片"></a>本地图片</h4><p>将图片保存至站点目录下的 <strong>source/images/[articlename]</strong> 中，然后在文本中引用如下链接：</p>
<p><strong><a href="http://onlygodsee.top/images/[articlename]/img.png" target="_blank" rel="noopener">http://onlygodsee.top/images/[articlename]/img.png</a></strong></p>
<h4 id="hexo-asset-image-插件"><a href="#hexo-asset-image-插件" class="headerlink" title="hexo-asset-image 插件"></a>hexo-asset-image 插件</h4><p>安装 hexo-asset-image</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>

<p>修改 <strong><em>站点配置文件\</em></strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure>

<p>之后每次new命令创建文章的时候就会生成同名的资源文件夹，部署的时候就会把资源文件同步上传到文章目录下</p>
<p>在发布文章时，先把我们要用到的图片放到文章目录下面的同名目录中</p>
<p>然后markdown中的图片链接直接填入图片名称即可</p>
<h4 id="图片预览"><a href="#图片预览" class="headerlink" title="图片预览"></a>图片预览</h4><p>想要让博文中的图片有放大预览功能需要借助插件 <strong>fancybox</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd theme/next/source/lib</span><br><span class="line"></span><br><span class="line">git clone https://github.com/theme-next/theme-next-fancybox3 fancybox</span><br></pre></td></tr></table></figure>

<p>修改 <strong><em>主题配置文件\</em></strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">fancybox: true</span><br></pre></td></tr></table></figure>

<p>重新部署后就可以看到效果了</p>
<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><h4 id="部署后没有更新"><a href="#部署后没有更新" class="headerlink" title="部署后没有更新"></a>部署后没有更新</h4><p>解决方案：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo d -g</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/nzjdsds/article/details/81194116" target="_blank" rel="noopener">参考地址</a></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>Hexo</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Python环境管理--pipenv</title>
    <url>/2020/04/28/article-3/</url>
    <content><![CDATA[<h2 id="安装pipenv"><a href="#安装pipenv" class="headerlink" title="安装pipenv"></a>安装pipenv</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip3 install pipenv</span><br></pre></td></tr></table></figure>

<p>初始化</p>
<p>安装到项目目录里</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export PIPENV_VENV_IN_PROJECT=1</span><br></pre></td></tr></table></figure>

<p>使用 Python 3.7.3</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pipenv --python $(pyenv root)/versions/3.7.3/bin/python</span><br></pre></td></tr></table></figure>

<p>设置源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">PIPENV_PYPI_MIRROR=http://mirrors.aliyun.com/pypi/simple</span><br><span class="line">或</span><br><span class="line">pipenv install --pypi-mirror http://mirrors.aliyun.com/pypi/simple</span><br></pre></td></tr></table></figure>

<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip uninstall pipenv</span><br></pre></td></tr></table></figure>

<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><h3 id="pipenv-可以触发-pyenv-安装-Python-版本"><a href="#pipenv-可以触发-pyenv-安装-Python-版本" class="headerlink" title="pipenv 可以触发 pyenv 安装 Python 版本"></a>pipenv 可以触发 pyenv 安装 Python 版本</h3><p>.python-version</p>
<h3 id="pipenv-可以打开依赖的包"><a href="#pipenv-可以打开依赖的包" class="headerlink" title="pipenv 可以打开依赖的包"></a>pipenv 可以打开依赖的包</h3><p>export EDITOR=subl # 设置 pipenv open 的 默认编辑器<br>pipenv open fabric</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>删除在 /usr/local/bin/pipenv 目录的pipenv<br>建议用 pip3 安装 pipenv</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>环境管理</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>环境管理</tag>
        <tag>pipenv</tag>
      </tags>
  </entry>
  <entry>
    <title>Python环境管理--pyenv</title>
    <url>/2020/04/28/article-2/</url>
    <content><![CDATA[<h2 id="安装pyenv"><a href="#安装pyenv" class="headerlink" title="安装pyenv"></a>安装pyenv</h2><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><h4 id="pyenv-installer-安装"><a href="#pyenv-installer-安装" class="headerlink" title="pyenv-installer 安装"></a>pyenv-installer 安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl https://pyenv.run | bash</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash</span><br></pre></td></tr></table></figure>

<p>以上命令会弹出提示 把以下内容加入 ~/.bashrc 中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export PATH="~/.pyenv/bin:$PATH"</span><br><span class="line">eval "$(pyenv init -)"</span><br><span class="line">eval "$(pyenv virtualenv-init -)"</span><br></pre></td></tr></table></figure>

<h3 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h3><h4 id="homebrew-安装"><a href="#homebrew-安装" class="headerlink" title="homebrew 安装"></a>homebrew 安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew install pyenv</span><br></pre></td></tr></table></figure>

<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><h3 id="Linux-1"><a href="#Linux-1" class="headerlink" title="Linux"></a>Linux</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pyenv update</span><br></pre></td></tr></table></figure>

<h3 id="Mac-1"><a href="#Mac-1" class="headerlink" title="Mac"></a>Mac</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">brew upgrade pyenv</span><br></pre></td></tr></table></figure>

<h2 id="安装-Python-3-7-3"><a href="#安装-Python-3-7-3" class="headerlink" title="安装 Python 3.7.3"></a>安装 Python 3.7.3</h2><h3 id="Linux-2"><a href="#Linux-2" class="headerlink" title="Linux"></a>Linux</h3><p>安装依赖<br>sudo apt-get update<br>sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev</p>
<p>下载源码包到 pyenv 的 缓存目录里，加快安装速度</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tar.xz -P $(pyenv root)/cache</span><br></pre></td></tr></table></figure>

<p>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pyenv install 3.7.3</span><br></pre></td></tr></table></figure>

<h3 id="Mac-2"><a href="#Mac-2" class="headerlink" title="Mac"></a>Mac</h3><p>下载源码包到 pyenv 的 缓存目录里，加快安装速度</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tar.xz -P $(pyenv root)/cache</span><br></pre></td></tr></table></figure>

<p>安装依赖及设置环境变量</p>
<p>如果缺少 zlib 报错，则需要安装 zlib<br>zipimport.ZipImportError: can’t decompress data; zlib not available</p>
<p>安装 zlib<br>brew install zlib</p>
<p>设置zlib环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export LDFLAGS="-L/usr/local/opt/zlib/lib"</span><br><span class="line">export CPPFLAGS="-I/usr/local/opt/zlib/include"</span><br></pre></td></tr></table></figure>

<p>如果缺少 SQLite3 警告，则需要设置sqlite 环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">The Python sqlite3 extension was not compiled. Missing the SQLite3 lib?</span><br><span class="line">Installed Python-3.7.3 to /Users/slipper/.pyenv/versions/3.7.3</span><br></pre></td></tr></table></figure>

<p>设置 sqlite 环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export LDFLAGS="-L/usr/local/opt/zlib/lib -L/usr/local/opt/sqlite/lib"</span><br><span class="line">export CPPFLAGS="-I/usr/local/opt/zlib/include -I/usr/local/opt/sqlite/include"</span><br></pre></td></tr></table></figure>

<p>安装 python<br>pyenv install 3.7.3</p>
<h2 id="卸载-python"><a href="#卸载-python" class="headerlink" title="卸载 python"></a>卸载 python</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pyenv uninstall 3.7.3</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
        <category>环境管理</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>环境管理</tag>
        <tag>pyenv</tag>
      </tags>
  </entry>
  <entry>
    <title>JS逆向学习-某DJ音乐网</title>
    <url>/2020/04/30/article-4/</url>
    <content><![CDATA[<p>网站地址：aHR0cDovL3d3dy52dnZkai5jb20v</p>
<h3 id="网站分析"><a href="#网站分析" class="headerlink" title="网站分析"></a>网站分析</h3><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><p>随便点击一首音乐的链接，并进行抓包，发现了这样的几个请求：</p>
<p><img src="/2020/04/30/article-4/image-20200430111802994.png" alt></p>
<p>再看下m3u8请求的响应体：</p>
<p><img src="/2020/04/30/article-4/image-20200429185725469.png" alt></p>
<p>发现上面标出的ts流请求出现在了m3u8请求的响应体中，关于对m3u8的介绍看这里 <a href="https://www.jianshu.com/p/e97f6555a070" target="_blank" rel="noopener">m3u8 文件格式详解</a></p>
<p>由此可以得出只要找到m3u8地址就可以获取到音频资源</p>
<h4 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h4><p>这是最关键的一步，查看详情页源代码会发现如下图一段代码：</p>
<p><img src="/2020/04/30/article-4/image-20200430102253924.png" alt></p>
<p>进行断点调试</p>
<p><img src="/2020/04/30/article-4/image-20200430102841176.png" alt></p>
<p>发现这就是目标m3u8地址</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="根据上面的逆向结果获取ts流地址"><a href="#根据上面的逆向结果获取ts流地址" class="headerlink" title="根据上面的逆向结果获取ts流地址"></a>根据上面的逆向结果获取ts流地址</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get_indexPage</span><span class="params">(musicId)</span>:</span></span><br><span class="line">    url = <span class="string">f'aHR0cDovL3d3dy52dnZkai5jb20v/play/<span class="subst">&#123;musicId&#125;</span>.html'</span></span><br><span class="line">    ts_file = <span class="string">f"mp4/<span class="subst">&#123;musicId&#125;</span>/ts/"</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> session.get(url, proxy=proxy) <span class="keyword">as</span> resp:</span><br><span class="line">            <span class="keyword">if</span> resp.status:</span><br><span class="line">                page_info = <span class="keyword">await</span> resp.text()</span><br><span class="line">                arg1, arg2 = re.search(<span class="string">"playurl=x.*?\('(.*?)'\);"</span>, page_info).group(<span class="number">1</span>).split(<span class="string">"','"</span>)</span><br><span class="line">                <span class="keyword">with</span> open(<span class="string">'qingfeng_new.js'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    ctx = execjs.compile(f.read())</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 解密m3u8地址</span></span><br><span class="line">                playurl = ctx.call(<span class="string">'get_url'</span>, arg1, arg2)</span><br><span class="line"></span><br><span class="line">                base_url = playurl.split(<span class="string">f"<span class="subst">&#123;musicId&#125;</span>.m3u8"</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">                resp_ts = <span class="keyword">await</span> get_m3u8list(playurl)</span><br><span class="line"></span><br><span class="line">                 <span class="comment"># 根据m3u8文件构造获取ts流对象列表</span></span><br><span class="line">                ts_lists = [download_ts(base_url + i, ts_file, musicId) <span class="keyword">for</span> i <span class="keyword">in</span> re.findall(<span class="string">"(&#123;&#125;.*?)\n"</span>.format(musicId), resp_ts)]</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 并发获取ts流</span></span><br><span class="line">                <span class="keyword">await</span> asyncio.gather(*ts_lists)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">await</span> save_mp4(ts_file, musicId)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get_m3u8list</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    读取 m3u8 文件</span></span><br><span class="line"><span class="string">    :param url:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> session.get(url, proxy=proxy) <span class="keyword">as</span> resp:</span><br><span class="line">            <span class="keyword">if</span> resp.status:</span><br><span class="line">                resp = <span class="keyword">await</span> resp.text()</span><br><span class="line">                <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">download_ts</span><span class="params">(url, ts_file, musicId)</span>:</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> session.get(url, proxy=proxy) <span class="keyword">as</span> resp:</span><br><span class="line">            <span class="keyword">if</span> resp.status:</span><br><span class="line">                num = re.search(<span class="string">'&#123;&#125;-(\d\d\d?)\.ts'</span>.format(musicId), url).group(<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(ts_file):</span><br><span class="line">                    os.makedirs(ts_file)</span><br><span class="line">                r = <span class="keyword">await</span> resp.read()</span><br><span class="line">                <span class="keyword">with</span> open(<span class="string">f'<span class="subst">&#123;ts_file&#125;</span>/<span class="subst">&#123;num&#125;</span>.ts'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(r)</span><br></pre></td></tr></table></figure>

<p>得到ts流内容后还需要将其整合为mp4格式，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">save_mp4</span><span class="params">(ts_file, musicId)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    利用 ffmpeg 整合 ts流文件</span></span><br><span class="line"><span class="string">    :param ts_file: </span></span><br><span class="line"><span class="string">    :param musicId: </span></span><br><span class="line"><span class="string">    :return: </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    path_lists = os.listdir(ts_file)</span><br><span class="line">    path_lists.sort()</span><br><span class="line">    li = [os.path.join(ts_file,filename) <span class="keyword">for</span> filename <span class="keyword">in</span> path_lists]</span><br><span class="line">    tsfiles = <span class="string">'|'</span>.join(li)</span><br><span class="line">    save_path = <span class="string">f'mp4/<span class="subst">&#123;musicId&#125;</span>/<span class="subst">&#123;musicId&#125;</span>.mp4'</span></span><br><span class="line"></span><br><span class="line">    cmd = <span class="string">'ffmpeg -i "concat:%s" -acodec copy -vcodec copy -absf aac_adtstoasc %s'</span>%    (tsfiles, save_path)</span><br><span class="line">    os.system(cmd)</span><br></pre></td></tr></table></figure>

<p>然后运行该代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">event_loop = asyncio.get_event_loop()</span><br><span class="line">tasks = [get_indexPage(musicId) <span class="keyword">for</span> musicId <span class="keyword">in</span> [<span class="string">'193270'</span>]]</span><br><span class="line">event_loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">event_loop.close()</span><br></pre></td></tr></table></figure>

<p>调用的js文件内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DeCode</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.OO0O00OO00OO = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> b &gt; <span class="number">0</span> ? a.substring(<span class="number">0</span>, b) : <span class="literal">null</span>;</span><br><span class="line">       &#125;, <span class="keyword">this</span>.OO00OO0O00O0 = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> a.length - b &gt;= <span class="number">0</span> &amp;&amp; a.length &gt;= <span class="number">0</span> &amp;&amp; a.length - b &lt;= a.length ? a.substring(a.length - b, a.length) : <span class="literal">null</span>;</span><br><span class="line">       &#125;, <span class="keyword">this</span>.O0000OO0OO00O0 = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">           <span class="keyword">var</span> c, d, e, f, g, h, i, j, k = <span class="string">""</span>;</span><br><span class="line">           <span class="keyword">for</span> (c = <span class="number">0</span>; c &lt; b.length; c++) &#123;</span><br><span class="line">               k += b.charCodeAt(c).toString();</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">for</span> (d = <span class="built_in">Math</span>.floor(k.length / <span class="number">5</span>), e = <span class="built_in">parseInt</span>(k.charAt(d) + k.charAt(<span class="number">2</span> * d) + k.charAt(<span class="number">3</span> * d) + k.charAt(<span class="number">4</span> * d) + k.charAt(<span class="number">5</span> * d)),</span><br><span class="line">                    f = <span class="built_in">Math</span>.round(b.length / <span class="number">2</span>), g = <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">31</span>) - <span class="number">1</span>, h = <span class="built_in">parseInt</span>(a.substring(a.length - <span class="number">8</span>, a.length), <span class="number">16</span>),</span><br><span class="line">                    a = a.substring(<span class="number">0</span>, a.length - <span class="number">8</span>), k += h; k.length &gt; <span class="number">10</span>; ) &#123;</span><br><span class="line">               k = (<span class="built_in">parseInt</span>(k.substring(<span class="number">0</span>, <span class="number">10</span>)) + <span class="built_in">parseInt</span>(k.substring(<span class="number">10</span>, k.length))).toString();</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">for</span> (k = (e * k + f) % g, i = <span class="string">""</span>, j = <span class="string">""</span>, c = <span class="number">0</span>; c &lt; a.length; c += <span class="number">2</span>) &#123;</span><br><span class="line">               i = <span class="built_in">parseInt</span>(<span class="built_in">parseInt</span>(a.substring(c, c + <span class="number">2</span>), <span class="number">16</span>) ^ <span class="built_in">Math</span>.floor(<span class="number">255</span> * (k / g))), j += <span class="built_in">String</span>.fromCharCode(i),</span><br><span class="line">                   k = (e * k + f) % g;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> j;</span><br><span class="line">       &#125;, <span class="keyword">this</span>.O0000OO0OO00O = <span class="function"><span class="keyword">function</span> (<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> a.length &gt;= <span class="number">0</span> ? a.substr(b, c) : <span class="literal">null</span>;</span><br><span class="line">       &#125;, <span class="keyword">this</span>.O0O000000O0O0 = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> a.length;</span><br><span class="line">       &#125;, <span class="keyword">this</span>.O000O0OO0O0OO = <span class="function"><span class="keyword">function</span> (<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">           <span class="keyword">var</span> h, i, j, k, l, m, n, o, p, c = b, d = <span class="keyword">this</span>.O0O000000O0O0(c), e = d, f = <span class="keyword">new</span> <span class="built_in">Array</span>(), g = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">           <span class="keyword">for</span> (l = <span class="number">1</span>; d &gt;= l; l++) &#123;</span><br><span class="line">               f[l] = <span class="keyword">this</span>.O0000OO0OO00O(c, l - <span class="number">1</span>, <span class="number">1</span>).charCodeAt(<span class="number">0</span>), g[e] = f[l], e -= <span class="number">1</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">for</span> (h = <span class="string">""</span>, i = a, m = <span class="keyword">this</span>.OO0O00OO00OO(i, <span class="number">2</span>), i = <span class="keyword">this</span>.OO00OO0O00O0(i, <span class="keyword">this</span>.O0O000000O0O0(i) - <span class="number">2</span>),</span><br><span class="line">                    l = <span class="number">0</span>; l &lt; <span class="keyword">this</span>.O0O000000O0O0(i); l += <span class="number">4</span>) &#123;</span><br><span class="line">               j = <span class="keyword">this</span>.O0000OO0OO00O(i, l, <span class="number">4</span>), <span class="string">""</span> != j &amp;&amp; (b = <span class="keyword">this</span>.OO0O00OO00OO(j, <span class="number">1</span>), k = (<span class="built_in">parseInt</span>(<span class="keyword">this</span>.OO00OO0O00O0(j, <span class="number">3</span>)) - <span class="number">100</span>) / <span class="number">3</span>,</span><br><span class="line">                   m == <span class="keyword">this</span>.O0000OO0OO00O0(<span class="string">"a9ab044c634a"</span>, <span class="string">"O0000OO0OO00O"</span>) ? (n = <span class="number">2</span> * <span class="built_in">parseInt</span>(b.charCodeAt(<span class="number">0</span>)),</span><br><span class="line">                       o = <span class="built_in">parseInt</span>(f[k]), p = n - o, h += <span class="built_in">String</span>.fromCharCode(p)) : (n = <span class="number">2</span> * <span class="built_in">parseInt</span>(b.charCodeAt(<span class="number">0</span>)),</span><br><span class="line">                       o = <span class="built_in">parseInt</span>(g[k]), p = n - o, h += <span class="built_in">String</span>.fromCharCode(p)));</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> h;</span><br><span class="line">       &#125;;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> x=<span class="keyword">new</span> DeCode();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_url</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.O000O0OO0O0OO(a, b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
        <category>JS逆向</category>
      </categories>
      <tags>
        <tag>JS逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>hello-world</title>
    <url>/2020/04/23/hello-world/</url>
    <content><![CDATA[<p>Hello world, this is my first blog.</p>
<p>Everything is ok.</p>
]]></content>
  </entry>
  <entry>
    <title>JS逆向学习-淘**</title>
    <url>/2020/05/11/article-5/</url>
    <content><![CDATA[<p>懂得都懂：aHR0cHM6Ly90YW9kYXhpYW5nLmNvbS9jcmVkaXQy</p>
<h3 id="网站分析"><a href="#网站分析" class="headerlink" title="网站分析"></a>网站分析</h3><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><p>打开网站按F12开始调试，发现该网站有无限debugger：</p>
<p><img src="/2020/05/11/article-5/WX20200511-121718.png" alt></p>
<p>在对应行右键选择 “Never pause here”, 然后点击屏幕上的箭头便可绕过</p>
<p>然后查看请求，在XHR中发现了目标信息和加密参数：</p>
<p><img src="/2020/05/11/article-5/WX20200511-122949.png" alt></p>
<h4 id="定位加密位置"><a href="#定位加密位置" class="headerlink" title="定位加密位置"></a>定位加密位置</h4><p>通过搜索关键字“sign”可以发现这几个位置：</p>
<p><img src="/2020/05/11/article-5/WX20200511-123230.png" alt></p>
<p>再搜索 <strong><em>_0x5b56f8</em></strong> 便可定位到加密位置，打上断点进行调试：</p>
<p><img src="/2020/05/11/article-5/WX20200511-123557.png" alt></p>
<p><img src="/2020/05/11/article-5/WX20200511-124307.png" alt></p>
<p><em>由此可知最终的加密操作是在 <strong>case 0</strong> 中完成的，通过断点调试会发现是对</em> <strong><em>一个特殊字符串</em></strong> 进行了md5加密，接下来我们分析这个字符串是怎么得出的</p>
<p>在 <strong><em>case 5</em></strong> 中同样对 <strong><em>_0x5b56f8</em></strong> 进行了操作，并且确定这里就是生成被加密字符串的位置</p>
<p><img src="/2020/05/11/article-5/WX20200511-140037.png" alt></p>
<p>在分析这段代可知是对 <strong><em>_0x8c9894</em></strong> 和 <strong><em>_0x4ea2ce</em></strong>进行了一些列算数操作，接下来我们在分析这两个参数</p>
<p>分析 <strong><em>case 3</em></strong> 中发现 <strong><em>_0x4ea2ce</em></strong> 是固定值</p>
<p><img src="/2020/05/11/article-5/WX20200511-140550.png" alt></p>
<p>分析 <strong><em>case 2</em></strong> 可知这里又做了一个md5加密，被加密字符串的组成结构是 account +  <strong><em>_0x4ea2ce</em></strong> + account + type值</p>
<p><img src="/2020/05/11/article-5/WX20200511-140843.png" alt></p>
<p>至此我们已经找到获取加密参数的所有元素</p>
<h3 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h3><p>结合上面的逻辑，我们开始进行逆向测试</p>
<p>首先获取 <strong><em>_0x8c9894</em></strong> 的值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line">_0x4ea2ce= <span class="string">'7176a337dffebf0ff2d30d65fda5af78'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5value</span><span class="params">(s)</span>:</span></span><br><span class="line">    a = md5(s.encode()).hexdigest()</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">s = <span class="string">'%s%s%s0'</span> %(<span class="string">'这个帐号只是传说'</span>, _0x4ea2ce, <span class="string">'这个帐号只是传说'</span>)</span><br><span class="line"></span><br><span class="line">_0x8c9894 = md5value(s) + <span class="string">' '</span></span><br><span class="line">print(_0x8c9894)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f81765c208bcc1a6892863af77bb4fae</span><br></pre></td></tr></table></figure>

<p>这里要注意 <strong>最后的结果还要加一个空格</strong> 应该是 <strong><em>“f81765c208bcc1a6892863af77bb4fae ”</em></strong></p>
<p>接下来获取 <strong><em>_0x5b56f8</em></strong> 的值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法映射</span></span><br><span class="line">_0x36294a = &#123;</span><br><span class="line">    <span class="string">"VIRpO"</span>: <span class="keyword">lambda</span> a, b: a &lt; b,</span><br><span class="line">    <span class="string">"PRedm"</span>: <span class="keyword">lambda</span> a, b: a % b,</span><br><span class="line">    <span class="string">"TTSVu"</span>: <span class="keyword">lambda</span> a, b: a + b,</span><br><span class="line">    <span class="string">"rOuyL"</span>: <span class="keyword">lambda</span> a, b: a % b,</span><br><span class="line">    <span class="string">"YJYZC"</span>: <span class="keyword">lambda</span> a, b: a * b,</span><br><span class="line">    <span class="string">"LrwDB"</span>: <span class="keyword">lambda</span> a, b: a * b,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_0x5b56f8 = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _0x1af38d <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">    _0x5b56f8 += str(_0x36294a[<span class="string">"PRedm"</span>](_0x36294a[<span class="string">"TTSVu"</span>](_0x36294a[<span class="string">"TTSVu"</span>](_0x36294a[<span class="string">"TTSVu"</span>](ord(_0x4ea2ce[_0x1af38d]), _0x36294a[<span class="string">"rOuyL"</span>](_0x36294a[<span class="string">"YJYZC"</span>](ord(_0x4ea2ce[_0x1af38d]), ord(_0x4ea2ce[_0x1af38d])), <span class="number">0x20</span>)), ord(_0x8c9894[_0x1af38d])), _0x36294a[<span class="string">"LrwDB"</span>](_0x1af38d, _0x1af38d)), <span class="number">0x9</span>))</span><br><span class="line"></span><br><span class="line">print(_0x5b56f8)</span><br><span class="line">&gt;&gt;&gt;<span class="number">38856360307430874440750784857572</span></span><br></pre></td></tr></table></figure>

<p>这里看到已经成功获取了md5加密前的字符串，然后我们对其加密并进行比对</p>
<p><img src="/2020/05/11/article-5/WX20200511-151435.png" alt></p>
<p>发现与前面目标请求的 <strong><em>sign</em></strong> 相同，至此已经成功获取了加密参数</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line">url = <span class="string">'aHR0cHM6Ly90YW9kYXhpYW5nLmNvbS9jcmVkaXQy'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 固定加密字符串</span></span><br><span class="line">_0x4ea2ce= <span class="string">'7176a337dffebf0ff2d30d65fda5af78'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sign 加密要用到的方法映射（模拟网站JS代码）</span></span><br><span class="line">_0x36294a = &#123;</span><br><span class="line">    <span class="string">"VIRpO"</span>: <span class="keyword">lambda</span> a, b: a &lt; b,</span><br><span class="line">    <span class="string">"PRedm"</span>: <span class="keyword">lambda</span> a, b: a % b,</span><br><span class="line">    <span class="string">"TTSVu"</span>: <span class="keyword">lambda</span> a, b: a + b,</span><br><span class="line">    <span class="string">"rOuyL"</span>: <span class="keyword">lambda</span> a, b: a % b,</span><br><span class="line">    <span class="string">"YJYZC"</span>: <span class="keyword">lambda</span> a, b: a * b,</span><br><span class="line">    <span class="string">"LrwDB"</span>: <span class="keyword">lambda</span> a, b: a * b,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_md5</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    md5 加密</span></span><br><span class="line"><span class="string">    :param s:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    result = md5(s.encode()).hexdigest()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_data</span><span class="params">(account, typ)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    构造请求参数</span></span><br><span class="line"><span class="string">    :param account:</span></span><br><span class="line"><span class="string">    :param typ:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 设置 _0x8c9894 加密规则</span></span><br><span class="line">    s = <span class="string">f"<span class="subst">&#123;account&#125;</span><span class="subst">&#123;_0x4ea2ce&#125;</span><span class="subst">&#123;account&#125;</span><span class="subst">&#123;typ&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">    _0x8c9894 = get_md5(s) + <span class="string">' '</span></span><br><span class="line"></span><br><span class="line">    _0x5b56f8 = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 获取 sign 值</span></span><br><span class="line">    <span class="keyword">for</span> _0x1af38d <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">        _0x5b56f8 += str(_0x36294a[<span class="string">"PRedm"</span>](_0x36294a[<span class="string">"TTSVu"</span>](_0x36294a[<span class="string">"TTSVu"</span>](</span><br><span class="line">            _0x36294a[<span class="string">"TTSVu"</span>](ord(_0x4ea2ce[_0x1af38d]), _0x36294a[<span class="string">"rOuyL"</span>](</span><br><span class="line">                _0x36294a[<span class="string">"YJYZC"</span>](ord(_0x4ea2ce[_0x1af38d]), ord(_0x4ea2ce[_0x1af38d])), <span class="number">0x20</span>)),</span><br><span class="line">            ord(_0x8c9894[_0x1af38d])), _0x36294a[<span class="string">"LrwDB"</span>](_0x1af38d, _0x1af38d)), <span class="number">0x9</span>))</span><br><span class="line"></span><br><span class="line">    output = &#123;</span><br><span class="line">        <span class="string">"account"</span>: account,</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"0"</span>,</span><br><span class="line">        <span class="string">"sign"</span>: _0x5b56f8</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">get_info</span><span class="params">(url, data)</span>:</span></span><br><span class="line">    <span class="comment"># ssl证书设置</span></span><br><span class="line">    conn = aiohttp.TCPConnector(ssl=<span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession(connector=conn) <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> session.post(url, data=data, proxy=proxy) <span class="keyword">as</span> resp:</span><br><span class="line">            <span class="keyword">if</span> resp.status:</span><br><span class="line">                info = <span class="keyword">await</span> resp.json(content_type=<span class="string">'text/html'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">                <span class="keyword">return</span> info</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    accounts = [account1, account2]</span><br><span class="line">    event_loop = asyncio.get_event_loop()</span><br><span class="line">    tasks = [get_info(url, set_data(account, <span class="string">'0'</span>)) <span class="keyword">for</span> account <span class="keyword">in</span> accounts]</span><br><span class="line">    event_loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">    event_loop.close()</span><br></pre></td></tr></table></figure>



<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>该网站的逆向并不难，通过全局搜索关键字就可以定位到加密位置，关键在于绕过无限Debugger和对混淆代码的分析</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>JS逆向</category>
      </categories>
      <tags>
        <tag>JS逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>JS逆向学习-某厂藏某阁</title>
    <url>/2020/05/12/article-6/</url>
    <content><![CDATA[<p>首先感谢咸鱼大佬的分享 <a href="https://mp.weixin.qq.com/s/5pp1vd00O-JHeAf6loaYfg" target="_blank" rel="noopener">文章地址</a></p>
<p>懂得都懂：aHR0cHM6Ly9kd3ouY24vS0VGT01qOGg=</p>
<h3 id="网站分析"><a href="#网站分析" class="headerlink" title="网站分析"></a>网站分析</h3><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><p><img src="/2020/05/12/article-6/WX20200512-095031.png" alt></p>
<p>通过查看html页面发现目标信息在id为 <strong><em>equip_desc_panel</em></strong> 的标签下，然后全局搜索这个id</p>
<p><img src="/2020/05/12/article-6/WX20200512-095918.png" alt></p>
<p>发现这里是空的，但发现了另外一个有意思的点，下面 <strong><em>textarea</em></strong> 标签中的内容像极了加密内容，然后再查看其他位置</p>
<p><img src="/2020/05/12/article-6/WX20200511-185128.png" alt></p>
<p>柳暗花明又一村，继续查找 <strong><em>get_equip_desc</em></strong></p>
<p><img src="/2020/05/12/article-6/WX20200511-185217.png" alt></p>
<p>看来是在 <strong><em>decode_desc</em></strong> 中执行的加密，但是这个函数就搜不到了，然后在这里打断点</p>
<p><img src="/2020/05/12/article-6/WX20200511-190108.png" alt></p>
<p>成功断点并跟进调试后发现是通过这样的方式设置了 <strong><em>decode_desc</em></strong> 函数，并且确认这里就是解密的位置</p>
<h4 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h4><p>然后就到了扣代码的环节</p>
<p>通过前面的断点调试得知只需要 <strong><em>function g()</em></strong> 的流程，通过node.js运行发现运行结果不符合预期，那就开始补坑</p>
<p><img src="/2020/05/12/article-6/WX20200511-191211.png" alt></p>
<p><img src="/2020/05/12/article-6/WX20200511-191030.png" alt></p>
<p><img src="/2020/05/12/article-6/WX20200511-191007.png" alt></p>
<p><img src="/2020/05/12/article-6/WX20200511-191101.png" alt></p>
<p><img src="/2020/05/12/article-6/WX20200511-191116.png" alt></p>
<p>上面截图中标注的内容都是需要去替换的，但要注意的是 <strong>window.atob</strong> 在 <strong>node</strong> 中不可用，要这样写：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Buffer.from(_0x1c0cdf,<span class="string">"base64"</span>).toString()</span><br></pre></td></tr></table></figure>



<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>修改后的js代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> _0x3a8e = <span class="function"><span class="keyword">function</span>(<span class="params">_0xc40c11, _0x32bbb2</span>) </span>&#123;</span><br><span class="line">    _0xc40c11 = _0xc40c11 - <span class="number">0x0</span>;</span><br><span class="line">    <span class="keyword">var</span> _0x4e269a = _0x3012[_0xc40c11];</span><br><span class="line">    <span class="keyword">return</span> _0x4e269a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _0x3012 = [<span class="string">'\x73\x75\x62\x73\x74\x72\x69\x6e\x67'</span>, <span class="string">'\x61\x74\x6f\x62'</span>, <span class="string">'\x63\x68\x61\x72\x43\x6f\x64\x65\x41\x74'</span>, <span class="string">'\x70\x75\x73\x68'</span>, <span class="string">'\x74\x65\x73\x74'</span>];</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">_0x3ed35c, _0x48b8fe</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _0x1ad9d9 = <span class="function"><span class="keyword">function</span>(<span class="params">_0x8eeda7</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (--_0x8eeda7) &#123;</span><br><span class="line">            _0x3ed35c[<span class="string">'push'</span>](_0x3ed35c[<span class="string">'shift'</span>]());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    _0x1ad9d9(++_0x48b8fe);</span><br><span class="line">&#125;(_0x3012, <span class="number">0x153</span>));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params">_0x1c0cdf</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (_0x1c0cdf = _0x1c0cdf[<span class="string">'\x72\x65\x70\x6c\x61\x63\x65'</span>](<span class="regexp">/^\s+|\s+$/g</span>, <span class="string">''</span>),</span><br><span class="line">        !<span class="regexp">/^@[\s\S]*@$/</span>[_0x3a8e(<span class="string">'0x0'</span>)](_0x1c0cdf))</span><br><span class="line">        <span class="keyword">return</span> _0x1c0cdf;</span><br><span class="line">    <span class="keyword">var</span> _0x36ab38 = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">if</span> (_0x1c0cdf = _0x1c0cdf[<span class="string">'\x72\x65\x70\x6c\x61\x63\x65'</span>](<span class="regexp">/^@|@$/g</span>, <span class="string">''</span>),</span><br><span class="line">        /^[^@]+@[\s\S]+<span class="regexp">/['\x74\x65\x73\x74'](_0x1c0cdf)) &#123;</span></span><br><span class="line"><span class="regexp">        var _0x33c80e = _0x1c0cdf['\x69\x6e\x64\x65\x78\x4f\x66']('\x40');</span></span><br><span class="line"><span class="regexp">        _0x36ab38 = _0x1c0cdf[_0x3a8e('0x1')](0x0, _0x33c80e),</span></span><br><span class="line"><span class="regexp">            _0x1c0cdf = _0x1c0cdf['\x73\x75\x62\x73\x74\x72\x69\x6e\x67'](_0x33c80e + 0x1);</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    var _0x1b3f48 = function s(_0x1c0cdf) &#123;</span></span><br><span class="line"><span class="regexp">        try &#123;</span></span><br><span class="line"><span class="regexp">            return eval('\x28' + _0x1c0cdf + '\x29');</span></span><br><span class="line"><span class="regexp">        &#125; catch (_0x40b9c3) &#123;</span></span><br><span class="line"><span class="regexp">            return null;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;(_0x1c0cdf = Buffer.from(_0x1c0cdf,"base64").toString());</span></span><br><span class="line"><span class="regexp">    _0x1b3f48 &amp;&amp; '\x6f\x62\x6a\x65\x63\x74' == typeof _0x1b3f48 &amp;&amp; _0x1b3f48['\x64'] &amp;&amp; (_0x1b3f48 = _0x1b3f48['\x64']);</span></span><br><span class="line"><span class="regexp">    for (var _0x20b9fa = [], _0x10503c = 0x0, _0x1a524d = 0x0; _0x1a524d &lt; _0x1b3f48['\x6c\x65\x6e\x67\x74\x68']; _0x1a524d++) &#123;</span></span><br><span class="line"><span class="regexp">        var _0x3641ed = _0x1b3f48['\x63\x68\x61\x72\x43\x6f\x64\x65\x41\x74'](_0x1a524d)</span></span><br><span class="line"><span class="regexp">            , _0x341952 = _0x36ab38[_0x3a8e('0x3')](_0x10503c % _0x36ab38['\x6c\x65\x6e\x67\x74\x68']);</span></span><br><span class="line"><span class="regexp">        _0x10503c += 0x1,</span></span><br><span class="line"><span class="regexp">            _0x3641ed = 0x1 * _0x3641ed ^ _0x341952,</span></span><br><span class="line"><span class="regexp">            _0x20b9fa[_0x3a8e('0x4')](_0x3641ed['\x74\x6f\x53\x74\x72\x69\x6e\x67'](0x2));</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">    return function d(_0x1c0cdf) &#123;</span></span><br><span class="line"><span class="regexp">        for (var _0x36ab38 = [], _0x33c80e = 0x0; _0x33c80e &lt; _0x1c0cdf['\x6c\x65\x6e\x67\x74\x68']; _0x33c80e++)</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ _0x36ab38['\x70\x75\x73\x68'](_0xcbc80b['\x53\x74\x72\x69\x6e\x67']['\x66\x72\x6f\x6d\x43\x68\x61\x72\x43\x6f\x64\x65'](_0xcbc80b['\x70\x61\x72\x73\x65\x49\x6e\x74'](_0x1c0cdf[_0x33c80e], 0x2)));</span></span><br><span class="line"><span class="regexp">            _0x36ab38['\x70\x75\x73\x68'](String.fromCharCode(parseInt(_0x1c0cdf[_0x33c80e], 0x2)));</span></span><br><span class="line"><span class="regexp">        return _0x36ab38['\x6a\x6f\x69\x6e']('');</span></span><br><span class="line"><span class="regexp">    &#125;(_0x20b9fa);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">var a = "@ggRp9MYui9tDX6Fq@eyJkIjogIkRcdTAwMTVcdTdiMWJcdTdlZDdcdTAwMTl8a0VJXHUwMDE5XHU0ZWUwXHU4ODA4eFx1NmMwMmVcdTAwMDNEXHUwMDE1XHU0Zjc2XHU1YmMzXHUwMDE5ZmpMX1x1MDAxOVx1NTQwOVx1NGU2OXhcdTAwMWRwSVdEIFx1ODA2MFx1NGU3Y1x1NWVlYnlHWVx1MDAwZVRkXHU0ZmI2XHU3NDMwXHU1OTc3XHU4ZDU0R1ZcdTZiNzNTS1x1OTU3Nlx1NzBlNVx1N2IzY1x1N2VjZVx1MDAxOUV1eFx1MDAxNlx1OTUzMFx1NWQzZFx1NWJmYVx1Nzc5NHJcdTU5NWFcdTk2MGFcdTc3YmVcdTMwNThVXHU3ZWNiXHU3M2EyXHU3NDJkZ1x1MDAwMVx1MDAxNTRSXHUwMDA0U1x1MDAxNjJ4XHUwMDBibVx1NzIwY1x1NjUyMVx1ZmYyM1cnbHJcdTAwMDQwIVNcdTY1YjJcdTdlZDdcdTUyMTJcdTk2MWRcdTUyNmZWMFx1MDAxYVx1MDAwNmdcdTAwMWZcdTVmMzZcdThmOTZcdTViMjVcdTY1MTdcdWZmN2RmXHU1YjI0XHUwMDE2eVx1NWIwZFVBXHU1M2Y1QFx1NWIxMHFcdTAwMTVcdTAwMDFSXHUwMDE1XHU3YjQxXHU3N2ExSlx1MDAxOVx1NGYxZVx1OGQ3MVVCXGJUXHU0ZjYwXHU1YmViXHUwMDE2bUBJUnFcdTAwMWVcdTAwMWFcbnpcdTAwMDdcdTdiNGZcdTc3Y2FOZFx1NTJjM1x1OTFmOWZaVkdcdTZjNDZcdTg4MzBcdTAwMTlmaEVKV1dcdTAwMDN7RFx1N2I2MFx1Nzc4Ml1HXHU1MmM5XHU5MWJmXHUwMDE5ZmhVXHU2YzdkXHU4ODc5VG9pXHUwMDA2ZVx1MDAxZkQgcVx1MDAwMlx1N2IxZlx1NzdiZWNVXHU2YzdkXHU4ODc5VG9pXHUwMDAzZlx1OTA2ZVx1NWVjMUd5QVx1MDAxN3h6XHUwMDFiSn5XNlx1NjY0N1x1NGY3Ylx1ZmY1Y1x1OTA2ZVx1NWVjMUd5Qlx1MDAxYSN6MkpLXHU2NjZiXHU3NmJjXHU0ZWNhXHU1NDNlXHVmZjVjXHU0ZjIyXHU4ZDRmR3lCXHUwMDFhP3pcdTAwMTYsfEx2XHUwMDFkc1x1N2I2MFx1Nzc4Mlx1N2VhM1x1NTQ2ZmhQXHU1OWJiXHU2MTQyXHU5MTg4XHU3YmY4XHU3YjRmXHU3N2NhVzZcdTk1YjBcdTZkMDhcdTY3MjdcdTRlODdcdWZmN2RcdTgyZDZcdTY3Y2VcdTVjMDFcdTAwMTluK1x1OTA5ZFx1NGYyNFx1Njc1OFx1NGU4Mlx1ZmY1ZVx1NmIzZVx1NTY1ZWZSXHUwMDE1XHU1OGY5XHU1MmYyXHU5NTk4XHU2ZDA3XHU2MmNkXHU4MGE0XHU1OWY3XHU2MTY2XHU5MWU4XHU3YmY5XHU3YjBkXHU3ZWZmXHUwMDAyXHU3ZWUxUj5EIFNuXHU1MjdiXHU5MDc5XHU4MDcwXHVmZjczXHUzMDY5XHU2MzZlXHU2MDgxXHU4ZDQ1XHU4YmNjXHUwMGY2Uj5HciJ9@";</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">console.log(g(a))</span></span><br></pre></td></tr></table></figure>

<p>运行这个文件查看结果</p>
<p><img src="/2020/05/12/article-6/WX20200512-102800.png" alt></p>
<p>我们得到了想要的一切</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这次逆向的重点是修改原来的js内容，其中有很多坑，比如base64实现的差异以及对混淆的处理，需要耐心调试才行。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>JS逆向</category>
      </categories>
      <tags>
        <tag>JS逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL基本操作</title>
    <url>/2020/05/19/article-7/</url>
    <content><![CDATA[<p>version：8.0.17</p>
<h2 id="常用基础命令"><a href="#常用基础命令" class="headerlink" title="常用基础命令"></a>常用基础命令</h2><h3 id="使用帮助"><a href="#使用帮助" class="headerlink" title="使用帮助"></a>使用帮助</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">help create</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Many <span class="built_in">help</span> items <span class="keyword">for</span> your request exist.</span><br><span class="line">To make a more specific request, please <span class="built_in">type</span> <span class="string">'help &lt;item&gt;'</span>,</span><br><span class="line"><span class="built_in">where</span> &lt;item&gt; is one of the following</span><br><span class="line">topics:</span><br><span class="line">   CREATE DATABASE</span><br><span class="line">   CREATE EVENT</span><br><span class="line">   CREATE FUNCTION</span><br><span class="line">   CREATE FUNCTION UDF</span><br><span class="line">   CREATE INDEX</span><br><span class="line">   CREATE LOGFILE GROUP</span><br><span class="line">   CREATE PROCEDURE</span><br><span class="line">   CREATE RESOURCE GROUP</span><br><span class="line">   CREATE ROLE</span><br><span class="line">   CREATE SCHEMA</span><br><span class="line">   CREATE SERVER</span><br><span class="line">   CREATE SPATIAL REFERENCE SYSTEM</span><br><span class="line">   CREATE TABLE</span><br><span class="line">   CREATE TABLESPACE</span><br><span class="line">   CREATE TRIGGER</span><br><span class="line">   CREATE USER</span><br><span class="line">   CREATE VIEW</span><br><span class="line">   SHOW</span><br><span class="line">   SHOW CREATE DATABASE</span><br><span class="line">   SHOW CREATE EVENT</span><br><span class="line">   SHOW CREATE FUNCTION</span><br><span class="line">   SHOW CREATE PROCEDURE</span><br><span class="line">   SHOW CREATE SCHEMA</span><br><span class="line">   SHOW CREATE TABLE</span><br><span class="line">   SHOW CREATE USER</span><br><span class="line">   SPATIAL INDEXES</span><br></pre></td></tr></table></figure>



<h3 id="创建、删除、查看数据库"><a href="#创建、删除、查看数据库" class="headerlink" title="创建、删除、查看数据库"></a><strong>创建、删除、查看数据库</strong></h3><h4 id="创建默认字符集的数据库（默认是拉丁字符集）"><a href="#创建默认字符集的数据库（默认是拉丁字符集）" class="headerlink" title="创建默认字符集的数据库（默认是拉丁字符集）"></a>创建默认字符集的数据库（默认是拉丁字符集）</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database test_data;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show databases like &quot;test%&quot;;</span><br></pre></td></tr></table></figure>

<h4 id="创建gbk字符集的数据库"><a href="#创建gbk字符集的数据库" class="headerlink" title="创建gbk字符集的数据库"></a><strong>创建gbk字符集的数据库</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database test_gbk DEFAULT CHARACTER SET gbk COLLATE gbk_chinese_ci;</span><br></pre></td></tr></table></figure>

<h4 id="查看创建数据库的语句"><a href="#查看创建数据库的语句" class="headerlink" title="查看创建数据库的语句"></a>查看创建数据库的语句</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show create database test_gbk;</span><br></pre></td></tr></table></figure>

<h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop database test_data;</span><br></pre></td></tr></table></figure>

<h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><h4 id="进入指定数据库操作"><a href="#进入指定数据库操作" class="headerlink" title="进入指定数据库操作"></a>进入指定数据库操作</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use test_gbk;</span><br></pre></td></tr></table></figure>

<h4 id="查看当前连接的数据库"><a href="#查看当前连接的数据库" class="headerlink" title="查看当前连接的数据库"></a><strong>查看当前连接的数据库</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select database();</span><br></pre></td></tr></table></figure>

<h4 id="查看当前连接数据库的用户"><a href="#查看当前连接数据库的用户" class="headerlink" title="查看当前连接数据库的用户"></a><strong>查看当前连接数据库的用户</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select user();</span><br></pre></td></tr></table></figure>

<h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create user if not exists &#39;testuser&#39;@&#39;localhost&#39; identified by &#39;123456&#39;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create user if not exists &#39;company_read_only&#39;@&#39;localhost&#39; identified with mysql_native_password by &#39;company_pass&#39; with max_queries_per_hour 500 max_updates_per_hour 100;</span><br></pre></td></tr></table></figure>

<p>上述声明将为用户创建以下内容:</p>
<ul>
<li>用户名 : company read only</li>
<li>仅从localhost访问</li>
<li>可以限制对 IP范围的访问，例如 10.148.%.%。 通过给出%，用户可以从任何主机访问</li>
<li>密码：company_pass</li>
<li>使用 mysql_native_password（默认）身份验证</li>
<li>还可以指定任何可选的身份验证，例如 sha256_password、LDAP 或 Kerberos</li>
<li>用户可以在一小时内执行的最大查询数为 500</li>
<li>用户可以在一小时内执行的最大更新次数为 100次</li>
</ul>
<h3 id="授予和撤销用户的访问权限"><a href="#授予和撤销用户的访问权限" class="headerlink" title="授予和撤销用户的访问权限"></a>授予和撤销用户的访问权限</h3><p>你可以限制用户访问特定数据库或表，或限制特定操作，如 SELECT 、 INSERT 和UPDATE。 你需要拥有 GRANT 权限，才能为其他用户授予权限 。</p>
<h4 id="授予权限"><a href="#授予权限" class="headerlink" title="授予权限"></a>授予权限</h4><ul>
<li>将READ ONLY (SELECT)权限授予testuser用户</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant select on company.* to &#39;testuser&#39;@&#39;localhost&#39;;</span><br></pre></td></tr></table></figure>

<ul>
<li>限制查询指定的表。 将testuser用户限制为仅能查询employees 表 </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant select on employees.employees to &#39;testuser&#39;@&#39;localhost&#39;;</span><br></pre></td></tr></table></figure>

<ul>
<li>将访问权限限制为仅能查询指定列。限制testuser用户仅能访问employees表的first_name列和last_name列</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant select(first_name, last_name) on employees.employees to &#39;testuser&#39;@&#39;localhost&#39;;</span><br></pre></td></tr></table></figure>

<ul>
<li>扩展授权。可以通过执行新授权来扩展授权。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant select(salary) on employees.salaries to &#39;company_read_only&#39;@&#39;localhost&#39;;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建 SUPER 用户 。 需要一个管理员账户来管理该服务器 。 ALL 表示除 GRANT 权限之外的所有权限 。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create user &#39;super_admin&#39;@&#39;%&#39; identified with mysql_native_password by &#39;super@admin&#39;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant all on *.* to &#39;super_admin&#39;@&#39;%&#39;;</span><br></pre></td></tr></table></figure>

<ul>
<li>授予 GRANT特权。 用户拥有 GRANT OPTION权限才能授予其他用户权限。 可以将 GRANT 特权扩展到 super_admin 超级用户</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant grant option on *.* to &#39;super_admin&#39;@&#39;%&#39;;</span><br></pre></td></tr></table></figure>

<h4 id="检查授权"><a href="#检查授权" class="headerlink" title="检查授权"></a><strong>检查授权</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show grants for &#39;super_admin&#39;@&#39;%&#39;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show grants for &#39;company_read_only&#39;@&#39;localhost&#39;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show grants for &#39;testuser&#39;@&#39;localhost&#39;;</span><br></pre></td></tr></table></figure>

<h4 id="撤销权限"><a href="#撤销权限" class="headerlink" title="撤销权限"></a>撤销权限</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">revoke insert,update,select,delete on test_gbk.* from &#39;testuser&#39;@&#39;localhost&#39;;</span><br><span class="line"></span><br><span class="line"># 回收后查看权限</span><br><span class="line">mysql&gt; show grants for &#39;testuser&#39;@&#39;localhost&#39;;</span><br><span class="line">+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| Grants for testuser@localhost                                                                                                                                                                                |</span><br><span class="line">+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| GRANT USAGE ON *.* TO &#96;testuser&#96;@&#96;localhost&#96;                                                                                                                                                                 |</span><br><span class="line">| GRANT CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER ON &#96;test_gbk&#96;.* TO &#96;testuser&#96;@&#96;localhost&#96; |</span><br><span class="line">+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>撤销 company_read_only 用户对薪水列的访问权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">revoke select(salary) on employees.salaries from &#39;company_read_only&#39;@&#39;localhost&#39;;</span><br></pre></td></tr></table></figure>

<h4 id="修改-mysql-user-表"><a href="#修改-mysql-user-表" class="headerlink" title="修改 mysql.user 表"></a>修改 mysql.user 表</h4><p>所有用户信息及权限都存储在 mysql.user表中 。如果你有权访问 mysql.user表， 则可以直接通过修改 mysql.user 表来创建用户并授予权限 。</p>
<p>如果你使用 GRANT 、 REVOKE 、 SET PASSWORD 或 RENAME USER 等账户管理语句间 接修改授权表， 则 服务器会通知这些更改，并立即再次将授权表加载到内存中 。</p>
<p>如果使用 INSERT、 UPDATE 或 DELETE 等语句直接修改授权表，则更改不会影响权限检查，除非你重新启动服务器或指示其重新加载表 。 如果直接更改授权表，但忘记了重新加载表，那么在重新启动服务器之前，这些更改无效 。</p>
<p>可以通过执行 FLUSH PRIVILEGES 语句来完成 GRANT 表的重新加载 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update mysql.user set host&#x3D;&#39;localhost&#39; where user&#x3D;&#39;super_admin&#39;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<h4 id="锁定用户"><a href="#锁定用户" class="headerlink" title="锁定用户"></a>锁定用户</h4><p>MySQL支持使用 CREATE USER或 ALTER USER 锁定用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter user &#39;company_read_only&#39;@&#39;localhost&#39; account lock;</span><br></pre></td></tr></table></figure>

<p>解锁</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter user &#39;company_read_only&#39;@&#39;localhost&#39; account unlock;</span><br></pre></td></tr></table></figure>

<h4 id="为用户创建角色"><a href="#为用户创建角色" class="headerlink" title="为用户创建角色"></a>为用户创建角色</h4><p>MySQL 的角色是一个权限的集合。 与用户账户一样，角色的权限可以被授予和撤销。 用户账户被授予角色后， 该角色就会将其拥有的权限授予该账户 。 之前，我们为不同的用 户创建了读取 、写入和管理权限。对于写入权限，我们已授予用户 INSERT、 DELETE 和 UPDATE 权限 。 现在你可以将这些权限授予某个角色， 然后为用户分配该角色。通过这种方式，可以避免为许多用户账户单独授予权限的麻烦。</p>
<ul>
<li>创建角色</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create role &#39;app_read_only&#39;, &#39;app_writes&#39;, &#39;app_developer&#39;;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用 GRANT 语句为角色分自己权限</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant select on employees.* to &#39;app_read_only&#39;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant insert, update, delete on employees.* to &#39;app_writes&#39;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant all on employees.* to &#39;app_developer&#39;;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建用户。如果你不指定主机，则将采用 %(任意主机):</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create user emp_read_only identified by &#39;123&#39;;</span><br><span class="line">create user emp_write identified by &#39;123&#39;;</span><br><span class="line">create user emp_develpoer identified by &#39;123&#39;;</span><br><span class="line">create user emp_read_write identified by &#39;123&#39;;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用 GRANT 语句为用户分配角色 。你可以为用户分配多个角色 。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant &#39;app_read_only&#39; to emp_read_only;</span><br><span class="line">grant &#39;app_writes&#39; to emp_write;</span><br><span class="line">grant &#39;app_developer&#39; to emp_develpoer;</span><br><span class="line">grant &#39;app_read_only&#39;, &#39;app_writes&#39; to emp_read_write;</span><br></pre></td></tr></table></figure>

<h3 id="创建、删除表"><a href="#创建、删除表" class="headerlink" title="创建、删除表"></a>创建、删除表</h3><p>在表中定义列时，应该指定列的名称、数据类型(整型、浮点型、字符串等)和默认 值(如果有的话) 。 MySQL 支持各种数据类型。更多有关信息请参阅MySQL文档(<a href="https://dev.mysql.com/doc/refman/8.0/en/spatial-extensions.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/8.0/en/spatial-extensions.html</a> )。下面是所有数据类型的概述，其中 JSON 数据类型是一个新的扩展类型  。</p>
<ol>
<li><p>数字 : TINYINT 、 SMALLINT 、 MEDIUMINT 、 INT 、 BIGINT 和 BIT。</p>
</li>
<li><p>浮点数 : DECIMAL、 FLOAT 和 DOUBLE。</p>
</li>
<li><p>字符串: CHAR、 VARCHAR、 BINARY、 VARBINARY、 BLOB、 TEXT、 ENUM 和 SET。</p>
</li>
<li><p>Spatial 数据类型，更多详细信息请参阅 <a href="https://dev.mysql.com/doc/refman/8.0/en/spatial-extensions.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/8.0/en/spatial-extensions.html</a> 。</p>
</li>
<li><p>JSON 数据类型，将在后面单独讨论。</p>
</li>
</ol>
<p>你可以在一个数据库中创建多张表 。</p>
<h4 id="建表，并且建立两个字段"><a href="#建表，并且建立两个字段" class="headerlink" title="建表，并且建立两个字段"></a><strong>建表，并且建立两个字段</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table test(</span><br><span class="line">       id int(4) not null,</span><br><span class="line">       name char(20) not null</span><br><span class="line">       );</span><br></pre></td></tr></table></figure>

<h4 id="另一种方式"><a href="#另一种方式" class="headerlink" title="另一种方式"></a>另一种方式</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table if not exists test_gbk.customers(</span><br><span class="line">       id int unsigned AUTO_INCREMENT PRIMARY KEY,</span><br><span class="line">       first_name varchar(20),</span><br><span class="line">       last_name varchar(20),</span><br><span class="line">       country varchar(20)</span><br><span class="line">       ) engine&#x3D;InnoDB;</span><br></pre></td></tr></table></figure>

<p>其中的选项解释如下 。</p>
<p>• 句点符号: 表可以使用 database.table 引用。 如果已经连接到数据库， 则可 以简单地使用 customers 而不是 company . customers。</p>
<p>• IF NOT EXISTS :如果存在一个具有相同名字的表 ， 并且你指定了这个子句， MySQL 只会抛出一个警告，告知表已经存在 。 否则 ， MySQL 将抛出 一个错误 。</p>
<p>• id:它被声明为一个整型数，因为它只包含整型数。除此之外，还有两个关键字， AUTO_INCREMENT 和 PRIMARY KEY 。</p>
<p>• AUTO INCREMENT: 自动生成线性递增序列，因此不必担心为每一行的 id分配 值。</p>
<p>• PRIMARY KEY: 每行都Fl’!一个非空的UNIQUE列标识。 只有一列应该在表中定 义。 如果一个表包含 AUTO INCREMENT列， 则它会被视为 PRIMARY KEY。</p>
<p>• first_name、 last_name 和country: 它们包含字符串 ， 因此它们被定义为 varchar 。</p>
<p>• Engine:与列定义一起，还应该指定存储引擎。一些类型的存储引擎包括 InnoDB、 MyISAM、FEDERATED、BLACKHOLE、CSV和MEMORY。在所有引擎中， InnoDB 是唯一的事务引擎， 也是默认引擎。</p>
<h4 id="查看表"><a href="#查看表" class="headerlink" title="查看表"></a>查看表</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure>

<h4 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a><strong>查看表结构</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">desc test;</span><br></pre></td></tr></table></figure>

<h4 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a><strong>删除表</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop table test;</span><br></pre></td></tr></table></figure>

<h4 id="查看建表"><a href="#查看建表" class="headerlink" title="查看建表"></a><strong>查看建表</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show create table test1\G</span><br></pre></td></tr></table></figure>

<h4 id="克隆表结构"><a href="#克隆表结构" class="headerlink" title="克隆表结构"></a>克隆表结构</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table new_customers like customers;</span><br></pre></td></tr></table></figure>

<h3 id="插入、更新和删除行"><a href="#插入、更新和删除行" class="headerlink" title="插入、更新和删除行"></a>插入、更新和删除行</h3><h4 id="INSERT-语句用于在表中创建新记录"><a href="#INSERT-语句用于在表中创建新记录" class="headerlink" title="INSERT 语句用于在表中创建新记录"></a>INSERT 语句用于在表中创建新记录</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; insert ignore into customers</span><br><span class="line">       (first_name, last_name, country)</span><br><span class="line">       values</span><br><span class="line">       (&#39;Mike&#39;, &#39;Galler&#39;, &#39;USA&#39;),</span><br><span class="line">       (&#39;Andy&#39;, &#39;Hollands&#39;, &#39;Australia&#39;),</span><br><span class="line">       (&#39;Ravi&#39;, &#39;Vadantam&#39;, &#39;India&#39;),</span><br><span class="line">       (&#39;Rajiv&#39;, &#39;Perera&#39;, &#39;Sri Lanka&#39;);</span><br></pre></td></tr></table></figure>

<p>或者可以明确地写出 id列，如果你想插入特定的 id:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; insert ignore into customers</span><br><span class="line">       (id, first_name, last_name, country)</span><br><span class="line">       values</span><br><span class="line">       (1, &#39;Mike&#39;, &#39;Galler&#39;, &#39;USA&#39;),</span><br><span class="line">       (2, &#39;Andy&#39;, &#39;Hollands&#39;, &#39;Australia&#39;),</span><br><span class="line">       (3, &#39;Ravi&#39;, &#39;Vadantam&#39;, &#39;India&#39;),</span><br><span class="line">       (4, &#39;Rajiv&#39;, &#39;Perera&#39;, &#39;Sri Lanka&#39;);</span><br></pre></td></tr></table></figure>

<p>IGNORE:如果该行已经存在，并给出了 IGNORE子句，则新数据将被忽略， INSERT 语句仍然会执行成功，同时生成一个警告和重复数据的数目。 反之，如果未给出 IGNORE 子句，则 INSERT 语句会生成一条错误信息 。 行的唯一性由主键标识。</p>
<h4 id="UPDATE-语句用于修改表中的现有记录"><a href="#UPDATE-语句用于修改表中的现有记录" class="headerlink" title="UPDATE 语句用于修改表中的现有记录"></a>UPDATE 语句用于修改表中的现有记录</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update customer set first_name&#x3D;&#39;Rajiv&#39;, country&#x3D;&#39;UK&#39; where id&#x3D;4;</span><br></pre></td></tr></table></figure>

<p>WHERE : 这是用于过滤的子句 。 在 WHERE 子句后指定的任何条件都会用于过滤，被筛选出来的行都会被更新 。</p>
<h4 id="DELETE-语句用于删除表中记录"><a href="#DELETE-语句用于删除表中记录" class="headerlink" title="DELETE 语句用于删除表中记录"></a>DELETE 语句用于删除表中记录</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delete from customers where id&#x3D;5 and first_name&#x3D;&#39;Mike&#39;;</span><br></pre></td></tr></table></figure>

<h4 id="REPLACE-、INSERT-、ON-DUPLICATE-KEY-UPDATE"><a href="#REPLACE-、INSERT-、ON-DUPLICATE-KEY-UPDATE" class="headerlink" title="REPLACE 、INSERT 、ON DUPLICATE KEY UPDATE"></a>REPLACE 、INSERT 、ON DUPLICATE KEY UPDATE</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">replace into customers values (1, &#39;Mike&#39;, &#39;Galler&#39;, &#39;America&#39;);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into payments values (&#39;Mike Galler&#39;, 200) on duplicate key update payment&#x3D;payment+values(payment);</span><br></pre></td></tr></table></figure>

<p>在很多情况下，我们需要处理重复项 。行的唯一性由主键标识 。如果行已经存在，则 REPLACE 会简单地删除行并插入新行;如果行不存在，则 REPLACE 等同于 INSERT。</p>
<p>如果你想在行已经存在的情况下处理重复项，则需要使用 ON DUPLICATE KEY UPDATE。 如果指定了 ON DUPLICATE KEY UPDATE 选项，并且 INSERT 语句在 PRIMARY KEY中引发了重复值， 则MySQL会用新值更新已有行。</p>
<p>区别：</p>
<p>（1）在没有主键或者唯一索引重复时，replace与insert .. on deplicate udpate相同。</p>
<p>（2）在主键或者唯一索引重复时，<strong>replace是delete老记录，而录入新的记录，所以原有的所有记录会被清除，这个时候，如果replace语句的字段不全的话，有些原有的比如c字段的值会被自动填充为默认值。</strong>而insert .. duplicate update则只执行update标记之后的sql，从表象上来看相当于一个简单的update语句。它保留了所有字段的旧值，只更新update后面的语句，而replace没有保留旧值，直接删除再insert新值。<br>从底层执行效率上来讲，replace要比insert .. on duplicate update效率要高，但是在写replace的时候，字段要写全，防止老的字段数据被删除。</p>
<h4 id="TRUNCATING-TABLE"><a href="#TRUNCATING-TABLE" class="headerlink" title="TRUNCATING TABLE"></a>TRUNCATING TABLE</h4><p>删除整个表需要很长时间，因为 MySQL 需要逐行执行操作。 删除表的所有行(保留 表结构)的最快方法是使用TRUNCATE TABLE语句。</p>
<p>TRUNCATING TABLE 是 MySQL 中的 DDL 操作，也就是说一旦数据被清空 ，就不能被回滚。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">truncate table test1;</span><br></pre></td></tr></table></figure>

<h3 id="加载示例数据"><a href="#加载示例数据" class="headerlink" title="加载示例数据"></a>加载示例数据</h3><h4 id="下载压缩文件"><a href="#下载压缩文件" class="headerlink" title="下载压缩文件"></a>下载压缩文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget <span class="string">'https://codeload.github.com/datacharmer/test_db/zip/master'</span> -O master.zip</span><br></pre></td></tr></table></figure>

<h4 id="解斥缩文件"><a href="#解斥缩文件" class="headerlink" title="解斥缩文件"></a>解斥缩文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unzip master.zip</span><br></pre></td></tr></table></figure>

<h4 id="加载数据"><a href="#加载数据" class="headerlink" title="加载数据"></a>加载数据</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> test_db-master</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p &lt; employees.sql</span><br></pre></td></tr></table></figure>

<h4 id="验证数据"><a href="#验证数据" class="headerlink" title="验证数据"></a>验证数据</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u root -p employees -A</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show tables;</span><br><span class="line">+----------------------+</span><br><span class="line">| Tables_in_employees  |</span><br><span class="line">+----------------------+</span><br><span class="line">| current_dept_emp     |</span><br><span class="line">| departments          |</span><br><span class="line">| dept_emp             |</span><br><span class="line">| dept_emp_latest_date |</span><br><span class="line">| dept_manager         |</span><br><span class="line">| employees            |</span><br><span class="line">| salaries             |</span><br><span class="line">| titles               |</span><br><span class="line">+----------------------+</span><br><span class="line">8 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; desc employees\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">  Field: emp_no</span><br><span class="line">   Type: int(11)</span><br><span class="line">   Null: NO</span><br><span class="line">    Key: PRI</span><br><span class="line">Default: NULL</span><br><span class="line">  Extra:</span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">  Field: birth_date</span><br><span class="line">   Type: date</span><br><span class="line">   Null: NO</span><br><span class="line">    Key:</span><br><span class="line">Default: NULL</span><br><span class="line">  Extra:</span><br><span class="line">*************************** 3. row ***************************</span><br><span class="line">  Field: first_name</span><br><span class="line">   Type: varchar(14)</span><br><span class="line">   Null: NO</span><br><span class="line">    Key:</span><br><span class="line">Default: NULL</span><br><span class="line">  Extra:</span><br><span class="line">*************************** 4. row ***************************</span><br><span class="line">  Field: last_name</span><br><span class="line">   Type: varchar(16)</span><br><span class="line">   Null: NO</span><br><span class="line">    Key:</span><br><span class="line">Default: NULL</span><br><span class="line">  Extra:</span><br><span class="line">*************************** 5. row ***************************</span><br><span class="line">  Field: gender</span><br><span class="line">   Type: enum(&#39;M&#39;,&#39;F&#39;)</span><br><span class="line">   Null: NO</span><br><span class="line">    Key:</span><br><span class="line">Default: NULL</span><br><span class="line">  Extra:</span><br><span class="line">*************************** 6. row ***************************</span><br><span class="line">  Field: hire_date</span><br><span class="line">   Type: date</span><br><span class="line">   Null: NO</span><br><span class="line">    Key:</span><br><span class="line">Default: NULL</span><br><span class="line">  Extra:</span><br><span class="line">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><h4 id="查询所有列"><a href="#查询所有列" class="headerlink" title="查询所有列"></a>查询所有列</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from departments;</span><br></pre></td></tr></table></figure>

<h4 id="选择列"><a href="#选择列" class="headerlink" title="选择列"></a>选择列</h4><p>选择 dept_manager 的 emp_no 和 dept_no 列：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select emp_no,dept_no from dept_manager;</span><br></pre></td></tr></table></figure>

<h4 id="计数"><a href="#计数" class="headerlink" title="计数"></a>计数</h4><p>从 employees表中查找员工的数量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select count(*) from employees;</span><br></pre></td></tr></table></figure>

<h4 id="条件过滤"><a href="#条件过滤" class="headerlink" title="条件过滤"></a>条件过滤</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select emp_no from employees where first_name&#x3D;&#39;Georgi&#39; and last_name&#x3D;&#39;Facello&#39;;</span><br></pre></td></tr></table></figure>

<h4 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h4><ul>
<li><p>IN: 检查一个值是存在一组值中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select count(*) from employees where last_name in (&#39;Christ&#39;, &#39;Lamba&#39;, &#39;Baba&#39;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>BETWEEN …AND:检查一个值是否在一个范围内</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select count(*) from employees where hire_date between &#39;1986-12-01&#39; and &#39;1986-12-31&#39;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>NOT 你可以简单地用 NOT 运算符来否定结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select count(*) from employees where hire_date not between &#39;1986-12-01&#39; and &#39;1986-12-31&#39;;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="简单模式匹配"><a href="#简单模式匹配" class="headerlink" title="简单模式匹配"></a>简单模式匹配</h4><p>可以使用 LIKE 运算符来实现简单模式匹配。 使用下画线( _ )来精准匹配一个字符，使用( % ) 来匹配任意数量的字符 。</p>
<ul>
<li><p>找出名字以 Christ开头的所有员工的人数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select count(*) from employees where first_name like &#39;christ%&#39;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>找出名字以 Christ开头并以 ed结尾的所有员工的人数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select count(*) from employees where first_name like &#39;christ%ed&#39;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>找出名字中包含 sri的所有员工的人数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select count(*) from employees where first_name like &#39;%sri%&#39;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>找到名字以 er 结尾的所有员工的人数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select count(*) from employees where first_name like &#39;%er&#39;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>找出名字以任意两个字符开头、后面跟随 ka、再后面跟随任意数量字符的所有员工的人数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select count(*) from employees where first_name like &#39;__ka%&#39;;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p>你可以利用 RLIKE 或 REGEXP 运算符在 WHERE 子句中使用正则表达式</p>
<ul>
<li><p>找出名字以 Christ开头的所有员工的人数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select count(*) from employees where first_name rlike &#39;^christ&#39;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>找出姓氏以 ba结尾的所有员工的人数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select count(*) from employees where last_name regexp &#39;ba$&#39;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>查找姓氏不包含元音 (a、 e、 i、 o和u)的所有员工的人数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select count(*) from employees where last_name not regexp &#39;[aeiou]&#39;;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="限定结果"><a href="#限定结果" class="headerlink" title="限定结果"></a>限定结果</h4><p>查询hire date在1986年之前的任何10名员工的姓名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select first_name, last_name from employees where hire_date &lt; &#39;1986-01-01&#39; limit 10;</span><br></pre></td></tr></table></figure>

<h4 id="使用表别名"><a href="#使用表别名" class="headerlink" title="使用表别名"></a>使用表别名</h4><p>使用自别名来更改 COUNT (*)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select count(*) as count from employees where hire_date between &#39;1986-12-01&#39; and &#39;1986-12-31&#39;;</span><br><span class="line">+-------+</span><br><span class="line">| count |</span><br><span class="line">+-------+</span><br><span class="line">|  3081 |</span><br><span class="line">+-------+</span><br><span class="line">1 row in set (0.09 sec)</span><br></pre></td></tr></table></figure>

<h3 id="对结果排序"><a href="#对结果排序" class="headerlink" title="对结果排序"></a>对结果排序</h3><p>查找薪水最高的前 5名员工的员工编号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select emp_no, salary from salaries order by salary desc limit 5;</span><br></pre></td></tr></table></figure>

<p>你可以在 SELECT 语句中提及列的位置，而不是指定列名称</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select emp_no, salary from salaries order by 2 desc limit 5;</span><br></pre></td></tr></table></figure>

<h3 id="对结果分组-聚合函数"><a href="#对结果分组-聚合函数" class="headerlink" title="对结果分组(聚合函数)"></a>对结果分组(聚合函数)</h3><h4 id="COUNT"><a href="#COUNT" class="headerlink" title="COUNT"></a>COUNT</h4><ul>
<li><p>分别找出男性和女性员工的人数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select gender, count(*) as count from employees group by gender;</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果你希望查找员工名字中最常见的10个名字，可以使用 GROUP BY first_name 对所有名字分组，然后使用COUNT(first_name)在各组内计数，最后使用ORDER BY计数对结果进行排序 并将返回结果行数限制为前 10行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select first_name,count(first_name) as count from employees group by first_name order by count desc limit 10;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="SUM"><a href="#SUM" class="headerlink" title="SUM"></a>SUM</h4><p>查找每年给予员工的薪水总额并按薪水高低对结果进行排序。 YEAR ()函数将返回给定日期所在的年份</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select year(from_date) as date, sum(salary) as sum from salaries group by date order by sum desc;</span><br></pre></td></tr></table></figure>

<h4 id="AVERAGE"><a href="#AVERAGE" class="headerlink" title="AVERAGE"></a>AVERAGE</h4><p>查找平均工资最高的10名员工</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select emp_no, avg(salary) as avg from salaries group by emp_no order by avg desc limit 10;</span><br></pre></td></tr></table></figure>

<h4 id="DISTINCT"><a href="#DISTINCT" class="headerlink" title="DISTINCT"></a>DISTINCT</h4><p>可以使用 DISTINCT 子句过滤出表中的不同条目</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select distinct title from titles;</span><br></pre></td></tr></table></figure>

<h4 id="使用-HAVING-过滤"><a href="#使用-HAVING-过滤" class="headerlink" title="使用 HAVING 过滤"></a>使用 HAVING 过滤</h4><p>可以通过添加HAVING子句来过滤GROUP BY子句的结果。 例如，找到平均工资超过 140,000美元的员工</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select emp_no,avg(salary) as avg from salaries group by emp_no having avg &gt; 140000 order by avg desc;</span><br></pre></td></tr></table></figure>

<h3 id="查询数据并保存到文件和表中"><a href="#查询数据并保存到文件和表中" class="headerlink" title="查询数据并保存到文件和表中"></a>查询数据并保存到文件和表中</h3><p>我们可以使用 SELECT INTO OUTFILE 语句将输出保存到文件中。</p>
<p>可以指定列和行分隔符，然后可以将数据导入其他数据平台 。</p>
<h4 id="另存为文件"><a href="#另存为文件" class="headerlink" title="另存为文件"></a>另存为文件</h4><ul>
<li>要将输出结果保存到文件中，你需要拥有 FILE权限</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create user user_to_file identified by &#39;123&#39;;</span><br><span class="line">grant select on employees.* to user_to_file;</span><br><span class="line">grant file on *.* to user_to_file;</span><br></pre></td></tr></table></figure>

<ul>
<li>在Ubuntu系统中， 默认情况下， MySQL不允许写人文件。 你应该在配置文件中 设置secure_file_priv并重新启动MySQL，配置方法如下</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 my.cnf配置文件中添加如下信息 /usr/local/mysql/support-files/my.cnf</span></span><br><span class="line">[mysqld]</span><br><span class="line">secure-file-priv=<span class="string">"/tmp"</span></span><br></pre></td></tr></table></figure>

<p>​        如果没有配置文件 my.cnf 需手动创建</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/my.cnf</span><br></pre></td></tr></table></figure>

<p>​        然后在文件中添加如下信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line">character-set-server=utf8</span><br><span class="line"></span><br><span class="line"><span class="comment">#sql_mode='NO_AUTO_VALUE_ON_ZERO,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION,PIPES_AS_CONCAT,ANSI_QUOTES'</span></span><br><span class="line"></span><br><span class="line">sql_mode=<span class="string">'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION'</span></span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure>

<p>​        最后重启mysql服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo /usr/<span class="built_in">local</span>/mysql/support-files/mysql.server restart</span><br></pre></td></tr></table></figure>

<p>​        进入mysql查看配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like &#39;%secure%&#39;;</span><br><span class="line">+--------------------------+---------------+</span><br><span class="line">| Variable_name            | Value         |</span><br><span class="line">+--------------------------+---------------+</span><br><span class="line">| require_secure_transport | OFF           |</span><br><span class="line">| secure_file_priv         | &#x2F;private&#x2F;tmp&#x2F; |</span><br><span class="line">+--------------------------+---------------+</span><br><span class="line">2 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure>

<p>以下语句会将输出结果保存为 csv 格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select first_name, last_name into outfile &#39;&#x2F;tmp&#x2F;result.csv&#39; fields terminated by &#39;,&#39; optionally enclosed by &#39;&quot;&#39; lines terminated by  &#39;\n&#39; from employees where hire_date&lt;&#39;1986-01-01&#39; limit 10;</span><br></pre></td></tr></table></figure>

<h4 id="另存为表"><a href="#另存为表" class="headerlink" title="另存为表"></a>另存为表</h4><p>我们也可以将 SELECT 语句的结果保存到表中 。 即使表不存在， 也可以使用 CREATE 和 SELECT 来创建表并加载数据 。 如果表己存在，则可以使用 INSERT 和 SELECT 加载数据。</p>
<p>可以将标题保存到新的 titles_only 表中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table titles_only as select distinct title from titles;</span><br></pre></td></tr></table></figure>

<p>如果表已经存在，则可以使用 INSERT INTO SELECT 语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into titles_only select distinct title from titles;</span><br></pre></td></tr></table></figure>

<h3 id="将数据加载到表中"><a href="#将数据加载到表中" class="headerlink" title="将数据加载到表中"></a>将数据加载到表中</h3><p>创建一个表来保存数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table emplyee_names (</span><br><span class="line">       first_name varchar(14) not null,</span><br><span class="line">       last_name varchar(16) not null</span><br><span class="line">       ) engine&#x3D;innodb;</span><br></pre></td></tr></table></figure>

<p>确保文件存在</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ls -lhtr /tmp/result.csv</span><br></pre></td></tr></table></figure>

<p>使用 LOAD DATA INFILE 语句加载数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; load data infile &#39;&#x2F;tmp&#x2F;result.csv&#39; into table emplyee_names</span><br><span class="line">       fields terminated by &#39;,&#39;</span><br><span class="line">       optionally enclosed by &#39;&quot;&#39;</span><br><span class="line">       lines terminated by &#39;\n&#39;;</span><br></pre></td></tr></table></figure>

<p>该文件可以以完整路径名的形式给出，以指定其确切位置 。 如果以相对路径名的形式给出，则相对路径名将被解析为相对于客户机程序启动的目录 。</p>
<ul>
<li>如果文件开头包含一些你想忽略的行，可以用 IGNORE n Lines 指定</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; load data infile &#39;&#x2F;tmp&#x2F;result.csv&#39; into table emplyee_names</span><br><span class="line">       fields terminated by &#39;,&#39;</span><br><span class="line">       optionally enclosed by &#39;&quot;&#39;</span><br><span class="line">       lines terminated by &#39;\n&#39;</span><br><span class="line">       ignore 1 lines;</span><br></pre></td></tr></table></figure>

<ul>
<li>可以用 REPLACE或者 IGNORE来处理重复的行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; load data infile &#39;&#x2F;tmp&#x2F;result.csv&#39; replace into table emplyee_names</span><br><span class="line">       fields terminated by &#39;,&#39;</span><br><span class="line">       optionally enclosed by &#39;&quot;&#39;</span><br><span class="line">       lines terminated by &#39;\n&#39;</span><br><span class="line">       ignore 1 lines;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; load data infile &#39;&#x2F;tmp&#x2F;result.csv&#39; ignore into table emplyee_names</span><br><span class="line">       fields terminated by &#39;,&#39;</span><br><span class="line">       optionally enclosed by &#39;&quot;&#39;</span><br><span class="line">       lines terminated by &#39;\n&#39;</span><br><span class="line">       ignore 1 lines;</span><br></pre></td></tr></table></figure>

<h3 id="表关联"><a href="#表关联" class="headerlink" title="表关联"></a>表关联</h3><p>假设你想用 emp_no: 110022 找到员工的姓名和部门号码:</p>
<ul>
<li>部门编号和名称存储在 departments表中</li>
<li>员工编号和其他详细信息(例如 first_name 和 last_name )存储在 employees 表中 </li>
<li>员工和部门的映射关系存储在 dept_manager表中</li>
</ul>
<p>如果你不想使用 JOIN，可以这样做</p>
<ol>
<li><p>从 employee 表中查找 emp_no 为 110022 的员工姓名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select emp.emp_no, emp.first_name, emp.last_name from employees as emp where emp.emp_no&#x3D;110022;</span><br></pre></td></tr></table></figure>
</li>
<li><p>从 dept_manager 表中查找部门编号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select dept_no from dept_manager where emp_no&#x3D;&#39;110022&#39;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>从 departments 表中查找部门名称</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select dept_name from departments dept where dept.dept_no&#x3D;&#39;d001&#39;;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="使用join操作"><a href="#使用join操作" class="headerlink" title="使用join操作"></a>使用join操作</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select emp.emp_no, emp.first_name, emp.last_name, dept.dept_name from employees emp</span><br><span class="line">       join dept_manager dept_mgr</span><br><span class="line">           on emp.emp_no&#x3D;dept_mgr.emp_no and emp.emp_no&#x3D;110022</span><br><span class="line">       join departments dept</span><br><span class="line">           on dept_mgr.dept_no&#x3D;dept.dept_no;</span><br></pre></td></tr></table></figure>

<p>假设想了解每个部门的平均工资，你可以使用 AVG 函数并按照dept_no进行分组。要找出部门名称，可以将结果与departments 表通过dept_no 列进行关联</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select dept_name, avg(salary) as avg_salary</span><br><span class="line">from</span><br><span class="line">    salaries</span><br><span class="line">join dept_emp</span><br><span class="line">    on salaries.emp_no&#x3D;dept_emp.emp_no</span><br><span class="line">join departments as dept</span><br><span class="line">    on dept_emp.dept_no&#x3D;dept.dept_no</span><br><span class="line">group by</span><br><span class="line">    dept_emp.dept_no</span><br><span class="line">order by </span><br><span class="line">	avg_salary </span><br><span class="line">desc</span><br><span class="line">;</span><br></pre></td></tr></table></figure>

<h4 id="通过与自己关联来识别重复项"><a href="#通过与自己关联来识别重复项" class="headerlink" title="通过与自己关联来识别重复项"></a>通过与自己关联来识别重复项</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select empl1.*</span><br><span class="line">from</span><br><span class="line">    employees as empl1</span><br><span class="line">join employees empl2</span><br><span class="line">    on empl1.first_name&#x3D;empl2.first_name</span><br><span class="line">    and empl1.last_name&#x3D;empl2.last_name</span><br><span class="line">    and empl1.gender&#x3D;empl2.gender</span><br><span class="line">    and empl1.hire_date&#x3D;empl2.hire_date</span><br><span class="line">    and empl1.emp_no!&#x3D;empl2.emp_no</span><br><span class="line">order by</span><br><span class="line">    first_name, last_name;</span><br></pre></td></tr></table></figure>

<h4 id="使用子查询"><a href="#使用子查询" class="headerlink" title="使用子查询"></a>使用子查询</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select</span><br><span class="line">    first_name, last_name</span><br><span class="line">from </span><br><span class="line">    employees</span><br><span class="line">where</span><br><span class="line">    emp_no</span><br><span class="line">in</span><br><span class="line">    (</span><br><span class="line">        select </span><br><span class="line">            emp_no </span><br><span class="line">        from </span><br><span class="line">            titles</span><br><span class="line">        where</span><br><span class="line">            title&#x3D;&quot;Senior Engineer&quot; and from_date&#x3D;&quot;1986-06-26&quot;</span><br><span class="line">    )</span><br><span class="line">;</span><br></pre></td></tr></table></figure>

<p>找到工资最高的员工</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select</span><br><span class="line">    emp_no</span><br><span class="line">from </span><br><span class="line">    salaries</span><br><span class="line">where </span><br><span class="line">    salary&#x3D;(</span><br><span class="line">        select </span><br><span class="line">            max(salary) </span><br><span class="line">        from </span><br><span class="line">            salaries</span><br><span class="line">    )</span><br><span class="line">;</span><br></pre></td></tr></table></figure>

<h4 id="查找表之间不匹配的行"><a href="#查找表之间不匹配的行" class="headerlink" title="查找表之间不匹配的行"></a>查找表之间不匹配的行</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table employees_list1 as select * from employees where first_name like &#39;aa%&#39;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table employees_list2 as select * from employees where emp_no between 400000 and 500000 and gender&#x3D;&#39;F&#39;;</span><br></pre></td></tr></table></figure>

<p>我们已经知道如何找到两个列表中都存在的员工了 ，代码如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select</span><br><span class="line">    l1.*</span><br><span class="line">from </span><br><span class="line">    employees_list1 l1</span><br><span class="line">join employees_list2 l2</span><br><span class="line">    on l1.emp_no&#x3D;l2.emp_no</span><br><span class="line">;</span><br></pre></td></tr></table></figure>

<p>现在要找出存在于 employees_listl 但不存在于 employees_list2 中的员工</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select </span><br><span class="line">    *</span><br><span class="line">from </span><br><span class="line">    employees_list1 l1</span><br><span class="line">where </span><br><span class="line">    l1.emp_no </span><br><span class="line">not in </span><br><span class="line">    (</span><br><span class="line">        select</span><br><span class="line">            l2.emp_no</span><br><span class="line">        from </span><br><span class="line">            employees_list2 l2</span><br><span class="line">    )</span><br><span class="line">;</span><br></pre></td></tr></table></figure>

<p>或者也可以使用 OUTER JOIN</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select</span><br><span class="line">    l1.*</span><br><span class="line">from </span><br><span class="line">    employees_list1 l1</span><br><span class="line">left outer join employees_list2 l2</span><br><span class="line">    on l1.emp_no&#x3D;l2.emp_no</span><br><span class="line">where</span><br><span class="line">    l2.emp_no is null</span><br><span class="line">;</span><br></pre></td></tr></table></figure>

<p>outer join为第二个表中所有与第一个表中的行不匹配的行创建 NULL列。 如果使 用 RIGHT JOIN，则为第一个表中所有与第二个表中的行不匹配的行创建 NULL 列。</p>
<p>你也可以使用 OUTER JOIN 来查找民自己的行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select</span><br><span class="line">    l1.*</span><br><span class="line">from </span><br><span class="line">    employees_list1 l1</span><br><span class="line">left outer join employees_list2 l2</span><br><span class="line">    on l1.emp_no&#x3D;l2.emp_no</span><br><span class="line">where </span><br><span class="line">    l2.emp_no is not null</span><br><span class="line">;</span><br></pre></td></tr></table></figure>

<h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><p>存储过程处理的事一组SQL语句，且没有返回值</p>
<h4 id="如何操作"><a href="#如何操作" class="headerlink" title="如何操作"></a>如何操作</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* 删除已存在的存储过程 *&#x2F;</span><br><span class="line">drop procedure if exists create_employee;</span><br><span class="line">&#x2F;* 分隔符修改为 $$ *&#x2F;</span><br><span class="line">delimiter $$</span><br><span class="line"></span><br><span class="line">&#x2F;* IN 指定作为参数的变量，INOUT指定输出的变量 *&#x2F;</span><br><span class="line">create procedure create_employee (</span><br><span class="line">	Out new_emp_no INT,</span><br><span class="line">	IN first_name varchar(20),</span><br><span class="line">	IN last_name varchar(20),</span><br><span class="line">	IN gender enum(&#39;M&#39;, &#39;F&#39;),</span><br><span class="line">	IN birth_date date,</span><br><span class="line">	IN emp_dept_name varchar(40),</span><br><span class="line">	IN title varchar(50)</span><br><span class="line">)</span><br><span class="line">BEGIN</span><br><span class="line">	&#x2F;* 为emp_dept_no 和 salary 声明变量 *&#x2F;</span><br><span class="line">		declare emp_dept_no char(4);</span><br><span class="line">		declare salary int default 60000;</span><br><span class="line"></span><br><span class="line">	&#x2F;* 查询employees表中emp_no的最大值，赋值给变量 new_emp_no *&#x2F;</span><br><span class="line">	select max(emp_no) into new_emp_no from employees;</span><br><span class="line"></span><br><span class="line">	&#x2F;* 增加 new_emp_no *&#x2F;</span><br><span class="line">	set new_emp_no &#x3D; new_emp_no + 1;</span><br><span class="line"></span><br><span class="line">	&#x2F;* 插入数据到 employees 表中 *&#x2F;</span><br><span class="line">	&#x2F;* curdate() 函数给出当前日期 *&#x2F;</span><br><span class="line">	insert into employees values(new_emp_no, birth_date, first_name, last_name, gender, curdate());</span><br><span class="line"></span><br><span class="line">	&#x2F;* 找到 dept_name对应的dept_no *&#x2F;</span><br><span class="line">	select emp_dept_name;</span><br><span class="line"></span><br><span class="line">	select dept_no into emp_dept_no from departments where dept_name&#x3D;emp_dept_name;</span><br><span class="line"></span><br><span class="line">	select emp_dept_no;</span><br><span class="line"></span><br><span class="line">	&#x2F;* 插入dept_emp *&#x2F;</span><br><span class="line">	insert into dept_emp values(new_emp_no, emp_dept_no, curdate(), &#39;9999-01-01&#39;);</span><br><span class="line"></span><br><span class="line">	&#x2F;* 插入 title *&#x2F;</span><br><span class="line">	insert into titles values(new_emp_no, title, curdate(), &#39;9999-01-01&#39;);</span><br><span class="line">	</span><br><span class="line">	&#x2F;* 以title为条件查询的薪水 *&#x2F;</span><br><span class="line">	if title &#x3D; &#39;Staff&#39;</span><br><span class="line">		then set salary &#x3D; 100000;</span><br><span class="line">	elseif title &#x3D; &#39;Senior Staff&#39;</span><br><span class="line">		then set salary &#x3D; 120000;</span><br><span class="line"></span><br><span class="line">	end if;</span><br><span class="line"></span><br><span class="line">	&#x2F;* 插入 salaries *&#x2F;</span><br><span class="line">	insert into salaries values(new_emp_no, salary, curdate(), &#39;9999-01-01&#39;);</span><br><span class="line"></span><br><span class="line">END</span><br><span class="line">$$</span><br><span class="line"></span><br><span class="line">&#x2F;* 将分隔符改回 ; *&#x2F;</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>在mysql命令行终端执行代码</p>
</li>
<li><p>保存为文件，使用命令 mysql -u root -p employees &lt; stored_procedure.sql</p>
</li>
<li><p>使用 source 从文件加载 mysql&gt; source stored_procedure.sql</p>
</li>
</ul>
<p>要使用存储过程，需要将 execute 权限授予 emp_read_only 用户：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grant execute on employees.* to &#39;emp_read_only&#39;@&#39;%&#39;;</span><br></pre></td></tr></table></figure>

<p>使用CALL stored_procedure(OUT 变量， IN值) 语句和例程的名称调用存储过程。</p>
<p>使用emp_read_only 账户链接到MySQL</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u emp_read_only -p123 employees -A</span><br></pre></td></tr></table></figure>

<p>把想要传递的输出值存储在@new_emp_no变量中的emp_no的值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select @new_emp_no;</span><br></pre></td></tr></table></figure>

<p>检查是否在employees表、salaries表和tiltes表创建了行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from employees where emp_no&#x3D;500001;</span><br><span class="line">+--------+------------+------------+-----------+--------+------------+</span><br><span class="line">| emp_no | birth_date | first_name | last_name | gender | hire_date  |</span><br><span class="line">+--------+------------+------------+-----------+--------+------------+</span><br><span class="line">| 500001 | 1984-06-19 | John       | Smith     | M      | 2020-07-15 |</span><br><span class="line">+--------+------------+------------+-----------+--------+------------+</span><br><span class="line">1 row in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from salaries where emp_no&#x3D;500001;</span><br><span class="line">+--------+--------+------------+------------+</span><br><span class="line">| emp_no | salary | from_date  | to_date    |</span><br><span class="line">+--------+--------+------------+------------+</span><br><span class="line">| 500001 | 100000 | 2020-07-15 | 9999-01-01 |</span><br><span class="line">+--------+--------+------------+------------+</span><br><span class="line">1 row in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from titles where emp_no&#x3D;500001;</span><br><span class="line">+--------+-------+------------+------------+</span><br><span class="line">| emp_no | title | from_date  | to_date    |</span><br><span class="line">+--------+-------+------------+------------+</span><br><span class="line">| 500001 | Staff | 2020-07-15 | 9999-01-01 |</span><br><span class="line">+--------+-------+------------+------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>



<h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3><p>触发器用于在触发器事件之前或之后激活某些内容。</p>
<h4 id="如何操作-1"><a href="#如何操作-1" class="headerlink" title="如何操作"></a>如何操作</h4><p>例如：假设你希望在将薪水插入 salaries 表之前对其进行四舍五入 。 NEW 指的是正在插入的新值 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop trigger if exists salary_round;</span><br><span class="line">delimiter $$</span><br><span class="line">create trigger salary_round before insert on salaries</span><br><span class="line">for each row</span><br><span class="line">BEGIN</span><br><span class="line">	set NEW.salary&#x3D;ROUND(NEW.salary);</span><br><span class="line">END</span><br><span class="line">$$</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source &#x2F;tmp&#x2F;before_insert_trigger.sql</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; insert into salaries values(10002, 100000.79, curdate(), &#39;9999-01-01&#39;);</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line">mysql&gt; select * from salaries where emp_no&#x3D;10002 and from_date&#x3D;curdate();</span><br><span class="line">+--------+--------+------------+------------+</span><br><span class="line">| emp_no | salary | from_date  | to_date    |</span><br><span class="line">+--------+--------+------------+------------+</span><br><span class="line">|  10002 | 100001 | 2020-07-15 | 9999-01-01 |</span><br><span class="line">+--------+--------+------------+------------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure>

<p>假设你要记录 salaries 表中新增的薪水记录：</p>
<p>创建审计表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table salary_audit (emp_no int, user varchar(50), date_modified date);</span><br></pre></td></tr></table></figure>

<p>请注意， 以下触发器 PRECEDES salary_round 指定在 salary_round 触发器之前执行:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">delimiter $$</span><br><span class="line">create trigger salary_audit</span><br><span class="line">BEFORE INSERT</span><br><span class="line">	on salaries for each row precedes salary_round</span><br><span class="line">BEGIN</span><br><span class="line">	insert into salary_audit value(NEW.emp_no, USER(), curdate());</span><br><span class="line">END;$$</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; insert into salaries values(10003, 100000.79, curdate(), &#39;9999-01-01&#39;);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from salary_audit where emp_no&#x3D;10003;</span><br><span class="line">+--------+----------------+---------------+</span><br><span class="line">| emp_no | user           | date_modified |</span><br><span class="line">+--------+----------------+---------------+</span><br><span class="line">|  10003 | root@localhost | 2020-07-15    |</span><br><span class="line">+--------+----------------+---------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h3 id><a href="#" class="headerlink" title></a></h3><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>视图是一个基于 SQL语句的结果集的虚拟表。我们可以使用视图来限制用户对特定行的访问 。</p>
<h4 id="如何操作-2"><a href="#如何操作-2" class="headerlink" title="如何操作"></a>如何操作</h4><p>创建只对salaries表的emp_no 和 salary 列，且from_date在 ‘2002-01-01’ 之后的数据的访问权限.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create ALGORITHM&#x3D;UNDEFINED</span><br><span class="line">DEFINER&#x3D;&#96;root&#96;@&#96;localhost&#96;</span><br><span class="line">SQL security DEFINER view salary_view</span><br><span class="line">as</span><br><span class="line">select emp_no, salary from salaries where from_date &gt; &#39;2002-01-01&#39;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select emp_no, avg(salary) as avg from salary_view group by emp_no order by avg desc limit 5;</span><br><span class="line">+--------+-------------+</span><br><span class="line">| emp_no | avg         |</span><br><span class="line">+--------+-------------+</span><br><span class="line">|  43624 | 158220.0000 |</span><br><span class="line">|  47978 | 155709.0000 |</span><br><span class="line">| 253939 | 155513.0000 |</span><br><span class="line">| 109334 | 155190.0000 |</span><br><span class="line">|  80823 | 154459.0000 |</span><br><span class="line">+--------+-------------+</span><br><span class="line">5 rows in set (1.54 sec)</span><br></pre></td></tr></table></figure>

<p>列出所有视图</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show full tables where table_type like &#39;VIEW&#39;;</span><br></pre></td></tr></table></figure>

<p>检查视图的定义</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show create view salary_view\G</span><br></pre></td></tr></table></figure>

<p>我们可以更新没有子查询、 JOINS 、 GROUP BY 子句、 union 等的简单视阁 。 如果基础表有默认值， 那么 salary_view 就是一个可以被更新或插入的简单视图 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; update salary_view set salary&#x3D;100000 where emp_no&#x3D;10001;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; insert into salary_view values(10001, 100001);</span><br><span class="line">ERROR 1423 (HY000): Field of view &#39;employees.salary_view&#39; underlying table doesn&#39;t have a default value</span><br></pre></td></tr></table></figure>

<p>如果该表有 一个默认值，即使它不符合视图中的过滤器条件，你也可以向其中插入一行 。 为了避免这种情况，为了只允许插入符合视图条件的行，必须在定义里面提供 WITH CHECK OPTION。</p>
<p>VIEW算法:</p>
<ul>
<li>MERGE: MySQL 将输入查询和视图定义合并到一个查询中，然后执行组合查询。 仅允许在简单视图上使用 MERGE 算法 。</li>
<li>TEMPTABLE: MySQL将结果存储到临时表中，然后对这个临时表执行输入查询。</li>
<li>UNDEFINED: MySQL 自动选择MERGE 或 TEMPTABLE 算法。MySQL 把MERGE 算法作为首选的 TEMPTABLE 算法， 因为 MERGE 算法效率更高。</li>
</ul>
<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>就像 Linux 服务器上的 cron 一样， MySQL 的 EVENTS 是用来处理计划任务的 。MySQL 使用称为事件调度线程的特妹线程来执行所有预定事件。 默认情况下， 事件调度线程是未 启用(版本低于 8.0.3 )的状态，如果要启用它，执行以下命令 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; set global event_scheduler &#x3D; ON;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure>

<h4 id="如何操作-3"><a href="#如何操作-3" class="headerlink" title="如何操作"></a>如何操作</h4><p>假设你不再需要保留一个月之前的薪水审计记录， 则可以设定一个每日运行的事件，用它从 salary audit 表中删除一个月之前的记录。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">drop EVENT if exists purge_salary_audit;</span><br><span class="line">delimiter $$</span><br><span class="line">create EVENT if not exists purge_salary_audit</span><br><span class="line">on SCHEDULE</span><br><span class="line">	every 1 week</span><br><span class="line">	starts current_date</span><br><span class="line">	DO BEGIN</span><br><span class="line">		delete from salary_audit where date_modified &lt; date_add(curdate(), interval - 7 day);</span><br><span class="line">	END;$$</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure>

<p>检查事件:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show EVENTS\G</span><br></pre></td></tr></table></figure>

<p>检查事件定义：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show create EVENT purge_salary_audit\G</span><br></pre></td></tr></table></figure>

<p>禁用/启用事件:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER EVENT purge_salary_audit DISABLE;</span><br><span class="line">ALTER EVENT purge_salary_audit ENABLE;</span><br></pre></td></tr></table></figure>

<h3 id="获取有关数据库和表的信息"><a href="#获取有关数据库和表的信息" class="headerlink" title="获取有关数据库和表的信息"></a>获取有关数据库和表的信息</h3><h4 id="TABLES"><a href="#TABLES" class="headerlink" title="TABLES"></a>TABLES</h4><p>例如，假设你想知道 employees 数据库中的 DATA LENGTH 、 INDEX LENGTH 和DATE FREE，代码如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select </span><br><span class="line">	sum(data_length)&#x2F;1024&#x2F;1024 as data_size_mb, </span><br><span class="line">	sum(index_length)&#x2F;1024&#x2F;2014 as index_size_mb, </span><br><span class="line">	sum(data_free)&#x2F;1024&#x2F;1-24 as data_free_mb </span><br><span class="line">from </span><br><span class="line">	information_schema.tables </span><br><span class="line">where </span><br><span class="line">	table_schema&#x3D;&#39;employees&#39;;</span><br><span class="line">+--------------+---------------+----------------+</span><br><span class="line">| data_size_mb | index_size_mb | data_free_mb   |</span><br><span class="line">+--------------+---------------+----------------+</span><br><span class="line">| 142.85937500 |    2.82025819 | 20456.00000000 |</span><br><span class="line">+--------------+---------------+----------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h4 id="COLUMNS"><a href="#COLUMNS" class="headerlink" title="COLUMNS"></a>COLUMNS</h4><p>列出每个表的所有列及其定义:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from columns where table_name&#x3D;&#39;employees&#39;\G</span><br></pre></td></tr></table></figure>

<h4 id="FILES"><a href="#FILES" class="headerlink" title="FILES"></a>FILES</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from files where file_name like &#39;.&#x2F;employees&#x2F;employees.ibd&#39;\G</span><br></pre></td></tr></table></figure>

<h4 id="INNODB-TABLESPACES"><a href="#INNODB-TABLESPACES" class="headerlink" title="INNODB_TABLESPACES"></a>INNODB_TABLESPACES</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from innodb_tablespaces where name&#x3D;&#39;employees&#x2F;employees&#39;\G</span><br></pre></td></tr></table></figure>

<h4 id="INNODB-TABLESTATS"><a href="#INNODB-TABLESTATS" class="headerlink" title="INNODB_TABLESTATS"></a>INNODB_TABLESTATS</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from innodb_tablestats where name&#x3D;&#39;employees&#x2F;employees&#39;\G</span><br></pre></td></tr></table></figure>

<h4 id="PROCESSLIST"><a href="#PROCESSLIST" class="headerlink" title="PROCESSLIST"></a>PROCESSLIST</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from processlist\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">     ID: 4</span><br><span class="line">   USER: event_scheduler</span><br><span class="line">   HOST: localhost</span><br><span class="line">     DB: NULL</span><br><span class="line">COMMAND: Daemon</span><br><span class="line">   TIME: 3290</span><br><span class="line">  STATE: Waiting for next activation</span><br><span class="line">   INFO: NULL</span><br><span class="line">*************************** 2. row ***************************</span><br><span class="line">     ID: 21</span><br><span class="line">   USER: root</span><br><span class="line">   HOST: localhost</span><br><span class="line">     DB: information_schema</span><br><span class="line">COMMAND: Query</span><br><span class="line">   TIME: 0</span><br><span class="line">  STATE: executing</span><br><span class="line">   INFO: select * from processlist</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; show processlist;</span><br><span class="line">+----+-----------------+-----------+--------------------+---------+------+-----------------------------+------------------+</span><br><span class="line">| Id | User            | Host      | db                 | Command | Time | State                       | Info             |</span><br><span class="line">+----+-----------------+-----------+--------------------+---------+------+-----------------------------+------------------+</span><br><span class="line">|  4 | event_scheduler | localhost | NULL               | Daemon  | 3337 | Waiting for next activation | NULL             |</span><br><span class="line">| 21 | root            | localhost | information_schema | Query   |    0 | starting                    | show processlist |</span><br><span class="line">+----+-----------------+-----------+--------------------+---------+------+-----------------------------+------------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>





<h2 id="进阶使用"><a href="#进阶使用" class="headerlink" title="进阶使用"></a>进阶使用</h2><h4 id="使用JSON"><a href="#使用JSON" class="headerlink" title="使用JSON"></a>使用JSON</h4><p>使用JSON保存更多的员工信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create table emp_details(</span><br><span class="line">	emp_no int primary key,</span><br><span class="line">	details json</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h5 id="插入JSON"><a href="#插入JSON" class="headerlink" title="插入JSON"></a>插入JSON</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert into emp_details(emp_no, details)</span><br><span class="line">values (1,</span><br><span class="line">	&#39;&#123;</span><br><span class="line">		&quot;location&quot;: &quot;IN&quot;,</span><br><span class="line">		&quot;phone&quot;: &quot;+86111111111&quot;,</span><br><span class="line">		&quot;email&quot;: &quot;kiding@kid.com&quot;,</span><br><span class="line">		&quot;address&quot;: &#123;</span><br><span class="line">			&quot;line1&quot;: &quot;abc&quot;,</span><br><span class="line">			&quot;line2&quot;: &quot;xyz street&quot;,</span><br><span class="line">			&quot;city&quot;: &quot;Bangalore&quot;,</span><br><span class="line">			&quot;pin&quot;: &quot;560103&quot;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;&#39;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<h5 id="检索JSON"><a href="#检索JSON" class="headerlink" title="检索JSON"></a>检索JSON</h5><p>使用 -&gt; 和 -&gt;&gt; 运算符检索JSON列的字段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select emp_no, details-&gt;&#39;$.address.pin&#39; pin from emp_details;</span><br><span class="line">+--------+----------+</span><br><span class="line">| emp_no | pin      |</span><br><span class="line">+--------+----------+</span><br><span class="line">|      1 | &quot;560103&quot; |</span><br><span class="line">+--------+----------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select emp_no, details-&gt;&gt;&#39;$.address.pin&#39; pin from emp_details;</span><br><span class="line">+--------+--------+</span><br><span class="line">| emp_no | pin    |</span><br><span class="line">+--------+--------+</span><br><span class="line">|      1 | 560103 |</span><br><span class="line">+--------+--------+</span><br><span class="line">1 row in set (0.03 sec)</span><br></pre></td></tr></table></figure>

<h4 id="JSON函数"><a href="#JSON函数" class="headerlink" title="JSON函数"></a>JSON函数</h4><h5 id="优雅预览"><a href="#优雅预览" class="headerlink" title="优雅预览"></a>优雅预览</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select emp_no, JSON_PRETTY(details) from emp_details\G</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">              emp_no: 1</span><br><span class="line">JSON_PRETTY(details): &#123;</span><br><span class="line">  &quot;email&quot;: &quot;kiding@kid.com&quot;,</span><br><span class="line">  &quot;phone&quot;: &quot;+86111111111&quot;,</span><br><span class="line">  &quot;address&quot;: &#123;</span><br><span class="line">    &quot;pin&quot;: &quot;560103&quot;,</span><br><span class="line">    &quot;city&quot;: &quot;Bangalore&quot;,</span><br><span class="line">    &quot;line1&quot;: &quot;abc&quot;,</span><br><span class="line">    &quot;line2&quot;: &quot;xyz street&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;location&quot;: &quot;IN&quot;</span><br><span class="line">&#125;</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h5 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h5><p>可以在 WHERE 子句中使用 col-&gt;&gt;path 运算符来引用 JSON 的某一列 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select emp_no from emp_details where details-&gt;&gt;&#39;$.address.pin&#39; &#x3D; &quot;560103&quot;;</span><br></pre></td></tr></table></figure>

<p>也可以使用 <strong><em>JSON_CONTAINS</em></strong> 函数查询数据。如果找到了数据，则返回 1，否则返回 0:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select JSON_CONTAINS(details-&gt;&gt;&#39;$.adress.pin&#39;, &#39;560103&#39;) from emp_details;</span><br></pre></td></tr></table></figure>

<p>如何查询一个 key? 假设要检查 address.line1 是否存在:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select JSON_CONTAINS(details-&gt;&gt;&#39;$.adress.pin&#39;, &#39;560103&#39;) from emp_details;</span><br><span class="line">+---------------------------------------------------+</span><br><span class="line">| JSON_CONTAINS(details-&gt;&gt;&#39;$.adress.pin&#39;, &#39;560103&#39;) |</span><br><span class="line">+---------------------------------------------------+</span><br><span class="line">|                                              NULL |</span><br><span class="line">+---------------------------------------------------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure>

<p>这里，one表示至少应该存在一个键。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select JSON_CONTAINS_PATH(details, &#39;one&#39;, &quot;$.address.line1&quot;) from emp_details;</span><br><span class="line">+-------------------------------------------------------+</span><br><span class="line">| JSON_CONTAINS_PATH(details, &#39;one&#39;, &quot;$.address.line1&quot;) |</span><br><span class="line">+-------------------------------------------------------+</span><br><span class="line">|                                                     1 |</span><br><span class="line">+-------------------------------------------------------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure>

<p>如果要检查 address.line1 和 address. Line5 是否同时存在，可以使用 all，而不是 one:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt; select JSON_CONTAINS_PATH(details, &#39;all&#39;, &#39;$.address.line1&#39;, &#39;$.address.line5&#39;) from emp_details;</span><br><span class="line">+--------------------------------------------------------------------------+</span><br><span class="line">| JSON_CONTAINS_PATH(details, &#39;all&#39;, &#39;$.address.line1&#39;, &#39;$.address.line5&#39;) |</span><br><span class="line">+--------------------------------------------------------------------------+</span><br><span class="line">|                                                                        0 |</span><br><span class="line">+--------------------------------------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<h5 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h5><ul>
<li><p>JSON_SET(): 天环现有值并添加不存在的值。</p>
<p>假设要替换员工的pin码，并添加昵称的详细信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update </span><br><span class="line">	emp_details</span><br><span class="line">set</span><br><span class="line">	details &#x3D; JSON_SET(details, &quot;$.address.pin&quot;, &quot;560100&quot;, &quot;$.nickname&quot;, &quot;kai&quot;)</span><br><span class="line">where</span><br><span class="line">	emp_no &#x3D; 1;</span><br></pre></td></tr></table></figure>
</li>
<li><p>JSON_INSERT(): 插入值，但不替换现有值。</p>
<p>假设你希望添加新列而不更新现有值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update</span><br><span class="line">	emp_details</span><br><span class="line">set </span><br><span class="line">	details&#x3D;JSON_INSERT(details, &quot;$.address.pin&quot;, &quot;560132&quot;, &quot;$.address.line4&quot;, &quot;A Wing&quot;)</span><br><span class="line">where</span><br><span class="line">	emp_no&#x3D;1;</span><br></pre></td></tr></table></figure>
</li>
<li><p>JSON_REPLACE(): 仅替换现有值。</p>
<p>假设只需要替换现有字段，不需要添加新字段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update </span><br><span class="line">	emp_details</span><br><span class="line">set </span><br><span class="line">	details&#x3D;JSON_REPLACE(details, &quot;$.address.pin&quot;, &quot;560132&quot;, &quot;$.adress.line5&quot;, &quot;Landmark&quot;)</span><br><span class="line">where</span><br><span class="line">	emp_no&#x3D;1;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><p>JSON_REMOVE 能从 JSON文档中删除数据。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">update </span><br><span class="line">	emp_details</span><br><span class="line">set</span><br><span class="line">	details&#x3D;JSON_REMOVE(details, &quot;$.address.line5&quot;)</span><br><span class="line">where</span><br><span class="line">	emp_no&#x3D;1;</span><br></pre></td></tr></table></figure>

<h5 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h5><ul>
<li><p>JSON_KEYS(): 获取JSON文档中的所有键。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select </span><br><span class="line">	JSON_KEYS(details) </span><br><span class="line">from </span><br><span class="line">	emp_details</span><br><span class="line">where</span><br><span class="line">	emp_no&#x3D;1;</span><br></pre></td></tr></table></figure>
</li>
<li><p>JSON_LENGTH(): 给出 JSON文档中的元素数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select </span><br><span class="line">	JSON_LENGTH(details) </span><br><span class="line">from </span><br><span class="line">	emp_details </span><br><span class="line">where</span><br><span class="line">	emp_no&#x3D;1;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="公用表表达式-CTE"><a href="#公用表表达式-CTE" class="headerlink" title="公用表表达式(CTE)"></a>公用表表达式(CTE)</h3><p>MySQL8 支持公用表表达式 ，包括非递归和递归两种 。<br>公用表表达式允许使用命名的临时结果集， 这是通过允许在 SELECT 语句和某些其他语句前面使用 WITH 子句来实现的。</p>
<h4 id="非递归（CTE）"><a href="#非递归（CTE）" class="headerlink" title="非递归（CTE）"></a>非递归（CTE）</h4><p><strong>公用表表达式（CTE）</strong>与派生表类似，但它的声明会放在查询块之前，而不是FROM子句中。</p>
<h5 id="派生表"><a href="#派生表" class="headerlink" title="派生表"></a>派生表</h5><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="ACID属性"><a href="#ACID属性" class="headerlink" title="ACID属性"></a>ACID属性</h3><h4 id="原子性（Atomicity）"><a href="#原子性（Atomicity）" class="headerlink" title="原子性（Atomicity）"></a>原子性（Atomicity）</h4><p>所有的SQL语句要么全部成功，要么全部失败，不会存在部分更新。</p>
<h4 id="一致性（Coonsistency）"><a href="#一致性（Coonsistency）" class="headerlink" title="一致性（Coonsistency）"></a>一致性（Coonsistency）</h4><p>事务只能以允许的方式改变受其影响的数据 。</p>
<h4 id="隔离性（Isolation）"><a href="#隔离性（Isolation）" class="headerlink" title="隔离性（Isolation）"></a>隔离性（Isolation）</h4><p>同时发生的事务(并发事务)不应该导致数据库处于不一致的状态中。系统中每个事务都应该像唯一事务一样执行。 任何事务都不应影响其他事务的存在。</p>
<h4 id="持久性（Durability）"><a href="#持久性（Durability）" class="headerlink" title="持久性（Durability）"></a>持久性（Durability）</h4><p>无论数据库或系统是否发生故障，数据都会永久保存在磁盘上，并且不会丢失。</p>
<h3 id="执行事务"><a href="#执行事务" class="headerlink" title="执行事务"></a>执行事务</h3><p>创建操作表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create database bank;</span><br><span class="line">use bank;</span><br><span class="line"></span><br><span class="line">create table account(</span><br><span class="line">	account_number varchar(10) primary key,</span><br><span class="line">	balance int</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">insert into account values(&#39;A&#39;, 600), (&#39;B&#39;, 400);</span><br></pre></td></tr></table></figure>

<p>启动事务 <code>start TRANSACTION</code> 或者 <code>BEGIN</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BEGIN</span><br><span class="line"></span><br><span class="line">select </span><br><span class="line">	balance INTO @a.bal </span><br><span class="line">from </span><br><span class="line">	account </span><br><span class="line">where </span><br><span class="line">	account_number&#x3D;&#39;A&#39;;</span><br><span class="line"></span><br><span class="line">update</span><br><span class="line">	account</span><br><span class="line">set</span><br><span class="line">	balance&#x3D;@a.bal-100 </span><br><span class="line">where</span><br><span class="line">	account_number&#x3D;&#39;A&#39;;</span><br><span class="line"></span><br><span class="line">select</span><br><span class="line">	balance INTO @b.bal</span><br><span class="line">from </span><br><span class="line">	account</span><br><span class="line">where</span><br><span class="line">	account_number&#x3D;&#39;B&#39;;</span><br><span class="line"></span><br><span class="line">update</span><br><span class="line">	account</span><br><span class="line">set</span><br><span class="line">	balance&#x3D;@b.bal+100</span><br><span class="line">where</span><br><span class="line">	account_number&#x3D;&#39;B&#39;;</span><br><span class="line"></span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure>

<p>如果遇到错误并希望中止事务， 可以发送 <strong>ROLLBACK</strong> 语句而非 <strong>COMMIT</strong> 语句 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">start TRANSACTION</span><br><span class="line">select balance into @a.bal from account where account_number&#x3D;&#39;A&#39;;</span><br><span class="line">update account set balance&#x3D;@a.bal-100 where account_number&#x3D;&#39;A&#39;;</span><br><span class="line">select balance into @c.bal from account where account_number&#x3D;&#39;C&#39;;</span><br><span class="line">show warnings;</span><br><span class="line">select @c.bal;</span><br><span class="line">rollback;</span><br></pre></td></tr></table></figure>

<p><strong>autocommit</strong></p>
<p>默认情况下，autocommit 的状态是ON，这意味着所有单独的语句一旦被执行就会 被提交，除非该语句在 BEGIN… COMMIT 块中 。 如果 autocommit 的状态为 OFF， 则需要明确发出 COMMIT 语句来提交事务 。 要禁用 autocommit ，请执行 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set autocommit&#x3D;0;</span><br></pre></td></tr></table></figure>

<p>DDL 语句，如数据库的 CREATE 或 DROP 语句，以及表或存储例程的 CREATE、DROP或 ALTER 语句，都是无法回滚的 。</p>
<h3 id="使用保存点"><a href="#使用保存点" class="headerlink" title="使用保存点"></a>使用保存点</h3><p>使用保存点可以回滚到事务中的某些点，而且无须中止事务。你可以使用 SAVEPOINT 标识符为 事务设置名称，并使用 ROLLBACK TO 标识语句将事务回滚到指定的保存点而不中止事务。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BEGIN;</span><br><span class="line">select balance INTO @a.bal from account where account_number&#x3D;&#39;A&#39;;</span><br><span class="line">update account set balance&#x3D;@a.bal-100 where account_number&#x3D;&#39;A&#39;;</span><br><span class="line">update account set balance&#x3D;balance+100 where account_number&#x3D;&#39;B&#39;;</span><br><span class="line">SAVEPOINT transfer_to_b;</span><br><span class="line">select balance INTO @a.bal from account where account_number&#x3D;&#39;A&#39;;</span><br><span class="line">update account set balance&#x3D;balance+100 where account_number&#x3D;&#39;C&#39;;</span><br><span class="line">ROLLBACK TO transfer_to_b;</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure>

<h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><p>当两个或多个事务同时发生时，隔离级别定义了一个事务与其他事务在资源或者数据修改方面的隔离程度 。有 4 种类型的隔离级别，要更改隔离级别，需要设置 tx_isolatio口变量，该变量是动态的并具有会话级别的作用范围。</p>
<p>更改隔离级别 ```SET @@ transaction_islocation=’READ-COMMITTED’;``</p>
<h4 id="读取未提交（read-uncommitted）"><a href="#读取未提交（read-uncommitted）" class="headerlink" title="读取未提交（read uncommitted）"></a>读取未提交（read uncommitted）</h4>]]></content>
      <categories>
        <category>技术</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>JS逆向学习-*博登陆加密参数</title>
    <url>/2020/06/02/article-8/</url>
    <content><![CDATA[<p>aHR0cHM6Ly93d3cud2VpYm8uY29tL2xvZ2luLnBocA==</p>
<h3 id="分析请求"><a href="#分析请求" class="headerlink" title="分析请求"></a>分析请求</h3><p>打开网页进入 Chrome 调试模式下并输入错误的用户名和密码发现有两个login请求</p>
<p><img src="/2020/06/02/article-8/WX20200602-150346.png" alt></p>
<p><img src="/2020/06/02/article-8/WX20200602-150642.png" alt></p>
<p>先对这两个请求进行模拟，分别需要对 <strong><em>su</em></strong> 和 <strong><em>sp</em></strong> 参数进行逆向</p>
<p>全局搜索 <strong><em>”su=“</em></strong> 定位到了下图中标记的位置，且 <strong><em>sp</em></strong> 的加密方式也定位到了</p>
<p><img src="/2020/06/02/article-8/WX20200602-151611.png" alt></p>
<h3 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h3><p>通过上面的分析流程定位到了加密位置，且发现 <strong><em>su</em></strong> 其实是通过base64进行了编码</p>
<p>接下来我们通过断点查看 <strong><em>sp</em></strong> 的处理方式</p>
<p><img src="/2020/06/02/article-8/WX20200602-152501.png" alt></p>
<p>这里可以看到加密需要的参数为 <strong><em>rsaPubkey</em></strong>、 <strong><em>servertime</em></strong>、 <strong><em>nonce</em></strong> 和 <strong><em>密码</em></strong>，接下来我们再看下面的截图</p>
<p><img src="/2020/06/02/article-8/WX20200602-152949.png" alt></p>
<p>到这里已经找到加密需要的全部参数了，最后就是扣代码</p>
<p>将 <strong><em>sp</em></strong> 加密的代码复制到webstorm中并运行报错“sinaSSOEncoder is not defined”</p>
<p>找到sinaSSOEncoder的定义部分</p>
<p><img src="/2020/06/02/article-8/WX20200602-155623.png" alt></p>
<p><img src="/2020/06/02/article-8/WX20200602-155709.png" alt></p>
<p>1048 ～ 1981行都是sinaSSOEncoder的定义代码</p>
<p>然后再运行</p>
<p><img src="/2020/06/02/article-8/WX20200602-155858@2x.png" alt></p>
<p>搞定</p>
<p>最后要注意的是后续的登陆流程是根据 <strong><em>sp</em></strong> 参数所属请求响应的 <strong><em>retcode</em></strong> 判断的，如下图：</p>
<p><img src="/2020/06/02/article-8/WX20200602-160244.png" alt></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>其实参数加密没什么难度，完善后续登陆操作需要对验证码识别做优化</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>JS逆向</category>
      </categories>
      <tags>
        <tag>JS逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>JS逆向学习-某某快药登陆参数</title>
    <url>/2020/06/03/article-9/</url>
    <content><![CDATA[<p>aHR0cDovL3d3dy5kZGt5LmNvbS9wZXJDZW50ZXIuaHRtbD9kZGt5Y2FjaGU9OTJkODJmYmI2MjkxNWQ1MzU3OWQ1YTg3YzY1MTVjOTM</p>
<h3 id="分析请求"><a href="#分析请求" class="headerlink" title="分析请求"></a>分析请求</h3><p>先来看登陆操作，输入错误的用户名密码，查看请求</p>
<p><img src="/2020/06/03/article-9/WX20200603-155433.png" alt></p>
<p>发现登陆需要两个加密参数 <strong><em>sign</em></strong> 和 <strong><em>password</em></strong> ，经验丰富的已经发现是md5加密的了，因为有一个md5.js文件</p>
<p>继续查看该请求的initiator，有一个名为 <strong><em>“denglu”</em></strong> 的记录，定位该位置并查看</p>
<p><img src="/2020/06/03/article-9/WX20200603-160112.png" alt></p>
<p><img src="/2020/06/03/article-9/WX20200603-160158.png" alt></p>
<p>然后进行断点调试</p>
<p><img src="/2020/06/03/article-9/WX20200603-160809.png" alt></p>
<p>确定这里就是我们要找的东西，其中 <strong><em>passwod</em></strong> 通过 <strong><em>MD5</em></strong> 进行加密，<strong><em>getRequestURL</em></strong> 构建了登陆url，参数为固定字符串 <strong><em>“$$.urls.url_user”</em></strong> 和一个 <strong><em>s</em></strong> 对象</p>
<h3 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h3><p>和平常一样缺什么补什么，就不细讲了</p>
<h4 id="js代码"><a href="#js代码" class="headerlink" title="js代码"></a>js代码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> MD5 = <span class="function"><span class="keyword">function</span>(<span class="params">r</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params">r, n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> r &lt;&lt; n | r &gt;&gt;&gt; <span class="number">32</span> - n</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params">r, n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> t, o, e, u, f;</span><br><span class="line">        <span class="keyword">return</span> e = <span class="number">2147483648</span> &amp; r,</span><br><span class="line">            u = <span class="number">2147483648</span> &amp; n,</span><br><span class="line">            t = <span class="number">1073741824</span> &amp; r,</span><br><span class="line">            o = <span class="number">1073741824</span> &amp; n,</span><br><span class="line">            f = (<span class="number">1073741823</span> &amp; r) + (<span class="number">1073741823</span> &amp; n),</span><br><span class="line">            t &amp; o ? <span class="number">2147483648</span> ^ f ^ e ^ u : t | o ? <span class="number">1073741824</span> &amp; f ? <span class="number">3221225472</span> ^ f ^ e ^ u : <span class="number">1073741824</span> ^ f ^ e ^ u : f ^ e ^ u</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params">r, n, t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> r &amp; n | ~r &amp; t</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params">r, n, t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> r &amp; t | n &amp; ~t</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">u</span>(<span class="params">r, n, t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> r ^ n ^ t</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">r, n, t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n ^ (r | ~t)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">r, e, u, f, i, a, c</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> r = t(r, t(t(o(e, u, f), i), c)),</span><br><span class="line">            t(n(r, a), e)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">r, o, u, f, i, a, c</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> r = t(r, t(t(e(o, u, f), i), c)),</span><br><span class="line">            t(n(r, a), o)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">r, o, e, f, i, a, c</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> r = t(r, t(t(u(o, e, f), i), c)),</span><br><span class="line">            t(n(r, a), o)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">C</span>(<span class="params">r, o, e, u, i, a, c</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> r = t(r, t(t(f(o, e, u), i), c)),</span><br><span class="line">            t(n(r, a), o)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params">r</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> n, t, o = <span class="string">""</span>, e = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> (t = <span class="number">0</span>; t &lt;= <span class="number">3</span>; t++)</span><br><span class="line">            n = r &gt;&gt;&gt; <span class="number">8</span> * t &amp; <span class="number">255</span>,</span><br><span class="line">                e = <span class="string">"0"</span> + n.toString(<span class="number">16</span>),</span><br><span class="line">                o += e.substr(e.length - <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> o</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> h, d, v, S, m, l, A, p, s, y = <span class="built_in">Array</span>();</span><br><span class="line">    <span class="keyword">for</span> (r = <span class="function"><span class="keyword">function</span>(<span class="params">r</span>) </span>&#123;</span><br><span class="line">        r = r.replace(<span class="regexp">/\r\n/g</span>, <span class="string">"\n"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> n = <span class="string">""</span>, t = <span class="number">0</span>; t &lt; r.length; t++) &#123;</span><br><span class="line">            <span class="keyword">var</span> o = r.charCodeAt(t);</span><br><span class="line">            o &lt; <span class="number">128</span> ? n += <span class="built_in">String</span>.fromCharCode(o) : o &gt; <span class="number">127</span> &amp;&amp; o &lt; <span class="number">2048</span> ? (n += <span class="built_in">String</span>.fromCharCode(o &gt;&gt; <span class="number">6</span> | <span class="number">192</span>),</span><br><span class="line">                n += <span class="built_in">String</span>.fromCharCode(<span class="number">63</span> &amp; o | <span class="number">128</span>)) : (n += <span class="built_in">String</span>.fromCharCode(o &gt;&gt; <span class="number">12</span> | <span class="number">224</span>),</span><br><span class="line">                n += <span class="built_in">String</span>.fromCharCode(o &gt;&gt; <span class="number">6</span> &amp; <span class="number">63</span> | <span class="number">128</span>),</span><br><span class="line">                n += <span class="built_in">String</span>.fromCharCode(<span class="number">63</span> &amp; o | <span class="number">128</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n</span><br><span class="line">    &#125;(r),</span><br><span class="line">             y = <span class="function"><span class="keyword">function</span>(<span class="params">r</span>) </span>&#123;</span><br><span class="line">                 <span class="keyword">for</span> (<span class="keyword">var</span> n, t = r.length, o = t + <span class="number">8</span>, e = (o - o % <span class="number">64</span>) / <span class="number">64</span>, u = <span class="number">16</span> * (e + <span class="number">1</span>), f = <span class="built_in">Array</span>(u - <span class="number">1</span>), i = <span class="number">0</span>, a = <span class="number">0</span>; a &lt; t; )</span><br><span class="line">                     n = (a - a % <span class="number">4</span>) / <span class="number">4</span>,</span><br><span class="line">                         i = a % <span class="number">4</span> * <span class="number">8</span>,</span><br><span class="line">                         f[n] = f[n] | r.charCodeAt(a) &lt;&lt; i,</span><br><span class="line">                         a++;</span><br><span class="line">                 <span class="keyword">return</span> n = (a - a % <span class="number">4</span>) / <span class="number">4</span>,</span><br><span class="line">                     i = a % <span class="number">4</span> * <span class="number">8</span>,</span><br><span class="line">                     f[n] = f[n] | <span class="number">128</span> &lt;&lt; i,</span><br><span class="line">                     f[u - <span class="number">2</span>] = t &lt;&lt; <span class="number">3</span>,</span><br><span class="line">                     f[u - <span class="number">1</span>] = t &gt;&gt;&gt; <span class="number">29</span>,</span><br><span class="line">                     f</span><br><span class="line">             &#125;(r),</span><br><span class="line">             l = <span class="number">1732584193</span>,</span><br><span class="line">             A = <span class="number">4023233417</span>,</span><br><span class="line">             p = <span class="number">2562383102</span>,</span><br><span class="line">             s = <span class="number">271733878</span>,</span><br><span class="line">             h = <span class="number">0</span>; h &lt; y.length; h += <span class="number">16</span>)</span><br><span class="line">        d = l,</span><br><span class="line">            v = A,</span><br><span class="line">            S = p,</span><br><span class="line">            m = s,</span><br><span class="line">            l = i(l, A, p, s, y[h + <span class="number">0</span>], <span class="number">7</span>, <span class="number">3614090360</span>),</span><br><span class="line">            s = i(s, l, A, p, y[h + <span class="number">1</span>], <span class="number">12</span>, <span class="number">3905402710</span>),</span><br><span class="line">            p = i(p, s, l, A, y[h + <span class="number">2</span>], <span class="number">17</span>, <span class="number">606105819</span>),</span><br><span class="line">            A = i(A, p, s, l, y[h + <span class="number">3</span>], <span class="number">22</span>, <span class="number">3250441966</span>),</span><br><span class="line">            l = i(l, A, p, s, y[h + <span class="number">4</span>], <span class="number">7</span>, <span class="number">4118548399</span>),</span><br><span class="line">            s = i(s, l, A, p, y[h + <span class="number">5</span>], <span class="number">12</span>, <span class="number">1200080426</span>),</span><br><span class="line">            p = i(p, s, l, A, y[h + <span class="number">6</span>], <span class="number">17</span>, <span class="number">2821735955</span>),</span><br><span class="line">            A = i(A, p, s, l, y[h + <span class="number">7</span>], <span class="number">22</span>, <span class="number">4249261313</span>),</span><br><span class="line">            l = i(l, A, p, s, y[h + <span class="number">8</span>], <span class="number">7</span>, <span class="number">1770035416</span>),</span><br><span class="line">            s = i(s, l, A, p, y[h + <span class="number">9</span>], <span class="number">12</span>, <span class="number">2336552879</span>),</span><br><span class="line">            p = i(p, s, l, A, y[h + <span class="number">10</span>], <span class="number">17</span>, <span class="number">4294925233</span>),</span><br><span class="line">            A = i(A, p, s, l, y[h + <span class="number">11</span>], <span class="number">22</span>, <span class="number">2304563134</span>),</span><br><span class="line">            l = i(l, A, p, s, y[h + <span class="number">12</span>], <span class="number">7</span>, <span class="number">1804603682</span>),</span><br><span class="line">            s = i(s, l, A, p, y[h + <span class="number">13</span>], <span class="number">12</span>, <span class="number">4254626195</span>),</span><br><span class="line">            p = i(p, s, l, A, y[h + <span class="number">14</span>], <span class="number">17</span>, <span class="number">2792965006</span>),</span><br><span class="line">            A = i(A, p, s, l, y[h + <span class="number">15</span>], <span class="number">22</span>, <span class="number">1236535329</span>),</span><br><span class="line">            l = a(l, A, p, s, y[h + <span class="number">1</span>], <span class="number">5</span>, <span class="number">4129170786</span>),</span><br><span class="line">            s = a(s, l, A, p, y[h + <span class="number">6</span>], <span class="number">9</span>, <span class="number">3225465664</span>),</span><br><span class="line">            p = a(p, s, l, A, y[h + <span class="number">11</span>], <span class="number">14</span>, <span class="number">643717713</span>),</span><br><span class="line">            A = a(A, p, s, l, y[h + <span class="number">0</span>], <span class="number">20</span>, <span class="number">3921069994</span>),</span><br><span class="line">            l = a(l, A, p, s, y[h + <span class="number">5</span>], <span class="number">5</span>, <span class="number">3593408605</span>),</span><br><span class="line">            s = a(s, l, A, p, y[h + <span class="number">10</span>], <span class="number">9</span>, <span class="number">38016083</span>),</span><br><span class="line">            p = a(p, s, l, A, y[h + <span class="number">15</span>], <span class="number">14</span>, <span class="number">3634488961</span>),</span><br><span class="line">            A = a(A, p, s, l, y[h + <span class="number">4</span>], <span class="number">20</span>, <span class="number">3889429448</span>),</span><br><span class="line">            l = a(l, A, p, s, y[h + <span class="number">9</span>], <span class="number">5</span>, <span class="number">568446438</span>),</span><br><span class="line">            s = a(s, l, A, p, y[h + <span class="number">14</span>], <span class="number">9</span>, <span class="number">3275163606</span>),</span><br><span class="line">            p = a(p, s, l, A, y[h + <span class="number">3</span>], <span class="number">14</span>, <span class="number">4107603335</span>),</span><br><span class="line">            A = a(A, p, s, l, y[h + <span class="number">8</span>], <span class="number">20</span>, <span class="number">1163531501</span>),</span><br><span class="line">            l = a(l, A, p, s, y[h + <span class="number">13</span>], <span class="number">5</span>, <span class="number">2850285829</span>),</span><br><span class="line">            s = a(s, l, A, p, y[h + <span class="number">2</span>], <span class="number">9</span>, <span class="number">4243563512</span>),</span><br><span class="line">            p = a(p, s, l, A, y[h + <span class="number">7</span>], <span class="number">14</span>, <span class="number">1735328473</span>),</span><br><span class="line">            A = a(A, p, s, l, y[h + <span class="number">12</span>], <span class="number">20</span>, <span class="number">2368359562</span>),</span><br><span class="line">            l = c(l, A, p, s, y[h + <span class="number">5</span>], <span class="number">4</span>, <span class="number">4294588738</span>),</span><br><span class="line">            s = c(s, l, A, p, y[h + <span class="number">8</span>], <span class="number">11</span>, <span class="number">2272392833</span>),</span><br><span class="line">            p = c(p, s, l, A, y[h + <span class="number">11</span>], <span class="number">16</span>, <span class="number">1839030562</span>),</span><br><span class="line">            A = c(A, p, s, l, y[h + <span class="number">14</span>], <span class="number">23</span>, <span class="number">4259657740</span>),</span><br><span class="line">            l = c(l, A, p, s, y[h + <span class="number">1</span>], <span class="number">4</span>, <span class="number">2763975236</span>),</span><br><span class="line">            s = c(s, l, A, p, y[h + <span class="number">4</span>], <span class="number">11</span>, <span class="number">1272893353</span>),</span><br><span class="line">            p = c(p, s, l, A, y[h + <span class="number">7</span>], <span class="number">16</span>, <span class="number">4139469664</span>),</span><br><span class="line">            A = c(A, p, s, l, y[h + <span class="number">10</span>], <span class="number">23</span>, <span class="number">3200236656</span>),</span><br><span class="line">            l = c(l, A, p, s, y[h + <span class="number">13</span>], <span class="number">4</span>, <span class="number">681279174</span>),</span><br><span class="line">            s = c(s, l, A, p, y[h + <span class="number">0</span>], <span class="number">11</span>, <span class="number">3936430074</span>),</span><br><span class="line">            p = c(p, s, l, A, y[h + <span class="number">3</span>], <span class="number">16</span>, <span class="number">3572445317</span>),</span><br><span class="line">            A = c(A, p, s, l, y[h + <span class="number">6</span>], <span class="number">23</span>, <span class="number">76029189</span>),</span><br><span class="line">            l = c(l, A, p, s, y[h + <span class="number">9</span>], <span class="number">4</span>, <span class="number">3654602809</span>),</span><br><span class="line">            s = c(s, l, A, p, y[h + <span class="number">12</span>], <span class="number">11</span>, <span class="number">3873151461</span>),</span><br><span class="line">            p = c(p, s, l, A, y[h + <span class="number">15</span>], <span class="number">16</span>, <span class="number">530742520</span>),</span><br><span class="line">            A = c(A, p, s, l, y[h + <span class="number">2</span>], <span class="number">23</span>, <span class="number">3299628645</span>),</span><br><span class="line">            l = C(l, A, p, s, y[h + <span class="number">0</span>], <span class="number">6</span>, <span class="number">4096336452</span>),</span><br><span class="line">            s = C(s, l, A, p, y[h + <span class="number">7</span>], <span class="number">10</span>, <span class="number">1126891415</span>),</span><br><span class="line">            p = C(p, s, l, A, y[h + <span class="number">14</span>], <span class="number">15</span>, <span class="number">2878612391</span>),</span><br><span class="line">            A = C(A, p, s, l, y[h + <span class="number">5</span>], <span class="number">21</span>, <span class="number">4237533241</span>),</span><br><span class="line">            l = C(l, A, p, s, y[h + <span class="number">12</span>], <span class="number">6</span>, <span class="number">1700485571</span>),</span><br><span class="line">            s = C(s, l, A, p, y[h + <span class="number">3</span>], <span class="number">10</span>, <span class="number">2399980690</span>),</span><br><span class="line">            p = C(p, s, l, A, y[h + <span class="number">10</span>], <span class="number">15</span>, <span class="number">4293915773</span>),</span><br><span class="line">            A = C(A, p, s, l, y[h + <span class="number">1</span>], <span class="number">21</span>, <span class="number">2240044497</span>),</span><br><span class="line">            l = C(l, A, p, s, y[h + <span class="number">8</span>], <span class="number">6</span>, <span class="number">1873313359</span>),</span><br><span class="line">            s = C(s, l, A, p, y[h + <span class="number">15</span>], <span class="number">10</span>, <span class="number">4264355552</span>),</span><br><span class="line">            p = C(p, s, l, A, y[h + <span class="number">6</span>], <span class="number">15</span>, <span class="number">2734768916</span>),</span><br><span class="line">            A = C(A, p, s, l, y[h + <span class="number">13</span>], <span class="number">21</span>, <span class="number">1309151649</span>),</span><br><span class="line">            l = C(l, A, p, s, y[h + <span class="number">4</span>], <span class="number">6</span>, <span class="number">4149444226</span>),</span><br><span class="line">            s = C(s, l, A, p, y[h + <span class="number">11</span>], <span class="number">10</span>, <span class="number">3174756917</span>),</span><br><span class="line">            p = C(p, s, l, A, y[h + <span class="number">2</span>], <span class="number">15</span>, <span class="number">718787259</span>),</span><br><span class="line">            A = C(A, p, s, l, y[h + <span class="number">9</span>], <span class="number">21</span>, <span class="number">3951481745</span>),</span><br><span class="line">            l = t(l, d),</span><br><span class="line">            A = t(A, v),</span><br><span class="line">            p = t(p, S),</span><br><span class="line">            s = t(s, m);</span><br><span class="line">    <span class="keyword">return</span> (g(l) + g(A) + g(p) + g(s)).toUpperCase()</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> DMap = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.data = &#123;&#125;,</span><br><span class="line">        <span class="keyword">this</span>.len = <span class="number">0</span>,</span><br><span class="line">        <span class="keyword">this</span>.size = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.len</span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        <span class="keyword">this</span>.isEmpty = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.len &lt; <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        <span class="keyword">this</span>.clear = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.data = &#123;&#125;,</span><br><span class="line">                <span class="keyword">this</span>.len = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        <span class="keyword">this</span>.put = <span class="function"><span class="keyword">function</span>(<span class="params">e, t</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.data[e] = <span class="keyword">void</span> <span class="number">0</span> == t || <span class="string">"null"</span> == t || <span class="string">""</span> == t ? <span class="string">""</span> : t,</span><br><span class="line">                <span class="keyword">this</span>.len++</span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        <span class="keyword">this</span>.remove = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.data[e] = <span class="literal">null</span>,</span><br><span class="line">                <span class="keyword">this</span>.len--,</span><br><span class="line">                !<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        <span class="keyword">this</span>.get = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.data[e]</span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        <span class="keyword">this</span>.containsKey = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> !!<span class="keyword">this</span>.data[e]</span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        <span class="keyword">this</span>.containsValue = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> t <span class="keyword">in</span> <span class="keyword">this</span>.data)</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>.data[t] == e)</span><br><span class="line">                        <span class="keyword">return</span> !<span class="number">0</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">                <span class="keyword">return</span> !<span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> !<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        <span class="keyword">this</span>.values = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> e = <span class="keyword">new</span> <span class="built_in">Array</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> t <span class="keyword">in</span> <span class="keyword">this</span>.data)</span><br><span class="line">                e.push(<span class="keyword">this</span>.data[t]);</span><br><span class="line">            <span class="keyword">return</span> e</span><br><span class="line">        &#125;</span><br><span class="line">        ,</span><br><span class="line">        <span class="keyword">this</span>.keys = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> e = <span class="keyword">new</span> <span class="built_in">Array</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> t <span class="keyword">in</span> <span class="keyword">this</span>.data)</span><br><span class="line">                e.push(t);</span><br><span class="line">            <span class="keyword">return</span> e</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getRequestURL = <span class="function"><span class="keyword">function</span>(<span class="params">e, t, i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &amp;&amp; <span class="number">1</span> == i)</span><br><span class="line">        <span class="keyword">var</span> r = <span class="string">"V8E26BD7FN76D08C349A43D6D3M51A1B"</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">var</span> r = <span class="string">"6C57AB91A1308E26B797F4CD382AC79D"</span>;</span><br><span class="line">    _this = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Date</span></span><br><span class="line">        , n = s.getFullYear()</span><br><span class="line">        , o = s.getMonth() + <span class="number">1</span></span><br><span class="line">        , a = s.getDate()</span><br><span class="line">        , c = s.getHours()</span><br><span class="line">        , h = s.getMinutes()</span><br><span class="line">        , d = s.getSeconds()</span><br><span class="line">        , u = n + <span class="string">"-"</span> + o + <span class="string">"-"</span> + a + <span class="string">" "</span> + c + <span class="string">":"</span> + h + <span class="string">":"</span> + d;</span><br><span class="line">    t.put(<span class="string">"t"</span>, u),</span><br><span class="line">        t.put(<span class="string">"v"</span>, <span class="string">"1.0"</span>),</span><br><span class="line">    t.containsKey(<span class="string">"versionName"</span>) || t.put(<span class="string">"versionName"</span>, <span class="string">"4.6.0"</span>),</span><br><span class="line">        t.put(<span class="string">"plat"</span>, <span class="string">"H5"</span>),</span><br><span class="line">        t.put(<span class="string">"platform"</span>, <span class="string">"H5"</span>);</span><br><span class="line">    <span class="comment">//     !t.containsKey("userId") || t.containsKey("loginToken") || t.containsKey("uDate") ? t.containsKey("userId") || _this.getUserId() &amp;&amp; (t.put("loginToken", _this.getLoginToken()),</span></span><br><span class="line">    <span class="comment">//         t.put("uDate", _this.getUDate()),</span></span><br><span class="line">    <span class="comment">//         t.put("userId", _this.getUserId())) : (t.put("loginToken", _this.getLoginToken()),</span></span><br><span class="line">    <span class="comment">//         t.put("uDate", _this.getUDate()));</span></span><br><span class="line">    <span class="keyword">var</span> l = t.keys().sort()</span><br><span class="line">        , p = <span class="string">""</span>;</span><br><span class="line">    l.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> g <span class="keyword">in</span> l) &#123;</span><br><span class="line">        <span class="keyword">var</span> m = l[g];</span><br><span class="line">        p += m + t.get(m)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> f = t.get(<span class="string">"method"</span>) + p + r, y = MD5(f), v = e + <span class="string">"?sign="</span> + y, k = <span class="number">0</span>; k &lt; l.length; k++)</span><br><span class="line">        (t.get(l[k]) + <span class="string">""</span>).indexOf(<span class="string">"+"</span>) &gt;= <span class="number">0</span> || <span class="number">-1</span> != (t.get(l[k]) + <span class="string">""</span>).indexOf(<span class="string">"&amp;"</span>) ? v += <span class="string">"&amp;"</span> + l[k] + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(t.get(l[k])) : <span class="string">"pageUrl"</span> == l[k] ? v += <span class="string">"&amp;"</span> + l[k] + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(t.get(l[k])) : v += <span class="string">"&amp;"</span> + l[k] + <span class="string">"="</span> + t.get(l[k]);</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> codes = [<span class="string">"010101,010104"</span>, <span class="string">"010502,010503,010504,010505,010506,010507"</span>, <span class="string">"010401,010402,010403,010404,010406,010407"</span>, <span class="string">"010801,010802,010803,010804,010901,010902,010807"</span>, <span class="string">"011303,010609"</span>, <span class="string">"011501,011502,011503,011504,011505,010301,010302,0…,010706,010707,010709,010710,010711,011101,011106"</span>, <span class="string">"020101,020103,020105,020201,020202,020203"</span>, <span class="string">"020403,020404,020406,020409,020414"</span>, <span class="string">"030101,030102,030103,030107,030108,030109,030110,030111,030113"</span>, <span class="string">"030201,030202,030204"</span>, <span class="string">"040101,040501,040502,040404,040201,040204"</span>, <span class="string">"060901,061103,060603,060604,060607,060609,060610,0…,060804,060805,060402,060403,060201,060701,060702"</span>, <span class="string">"060104"</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">denglu</span>(<span class="params">username, password</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e = username</span><br><span class="line">    <span class="keyword">var</span> s = <span class="keyword">new</span> DMap;</span><br><span class="line">    <span class="keyword">var</span> url_user = <span class="string">"http://wxapi.ddky.com/user/rest.htm"</span></span><br><span class="line">    s.put(<span class="string">"userName"</span>, e),</span><br><span class="line">        s.put(<span class="string">"password"</span>, MD5(password).toLowerCase()),</span><br><span class="line">        s.put(<span class="string">"method"</span>, <span class="string">"ddsy.user.reg.login"</span>);</span><br><span class="line">    <span class="keyword">var</span> a = getRequestURL(url_user, s);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadProduct</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _url = <span class="number">1</span> ? <span class="string">'http://product.ddky.com/product/queryOrgcodeProductListForB2C.htm'</span> : <span class="string">'http://192.168.89.38/product/queryOrgcodeProductListForB2C.htm'</span>;</span><br><span class="line">    <span class="keyword">var</span> params = <span class="keyword">new</span> DMap();</span><br><span class="line">    params.put(<span class="string">'orgcode'</span>, codes[index]);</span><br><span class="line">    params.put(<span class="string">'orderTypeId'</span>, <span class="string">'0'</span>);</span><br><span class="line">    params.put(<span class="string">'shopId'</span>, <span class="string">"-1"</span>);</span><br><span class="line">    params.put(<span class="string">'pageNo'</span>, <span class="string">'1'</span>);</span><br><span class="line">    params.put(<span class="string">'pageSize'</span>, <span class="string">'100'</span>);</span><br><span class="line">    params.put(<span class="string">'otcMark'</span>, <span class="string">'1,2,99'</span>);</span><br><span class="line">    params.put(<span class="string">'method'</span>, <span class="string">'ddsy.product.query.orgcode.product.list.b2c'</span>);</span><br><span class="line">    params.put(<span class="string">'versionName'</span>, <span class="string">'3.2.0'</span>);</span><br><span class="line">    <span class="keyword">var</span> req = getRequestURL(_url, params);</span><br><span class="line">    <span class="keyword">return</span> req</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>真的没什么难度，只是需要注意不添加请求中的 <strong><em>callback</em></strong> 参数会直接返回可以使用JSON解析的数据格式。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>JS逆向</category>
      </categories>
      <tags>
        <tag>JS逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>JS逆向学习-某8登陆参数</title>
    <url>/2020/06/04/article-10/</url>
    <content><![CDATA[<p>aHR0cHM6Ly9wYXNzcG9ydC41OC5jb20vbG9naW4vP3BhdGg9aHR0cHMlM0EvL2Z6LjU4LmNvbS8mUEdUSUQ9MGQxMDAwMDAtMDAxMy0wMjk0LTFjZWItYjU3NTBiZDIwNmU5JkNsaWNrSUQ9Mg</p>
<h3 id="分析请求"><a href="#分析请求" class="headerlink" title="分析请求"></a>分析请求</h3><p><img src="/2020/06/04/article-10/WX20200604-142559.png" alt></p>
<p>登陆请求操作中需要对上述标记的四个参数进行分析</p>
<p>首先看 <strong><em>token</em></strong>，全局搜索一下发现是一个请求返回的</p>
<p><img src="/2020/06/04/article-10/WX20200604-142857.png" alt></p>
<p><img src="/2020/06/04/article-10/WX20200604-143121.png" alt></p>
<p>该请求的参数貌似是定值，再全局搜索，发现是登陆页返回的</p>
<p><img src="/2020/06/04/article-10/WX20200604-143415.png" alt></p>
<p>接下来定位 <strong><em>password</em></strong> ，继续全局搜索</p>
<p><img src="/2020/06/04/article-10/WX20200604-143742.png" alt></p>
<p>在这里打断点，然后进行调试，发现了加密位置</p>
<p><img src="/2020/06/04/article-10/WX20200604-143933.png" alt></p>
<p><img src="/2020/06/04/article-10/WX20200604-144158.png" alt></p>
<p>还需要两个参数，然后万能的全局查询安排</p>
<p><img src="/2020/06/04/article-10/WX20200604-144432.png" alt></p>
<p>好了，这个也搞定了，然后找其他的</p>
<p>全局搜索 <strong><em>fingerprint</em></strong> ，发现是在cookie中获取的</p>
<p><img src="/2020/06/04/article-10/WX20200604-165705.png" alt></p>
<p><img src="/2020/06/04/article-10/WX20200604-165848.png" alt></p>
<p>顺势定位 <strong><em>finger2</em></strong> 参数</p>
<p><img src="/2020/06/04/article-10/WX20200604-170312.png" alt></p>
<p><img src="/2020/06/04/article-10/WX20200604-170435.png" alt></p>
<p>这里就是指纹加密的地方</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>需要注意的是浏览器指纹信息的构建，但总体来说不难</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>JS逆向</category>
      </categories>
      <tags>
        <tag>JS逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>JS逆向学习-某某之星登陆</title>
    <url>/2020/06/05/article-11/</url>
    <content><![CDATA[<p>aHR0cHM6Ly9ob3RlbC5iZXN0d2Vob3RlbC5jb20vTmV3TG9naW4vP2dvPWh0dHBzJTNBJTJGJTJGaG90ZWwuYmVzdHdlaG90ZWwuY29tJTJG</p>
<h3 id="分析请求"><a href="#分析请求" class="headerlink" title="分析请求"></a>分析请求</h3><p><img src="/2020/06/05/article-11/WX20200605-163518.png" alt></p>
<p>需要解决的是这两个参数</p>
<p>先来看 <strong><em>password</em></strong>， 通过全局搜索定位到如下位置</p>
<p><img src="/2020/06/05/article-11/WX20200605-164302.png" alt></p>
<p>追进去查看这个加密方法</p>
<p><img src="/2020/06/05/article-11/WX20200605-164501.png" alt></p>
<p>这里就是最终的aes加密方法</p>
<p>接下来重点看 <strong><em>black_box</em></strong>，全局搜索一下</p>
<p><img src="/2020/06/05/article-11/WX20200605-164713.png" alt></p>
<p>发现是通过 <strong><em>_fmOpt.getinfo()</em></strong> 获取的，再来看下 <strong><em>_fmOpt</em></strong> 定义位置</p>
<p><img src="/2020/06/05/article-11/WX20200605-165922.png" alt></p>
<p>我们找到了定义的位置，但是发现这并不是我们需要的结果，接下来我们直接在控制台输出这个函数</p>
<p><img src="/2020/06/05/article-11/WX20200605-170642.png" alt></p>
<p>最后发现这段函数是在一个文件中定义的，然后通过 <strong><em>reres</em></strong> 工具替换这个文件并打上断点便于调试</p>
<p><img src="/2020/06/05/article-11/WX20200605-171024.png" alt></p>
<p><img src="/2020/06/05/article-11/WX20200605-171115.png" alt></p>
<p>最后发现是对一个对象进行了base64操作，看下这个对象</p>
<p><img src="/2020/06/05/article-11/WX20200605-171319.png" alt></p>
<p>其中 <strong><em>it</em></strong> 是两个时间戳的差值，<strong><em>v</em></strong> 是版本信息，属于定值，<strong><em>t</em></strong>是浏览器信息</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>注意 <strong><em>eval</em></strong> 和混淆代码的处理及调试</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>JS逆向</category>
      </categories>
      <tags>
        <tag>JS逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>JS逆向学习-某某猫企业信息查询参数分析</title>
    <url>/2020/06/10/article-12/</url>
    <content><![CDATA[<p>aHR0cHM6Ly93d3cucWljaGFtYW8uY29tLw==</p>
<h3 id="分析请求"><a href="#分析请求" class="headerlink" title="分析请求"></a>分析请求</h3><p><img src="/2020/06/10/article-12/WX20200610-153511.png" alt></p>
<p>这个就是结果的响应页面，其中只有一个参数 <strong><em>mfccode</em></strong> ,全局搜索定位到了这里</p>
<p><img src="/2020/06/10/article-12/WX20200610-153913.png" alt></p>
<p>在这里打上断点，继续调试</p>
<p><img src="/2020/06/10/article-12/WX20200610-154318.png" alt></p>
<p>发现成功断上了，然后继续跟进调试</p>
<p><img src="/2020/06/10/article-12/WX20200610-154503.png" alt></p>
<p><strong><em>window.__qzmcf</em></strong> 是 <strong><em>dc</em></strong> 函数，另外是否发现标注的这个url很眼熟，我们回头看下第一张图片</p>
<p><img src="/2020/06/10/article-12/WX20200610-154839.png" alt></p>
<p>chrome无法显示内容，新建窗口打开看下</p>
<p><img src="/2020/06/10/article-12/WX20200610-155001.png" alt></p>
<p>格式化后查看</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">w</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!a) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> al = a.length,</span><br><span class="line">                ret = <span class="keyword">new</span> <span class="built_in">Array</span>(al),</span><br><span class="line">                i = <span class="number">0</span>,</span><br><span class="line">                j = i;</span><br><span class="line">            <span class="keyword">while</span> (al--) &#123;</span><br><span class="line">                ret[j++] = <span class="built_in">String</span>.fromCharCode(a[i++])</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ret.join(<span class="string">''</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        ex = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (n <span class="keyword">in</span> y) &#123;</span><br><span class="line">                x[n] = y[n]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        ck = <span class="function"><span class="keyword">function</span> (<span class="params">sn</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> ac = w.document[s([<span class="number">99</span>, <span class="number">111</span>, <span class="number">111</span>, <span class="number">107</span>, <span class="number">105</span>, <span class="number">101</span>])].split(<span class="string">'; '</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ac.length; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> aCrumb = ac[i].split(<span class="string">'='</span>);</span><br><span class="line">                <span class="keyword">if</span> (sn == aCrumb[<span class="number">0</span>]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (aCrumb[<span class="number">1</span>] != <span class="literal">null</span> &amp;&amp; aCrumb[<span class="number">1</span>] != <span class="keyword">typeof</span> <span class="literal">undefined</span>) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="built_in">unescape</span>(aCrumb[<span class="number">1</span>]);</span><br><span class="line">                    &#125;;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">typeof</span> <span class="literal">undefined</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        le = s([<span class="number">108</span>, <span class="number">101</span>, <span class="number">110</span>, <span class="number">103</span>, <span class="number">116</span>, <span class="number">104</span>]),</span><br><span class="line">        pc = s([<span class="number">99</span>, <span class="number">104</span>, <span class="number">97</span>, <span class="number">114</span>, <span class="number">67</span>, <span class="number">111</span>, <span class="number">100</span>, <span class="number">101</span>, <span class="number">65</span>, <span class="number">116</span>]),</span><br><span class="line">        id = ck(s([<span class="number">113</span>, <span class="number">122</span>, <span class="number">110</span>, <span class="number">101</span>, <span class="number">119</span>, <span class="number">115</span>, <span class="number">105</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">46</span>, <span class="number">117</span>, <span class="number">105</span>, <span class="number">100</span>])),</span><br><span class="line">        mov = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> dyt1 = <span class="function"><span class="keyword">function</span> (<span class="params">d5, y4</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> d5 &gt;&gt; y4</span><br><span class="line">                &#125;,</span><br><span class="line">                kac5 = <span class="function"><span class="keyword">function</span> (<span class="params">k7, a4</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> k7 &lt;&lt; a4</span><br><span class="line">                &#125;,</span><br><span class="line">                vau2 = <span class="function"><span class="keyword">function</span> (<span class="params">v8, a6</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> v8 - a6</span><br><span class="line">                &#125;,</span><br><span class="line">                fwc3 = <span class="function"><span class="keyword">function</span> (<span class="params">f4, w0</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> f4 + w0</span><br><span class="line">                &#125;,</span><br><span class="line">                ymx2 = <span class="function"><span class="keyword">function</span> (<span class="params">y1, m8</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> y1 | m8</span><br><span class="line">                &#125;,</span><br><span class="line">                kdf8 = <span class="function"><span class="keyword">function</span> (<span class="params">k0, d0</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> k0 &amp; d0</span><br><span class="line">                &#125;,</span><br><span class="line">                moh1 = <span class="function"><span class="keyword">function</span> (<span class="params">m4, o2</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> m4 * o2</span><br><span class="line">                &#125;,</span><br><span class="line">                __x = <span class="number">178</span>;</span><br><span class="line">            <span class="keyword">return</span> kac5(fwc3(moh1(vau2(kac5(fwc3(ymx2(kac5(kdf8(vau2(vau2(kac5(kac5(fwc3(fwc3(kac5(kdf8(dyt1(kdf8(kac5(fwc3(kac5(moh1(dyt1(moh1(dyt1(fwc3(kac5(dyt1(fwc3(vau2(vau2(kac5(dyt1(kdf8(moh1(kdf8(moh1(kac5(moh1(dyt1(kac5(dyt1(kdf8(kdf8(fwc3(dyt1(ymx2(kdf8(ymx2(moh1(dyt1(kdf8(kac5(kac5(kac5(ymx2(kac5(kac5(kac5(kdf8(vau2(ymx2(kac5(kac5(dyt1(kac5(fwc3(fwc3(vau2(ymx2(kdf8(ymx2(kac5(kac5(vau2(dyt1(dyt1(kdf8(fwc3(moh1(ymx2(moh1(vau2(dyt1(moh1(vau2(moh1(kac5(fwc3(dyt1(vau2(kac5(ymx2(ymx2(ymx2(kac5(kdf8(moh1(moh1(dyt1(fwc3(fwc3(kdf8(dyt1(dyt1(kdf8(kac5(ymx2(kac5(ymx2(moh1(kac5(vau2(moh1(kac5(dyt1(kac5(fwc3(dyt1(dyt1(vau2(vau2(fwc3(kac5(moh1(fwc3(ymx2(kdf8(dyt1(kac5(dyt1(ymx2(dyt1(fwc3(dyt1(kdf8(dyt1(dyt1(kdf8(dyt1(kac5(fwc3(ymx2(kdf8(dyt1(kac5(vau2(ymx2(kac5(kdf8(vau2(vau2(kac5(dyt1(vau2(kdf8(ymx2(vau2(dyt1(ymx2(ymx2(dyt1(kac5(vau2(ymx2(fwc3(dyt1(fwc3(kdf8(fwc3(kac5(ymx2(kac5(vau2(moh1(dyt1(ymx2(moh1(vau2(dyt1(fwc3(kdf8(kac5(kac5(kdf8(ymx2(kac5(ymx2(dyt1(kdf8(kac5(moh1(dyt1(kdf8(vau2(ymx2(dyt1(ymx2(moh1(ymx2(kac5(dyt1(kdf8(ymx2(vau2(fwc3(kac5(kdf8(moh1(moh1(dyt1(dyt1(moh1(moh1(kdf8(dyt1(ymx2(kdf8(moh1(vau2(vau2(ymx2(vau2(kdf8(kac5(moh1(kdf8(kac5(kdf8(dyt1(kac5(ymx2(ymx2(dyt1(dyt1(fwc3(vau2(vau2(moh1(kdf8(dyt1(kdf8(kdf8(fwc3(vau2(kac5(ymx2(vau2(fwc3(moh1(fwc3(moh1(moh1(ymx2(kac5(kac5(dyt1(kac5(kac5(dyt1(dyt1(kac5(kac5(dyt1(ymx2(dyt1(dyt1(ymx2(moh1(vau2(moh1(ymx2(ymx2(fwc3(vau2(fwc3(moh1(dyt1(fwc3(kac5(moh1(kac5(vau2(moh1(kac5(kac5(kac5(moh1(vau2(vau2(vau2(dyt1(ymx2(kac5(moh1(vau2(ymx2(dyt1(ymx2(moh1(dyt1(ymx2(kdf8(vau2(kdf8(kdf8(fwc3(kdf8(dyt1(moh1(kdf8(moh1(fwc3(vau2(dyt1(dyt1(ymx2(moh1(moh1(moh1(kdf8(moh1(fwc3(kac5(fwc3(ymx2(moh1(moh1(kac5(dyt1(vau2(vau2(kac5(ymx2(moh1(dyt1(fwc3(kdf8(moh1(ymx2(kdf8(ymx2(kac5(kdf8(ymx2(moh1(moh1(kac5(ymx2(vau2(moh1(vau2(kdf8(moh1(moh1(vau2(vau2(kdf8(ymx2(dyt1(dyt1(dyt1(ymx2(fwc3(dyt1(vau2(dyt1(fwc3(moh1(ymx2(dyt1(fwc3(fwc3(kdf8(fwc3(vau2(fwc3(dyt1(ymx2(fwc3(moh1(moh1(ymx2(ymx2(dyt1(vau2(kdf8(vau2(kdf8(kac5(dyt1(dyt1(ymx2(dyt1(ymx2(kac5(fwc3(dyt1(kac5(vau2(vau2(fwc3(vau2(kdf8(kdf8(ymx2(kac5(kdf8(vau2(ymx2(kdf8(vau2(kac5(ymx2(vau2(vau2(vau2(kdf8(dyt1(kdf8(kdf8(moh1(vau2(ymx2(fwc3(moh1(fwc3(vau2(ymx2(vau2(fwc3(moh1(fwc3(kdf8(moh1(vau2(moh1(dyt1(kdf8(vau2(dyt1(kac5(moh1(fwc3(kdf8(vau2(kdf8(fwc3(kac5(ymx2(kac5(dyt1(kdf8(moh1(ymx2(dyt1(kac5(ymx2(moh1(dyt1(vau2(vau2(vau2(kdf8(moh1(fwc3(ymx2(kdf8(moh1(vau2(vau2(kac5(moh1(ymx2(kac5(dyt1(moh1(fwc3(kac5(ymx2(vau2(dyt1(fwc3(vau2(kdf8(fwc3(dyt1(fwc3(dyt1(ymx2(kdf8(moh1(vau2(ymx2(dyt1(fwc3(ymx2(moh1(kdf8(ymx2(vau2(ymx2(dyt1(dyt1(vau2(kdf8(kac5(ymx2(kac5(kdf8(fwc3(__x, <span class="number">1406</span>), <span class="number">21212</span>), <span class="number">1</span>), <span class="number">1185</span>), <span class="number">2</span>), <span class="number">42417</span>), <span class="number">1564</span>), <span class="number">3</span>), <span class="number">2</span>), <span class="number">1683</span>), <span class="number">1406</span>), <span class="number">3335</span>), <span class="number">21459</span>), <span class="number">3</span>), <span class="number">3846</span>), <span class="number">598</span>), <span class="number">4</span>), <span class="number">882</span>), <span class="number">-102</span>), <span class="number">1</span>), <span class="number">55540</span>), <span class="number">2275</span>), <span class="number">2</span>), <span class="number">153</span>), <span class="number">2</span>), <span class="number">-3991</span>), <span class="number">61019</span>), <span class="number">-258</span>), <span class="number">-3883</span>), <span class="number">1</span>), <span class="number">3411</span>), <span class="number">1614</span>), <span class="number">1</span>), <span class="number">-1238</span>), <span class="number">2</span>), <span class="number">4</span>), <span class="number">3</span>), <span class="number">1895</span>), <span class="number">1</span>), <span class="number">2</span>), <span class="number">-643</span>), <span class="number">-2185</span>), <span class="number">1</span>), <span class="number">42090</span>), <span class="number">1191</span>), <span class="number">-2914</span>), <span class="number">4</span>), <span class="number">58000</span>), <span class="number">-1195</span>), <span class="number">-1979</span>), <span class="number">2367</span>), <span class="number">1</span>), <span class="number">1</span>), <span class="number">710</span>), <span class="number">4</span>), <span class="number">1</span>), <span class="number">951</span>), <span class="number">3</span>), <span class="number">27051</span>), <span class="number">1</span>), <span class="number">2</span>), <span class="number">3079</span>), <span class="number">2</span>), <span class="number">948</span>), <span class="number">47143</span>), <span class="number">898</span>), <span class="number">10855</span>), <span class="number">-1182</span>), <span class="number">1</span>), <span class="number">3</span>), <span class="number">3</span>), <span class="number">2618</span>), <span class="number">4782</span>), <span class="number">3</span>), <span class="number">1</span>), <span class="number">2922</span>), <span class="number">1</span>), <span class="number">53151</span>), <span class="number">2494</span>), <span class="number">3</span>), <span class="number">4017</span>), <span class="number">1211</span>), <span class="number">3693</span>), <span class="number">389</span>), <span class="number">592</span>), <span class="number">3</span>), <span class="number">2065</span>), <span class="number">3200</span>), <span class="number">3039</span>), <span class="number">2</span>), <span class="number">21493</span>), <span class="number">49244</span>), <span class="number">2</span>), <span class="number">51499</span>), <span class="number">-1454</span>), <span class="number">-3464</span>), <span class="number">1221</span>), <span class="number">2217</span>), <span class="number">3</span>), <span class="number">2815</span>), <span class="number">61805</span>), <span class="number">1372</span>), <span class="number">-156</span>), <span class="number">10772</span>), <span class="number">1</span>), <span class="number">1128</span>), <span class="number">39679</span>), <span class="number">53694</span>), <span class="number">328</span>), <span class="number">-1620</span>), <span class="number">-282</span>), <span class="number">1944</span>), <span class="number">4</span>), <span class="number">2</span>), <span class="number">-2659</span>), <span class="number">3</span>), <span class="number">842</span>), <span class="number">4</span>), <span class="number">2030</span>), <span class="number">1</span>), <span class="number">3</span>), <span class="number">1</span>), <span class="number">5956</span>), <span class="number">690</span>), <span class="number">55923</span>), <span class="number">2700</span>), <span class="number">4</span>), <span class="number">1440</span>), <span class="number">3897</span>), <span class="number">2</span>), <span class="number">2</span>), <span class="number">-2604</span>), <span class="number">407</span>), <span class="number">3</span>), <span class="number">3520</span>), <span class="number">2257</span>), <span class="number">-3658</span>), <span class="number">35189</span>), <span class="number">-3268</span>), <span class="number">-1766</span>), <span class="number">4</span>), <span class="number">1245</span>), <span class="number">3</span>), <span class="number">2606</span>), <span class="number">1</span>), <span class="number">1221</span>), <span class="number">1</span>), <span class="number">-2134</span>), <span class="number">1145</span>), <span class="number">3</span>), <span class="number">3</span>), <span class="number">4</span>), <span class="number">2166</span>), <span class="number">32254</span>), <span class="number">-2529</span>), <span class="number">440</span>), <span class="number">3</span>), <span class="number">1</span>), <span class="number">50152</span>), <span class="number">-3151</span>), <span class="number">3</span>), <span class="number">2917</span>), <span class="number">2408</span>), <span class="number">1</span>), <span class="number">2</span>), <span class="number">4</span>), <span class="number">1589</span>), <span class="number">59244</span>), <span class="number">3</span>), <span class="number">1810</span>), <span class="number">40854</span>), <span class="number">1269</span>), <span class="number">3</span>), <span class="number">52930</span>), <span class="number">-3553</span>), <span class="number">4</span>), <span class="number">2</span>), <span class="number">3255</span>), <span class="number">3</span>), <span class="number">-3498</span>), <span class="number">1891</span>), <span class="number">3</span>), <span class="number">2</span>), <span class="number">3</span>), <span class="number">1</span>), <span class="number">372</span>), <span class="number">3071</span>), <span class="number">2</span>), <span class="number">3572</span>), <span class="number">1</span>), <span class="number">34481</span>), <span class="number">4</span>), <span class="number">4</span>), <span class="number">1</span>), <span class="number">282</span>), <span class="number">3</span>), <span class="number">3</span>), <span class="number">-3580</span>), <span class="number">-3905</span>), <span class="number">3</span>), <span class="number">13000</span>), <span class="number">4</span>), <span class="number">2</span>), <span class="number">8826</span>), <span class="number">-1575</span>), <span class="number">33443</span>), <span class="number">15121</span>), <span class="number">1749</span>), <span class="number">41336</span>), <span class="number">1515</span>), <span class="number">3</span>), <span class="number">4</span>), <span class="number">3580</span>), <span class="number">3</span>), <span class="number">1248</span>), <span class="number">-3954</span>), <span class="number">2</span>), <span class="number">3</span>), <span class="number">4076</span>), <span class="number">2</span>), <span class="number">2384</span>), <span class="number">-1252</span>), <span class="number">-4046</span>), <span class="number">2</span>), <span class="number">2</span>), <span class="number">2</span>), <span class="number">3</span>), <span class="number">4</span>), <span class="number">4054</span>), <span class="number">3</span>), <span class="number">1</span>), <span class="number">4</span>), <span class="number">1826</span>), <span class="number">2</span>), <span class="number">3</span>), <span class="number">2031</span>), <span class="number">-2693</span>), <span class="number">2272</span>), <span class="number">2468</span>), <span class="number">2450</span>), <span class="number">1</span>), <span class="number">-2497</span>), <span class="number">4</span>), <span class="number">1686</span>), <span class="number">2</span>), <span class="number">3</span>), <span class="number">3539</span>), <span class="number">1</span>), <span class="number">2</span>), <span class="number">3</span>), <span class="number">3</span>), <span class="number">4</span>), <span class="number">3</span>), <span class="number">1</span>), <span class="number">1</span>), <span class="number">3</span>), <span class="number">4</span>), <span class="number">3016</span>), <span class="number">1</span>), <span class="number">1</span>), <span class="number">-3156</span>), <span class="number">3</span>), <span class="number">18</span>), <span class="number">-1557</span>), <span class="number">432</span>), <span class="number">1</span>), <span class="number">-3388</span>), <span class="number">-2011</span>), <span class="number">34081</span>), <span class="number">26569</span>), <span class="number">2</span>), <span class="number">21141</span>), <span class="number">4</span>), <span class="number">1925</span>), <span class="number">2762</span>), <span class="number">-2549</span>), <span class="number">1</span>), <span class="number">2</span>), <span class="number">3628</span>), <span class="number">3597</span>), <span class="number">1</span>), <span class="number">2</span>), <span class="number">14065</span>), <span class="number">2</span>), <span class="number">32077</span>), <span class="number">2</span>), <span class="number">3</span>), <span class="number">39399</span>), <span class="number">1187</span>), <span class="number">1204</span>), <span class="number">-544</span>), <span class="number">2278</span>), <span class="number">1</span>), <span class="number">13726</span>), <span class="number">2747</span>), <span class="number">4</span>), <span class="number">62605</span>), <span class="number">2</span>), <span class="number">2</span>), <span class="number">4</span>), <span class="number">4</span>), <span class="number">3</span>), <span class="number">3</span>), <span class="number">64237</span>), <span class="number">4</span>), <span class="number">-3653</span>), <span class="number">-392</span>), <span class="number">3980</span>), <span class="number">52493</span>), <span class="number">3</span>), <span class="number">1</span>), <span class="number">804</span>), <span class="number">1</span>), <span class="number">1901</span>), <span class="number">2</span>), <span class="number">3674</span>), <span class="number">3154</span>), <span class="number">22167</span>), <span class="number">2</span>), <span class="number">1</span>), <span class="number">4</span>), <span class="number">46515</span>), <span class="number">3</span>), <span class="number">1549</span>), <span class="number">4</span>), <span class="number">755</span>), <span class="number">59834</span>), <span class="number">1</span>), <span class="number">4</span>), <span class="number">58435</span>), <span class="number">-989</span>), <span class="number">1</span>), <span class="number">-2055</span>), <span class="number">2</span>), <span class="number">1473</span>), <span class="number">2</span>), <span class="number">2</span>), <span class="number">1029</span>), <span class="number">4</span>), <span class="number">1786</span>), <span class="number">2</span>), <span class="number">385</span>), <span class="number">36470</span>), <span class="number">-2102</span>), <span class="number">3</span>), <span class="number">1551</span>), <span class="number">4048</span>), <span class="number">-4024</span>), <span class="number">4</span>), <span class="number">2</span>), <span class="number">1481</span>), <span class="number">347</span>), <span class="number">1</span>), <span class="number">-95</span>), <span class="number">3041</span>), <span class="number">22582</span>), <span class="number">-894</span>), <span class="number">3</span>), <span class="number">4</span>), <span class="number">1858</span>), <span class="number">1310</span>), <span class="number">5151</span>), <span class="number">4</span>), <span class="number">3819</span>), <span class="number">-2540</span>), <span class="number">3</span>), <span class="number">2</span>), <span class="number">5996</span>), <span class="number">500</span>), <span class="number">85</span>), <span class="number">3</span>), <span class="number">4</span>), <span class="number">47445</span>), <span class="number">2</span>), <span class="number">2</span>), <span class="number">31521</span>), <span class="number">3</span>), <span class="number">3587</span>), <span class="number">3</span>), <span class="number">3026</span>), <span class="number">2</span>), <span class="number">3</span>), <span class="number">1</span>), <span class="number">52848</span>), <span class="number">2189</span>), <span class="number">-2227</span>), <span class="number">4</span>), <span class="number">3</span>), <span class="number">-4016</span>), <span class="number">861</span>), <span class="number">-852</span>), <span class="number">3</span>), <span class="number">4</span>), <span class="number">2789</span>), <span class="number">4</span>), <span class="number">4</span>), <span class="number">2</span>), <span class="number">1</span>), <span class="number">-3959</span>), <span class="number">3</span>), <span class="number">3</span>), <span class="number">3902</span>), <span class="number">2</span>), <span class="number">3190</span>), <span class="number">2</span>), <span class="number">34242</span>), <span class="number">1</span>), <span class="number">1</span>), <span class="number">43598</span>), <span class="number">808</span>), <span class="number">3359</span>), <span class="number">3</span>), <span class="number">1</span>), <span class="number">3</span>), <span class="number">27918</span>), <span class="number">1</span>), <span class="number">2346</span>), <span class="number">2327</span>), <span class="number">2272</span>), <span class="number">4</span>), <span class="number">-1725</span>), <span class="number">4</span>), <span class="number">-3771</span>), <span class="number">1</span>), <span class="number">4</span>), <span class="number">812</span>), <span class="number">4</span>), <span class="number">1</span>), <span class="number">3909</span>), <span class="number">1</span>), <span class="number">425</span>), <span class="number">4</span>), <span class="number">1680</span>), <span class="number">62779</span>), <span class="number">4</span>), <span class="number">2</span>), <span class="number">-3592</span>), <span class="number">4</span>), <span class="number">3</span>), <span class="number">3840</span>), <span class="number">43141</span>), <span class="number">3825</span>), <span class="number">2051</span>), <span class="number">3021</span>), <span class="number">864</span>), <span class="number">3</span>), <span class="number">2</span>), <span class="number">1</span>), <span class="number">3</span>), <span class="number">1578</span>), <span class="number">-222</span>), <span class="number">62225</span>), <span class="number">4</span>), <span class="number">4</span>), <span class="number">3</span>), <span class="number">2247</span>), <span class="number">1</span>), <span class="number">4</span>), <span class="number">1</span>), <span class="number">28192</span>), <span class="number">4</span>), <span class="number">4</span>), <span class="number">3034</span>), <span class="number">4560</span>), <span class="number">792</span>), <span class="number">3</span>), <span class="number">-1362</span>), <span class="number">22378</span>), <span class="number">49452</span>), <span class="number">1</span>), <span class="number">1</span>), <span class="number">2</span>), <span class="number">4</span>), <span class="number">3</span>), <span class="number">2</span>), <span class="number">20282</span>), <span class="number">2</span>), <span class="number">16828</span>), <span class="number">4</span>), <span class="number">3</span>), <span class="number">-1414</span>), <span class="number">-1766</span>), <span class="number">3703</span>), <span class="number">4</span>), <span class="number">1</span>), <span class="number">996</span>), <span class="number">2</span>), <span class="number">2</span>), <span class="number">3</span>), <span class="number">4</span>), <span class="number">1</span>), <span class="number">-1706</span>), <span class="number">2</span>), <span class="number">52552</span>), <span class="number">3</span>), <span class="number">60561</span>), <span class="number">4</span>), <span class="number">-3376</span>), <span class="number">-2784</span>), <span class="number">4</span>), <span class="number">2</span>), <span class="number">2875</span>), <span class="number">-2245</span>), <span class="number">29289</span>), <span class="number">2</span>), <span class="number">487</span>), <span class="number">347</span>), <span class="number">4</span>), <span class="number">3513</span>), <span class="number">4</span>), <span class="number">1463</span>), <span class="number">4</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        sk = [<span class="number">-34</span>, <span class="number">-82</span>, <span class="number">-80</span>, <span class="number">79</span>, <span class="number">-23</span>, <span class="number">100</span>, <span class="number">77</span>, <span class="number">-39</span>, <span class="number">76</span>, <span class="number">-45</span>, <span class="number">89</span>, <span class="number">93</span>, <span class="number">0</span>, <span class="number">-59</span>, <span class="number">85</span>, <span class="number">-35</span>, <span class="number">65</span>, <span class="number">120</span>, <span class="number">-89</span>, <span class="number">110</span>, <span class="number">83</span>, <span class="number">-12</span>, <span class="number">-7</span>, <span class="number">-42</span>, <span class="number">63</span>, <span class="number">52</span>, <span class="number">120</span>, <span class="number">-72</span>, <span class="number">41</span>, <span class="number">-52</span>, <span class="number">103</span>, <span class="number">-16</span>, <span class="number">-18</span>, <span class="number">-17</span>, <span class="number">70</span>, <span class="number">-76</span>, <span class="number">-101</span>, <span class="number">-17</span>, <span class="number">-114</span>, <span class="number">-36</span>, <span class="number">91</span>, <span class="number">66</span>, <span class="number">24</span>, <span class="number">76</span>, <span class="number">-68</span>, <span class="number">123</span>, <span class="number">85</span>, <span class="number">94</span>, <span class="number">61</span>, <span class="number">-28</span>, <span class="number">46</span>, <span class="number">-76</span>, <span class="number">16</span>, <span class="number">31</span>, <span class="number">100</span>, <span class="number">-37</span>, <span class="number">70</span>, <span class="number">130</span>, <span class="number">124</span>, <span class="number">114</span>, <span class="number">-12</span>, <span class="number">-63</span>, <span class="number">-69</span>, <span class="number">-106</span>, <span class="number">-92</span>, <span class="number">-42</span>, <span class="number">14</span>, <span class="number">29</span>, <span class="number">-68</span>, <span class="number">72</span>, <span class="number">127</span>, <span class="number">-32</span>, <span class="number">62</span>, <span class="number">16</span>, <span class="number">-34</span>, <span class="number">15</span>, <span class="number">-48</span>, <span class="number">-58</span>, <span class="number">91</span>, <span class="number">-115</span>, <span class="number">54</span>, <span class="number">11</span>, <span class="number">123</span>, <span class="number">68</span>, <span class="number">58</span>, <span class="number">85</span>, <span class="number">65</span>, <span class="number">-41</span>, <span class="number">44</span>, <span class="number">-61</span>, <span class="number">91</span>, <span class="number">-90</span>, <span class="number">33</span>, <span class="number">-98</span>, <span class="number">48</span>, <span class="number">60</span>, <span class="number">73</span>, <span class="number">106</span>, <span class="number">-93</span>, <span class="number">-86</span>, <span class="number">-7</span>, <span class="number">61</span>, <span class="number">88</span>, <span class="number">-44</span>, <span class="number">76</span>, <span class="number">2</span>, <span class="number">-56</span>, <span class="number">116</span>, <span class="number">28</span>, <span class="number">149</span>, <span class="number">-6</span>, <span class="number">110</span>, <span class="number">110</span>, <span class="number">142</span>, <span class="number">-14</span>, <span class="number">-54</span>, <span class="number">-108</span>, <span class="number">122</span>, <span class="number">1</span>, <span class="number">-44</span>, <span class="number">32</span>, <span class="number">119</span>, <span class="number">28</span>, <span class="number">0</span>, <span class="number">-63</span>, <span class="number">52</span>, <span class="number">-63</span>, <span class="number">-95</span>, <span class="number">121</span>, <span class="number">-104</span>, <span class="number">-32</span>, <span class="number">-64</span>, <span class="number">-93</span>, <span class="number">41</span>, <span class="number">10</span>, <span class="number">-34</span>, <span class="number">77</span>, <span class="number">-50</span>, <span class="number">151</span>, <span class="number">-81</span>, <span class="number">44</span>, <span class="number">-76</span>, <span class="number">-57</span>, <span class="number">91</span>, <span class="number">37</span>, <span class="number">23</span>, <span class="number">47</span>, <span class="number">-106</span>, <span class="number">7</span>, <span class="number">-1</span>, <span class="number">-16</span>, <span class="number">-43</span>, <span class="number">31</span>, <span class="number">68</span>, <span class="number">12</span>, <span class="number">-41</span>, <span class="number">79</span>, <span class="number">-11</span>, <span class="number">-97</span>, <span class="number">-76</span>, <span class="number">87</span>, <span class="number">59</span>, <span class="number">50</span>, <span class="number">-55</span>, <span class="number">3</span>, <span class="number">114</span>, <span class="number">-100</span>, <span class="number">-37</span>, <span class="number">93</span>, <span class="number">16</span>, <span class="number">19</span>, <span class="number">-62</span>, <span class="number">108</span>, <span class="number">101</span>, <span class="number">16</span>, <span class="number">106</span>, <span class="number">106</span>, <span class="number">69</span>, <span class="number">-2</span>, <span class="number">-86</span>, <span class="number">-108</span>, <span class="number">4</span>, <span class="number">101</span>, <span class="number">-32</span>, <span class="number">59</span>, <span class="number">127</span>, <span class="number">-62</span>, <span class="number">25</span>, <span class="number">-23</span>, <span class="number">104</span>, <span class="number">-96</span>, <span class="number">93</span>, <span class="number">-8</span>, <span class="number">133</span>, <span class="number">145</span>, <span class="number">-43</span>, <span class="number">83</span>, <span class="number">17</span>, <span class="number">64</span>, <span class="number">-39</span>, <span class="number">43</span>, <span class="number">2</span>, <span class="number">-64</span>, <span class="number">40</span>, <span class="number">64</span>, <span class="number">9</span>, <span class="number">-40</span>, <span class="number">-17</span>, <span class="number">107</span>, <span class="number">-83</span>, <span class="number">22</span>, <span class="number">55</span>, <span class="number">77</span>, <span class="number">110</span>, <span class="number">29</span>, <span class="number">-44</span>, <span class="number">87</span>, <span class="number">-16</span>, <span class="number">55</span>, <span class="number">-42</span>, <span class="number">28</span>, <span class="number">87</span>, <span class="number">-31</span>, <span class="number">14</span>, <span class="number">63</span>, <span class="number">14</span>, <span class="number">-39</span>, <span class="number">-1</span>, <span class="number">41</span>, <span class="number">-86</span>, <span class="number">-83</span>, <span class="number">-38</span>, <span class="number">40</span>, <span class="number">52</span>, <span class="number">135</span>, <span class="number">23</span>, <span class="number">-86</span>, <span class="number">127</span>, <span class="number">111</span>, <span class="number">-107</span>, <span class="number">112</span>, <span class="number">85</span>, <span class="number">122</span>, <span class="number">145</span>, <span class="number">118</span>, <span class="number">132</span>, <span class="number">-9</span>, <span class="number">-37</span>, <span class="number">47</span>, <span class="number">-106</span>, <span class="number">92</span>, <span class="number">-77</span>, <span class="number">137</span>, <span class="number">13</span>, <span class="number">22</span>, <span class="number">5</span>, <span class="number">60</span>, <span class="number">74</span>, <span class="number">-100</span>, <span class="number">107</span>, <span class="number">56</span>, <span class="number">37</span>, <span class="number">67</span>, <span class="number">-31</span>, <span class="number">94</span>, <span class="number">-21</span>, <span class="number">-66</span>, <span class="number">-14</span>, <span class="number">-45</span>, <span class="number">114</span>, <span class="number">-72</span>, <span class="number">56</span>, <span class="number">54</span>, <span class="number">34</span>, <span class="number">72</span>, <span class="number">-44</span>, <span class="number">118</span>, <span class="number">131</span>, <span class="number">-96</span>, <span class="number">-46</span>, <span class="number">36</span>, <span class="number">114</span>, <span class="number">0</span>, <span class="number">86</span>, <span class="number">-45</span>, <span class="number">113</span>, <span class="number">138</span>, <span class="number">20</span>, <span class="number">93</span>, <span class="number">25</span>, <span class="number">-73</span>, <span class="number">-30</span>, <span class="number">-26</span>, <span class="number">-48</span>, <span class="number">97</span>, <span class="number">-35</span>, <span class="number">73</span>, <span class="number">11</span>, <span class="number">-55</span>, <span class="number">-94</span>, <span class="number">11</span>, <span class="number">135</span>, <span class="number">104</span>, <span class="number">91</span>, <span class="number">-96</span>, <span class="number">-84</span>, <span class="number">137</span>, <span class="number">142</span>, <span class="number">-65</span>, <span class="number">66</span>, <span class="number">-115</span>, <span class="number">-35</span>, <span class="number">40</span>, <span class="number">-75</span>, <span class="number">-8</span>, <span class="number">24</span>, <span class="number">39</span>, <span class="number">-39</span>, <span class="number">69</span>, <span class="number">40</span>, <span class="number">29</span>, <span class="number">25</span>, <span class="number">32</span>, <span class="number">-19</span>, <span class="number">114</span>, <span class="number">119</span>, <span class="number">-16</span>, <span class="number">-43</span>, <span class="number">52</span>, <span class="number">85</span>, <span class="number">112</span>, <span class="number">50</span>, <span class="number">52</span>, <span class="number">87</span>, <span class="number">106</span>, <span class="number">17</span>, <span class="number">96</span>, <span class="number">64</span>, <span class="number">-10</span>, <span class="number">100</span>, <span class="number">21</span>, <span class="number">84</span>, <span class="number">-93</span>, <span class="number">-35</span>, <span class="number">85</span>, <span class="number">8</span>, <span class="number">-2</span>, <span class="number">-27</span>, <span class="number">19</span>, <span class="number">144</span>, <span class="number">62</span>, <span class="number">-29</span>, <span class="number">85</span>, <span class="number">64</span>, <span class="number">-39</span>, <span class="number">-74</span>, <span class="number">101</span>, <span class="number">121</span>, <span class="number">108</span>, <span class="number">-31</span>, <span class="number">70</span>, <span class="number">-73</span>, <span class="number">109</span>, <span class="number">111</span>, <span class="number">111</span>, <span class="number">109</span>, <span class="number">63</span>, <span class="number">35</span>, <span class="number">105</span>, <span class="number">29</span>, <span class="number">-25</span>, <span class="number">84</span>, <span class="number">89</span>, <span class="number">-21</span>, <span class="number">-20</span>, <span class="number">-46</span>, <span class="number">77</span>, <span class="number">-67</span>, <span class="number">-23</span>, <span class="number">35</span>, <span class="number">-11</span>, <span class="number">-80</span>, <span class="number">-82</span>, <span class="number">-82</span>, <span class="number">10</span>, <span class="number">-70</span>, <span class="number">-108</span>, <span class="number">0</span>, <span class="number">-46</span>, <span class="number">145</span>, <span class="number">-23</span>, <span class="number">-33</span>, <span class="number">73</span>, <span class="number">-94</span>, <span class="number">-60</span>, <span class="number">-25</span>, <span class="number">118</span>, <span class="number">-42</span>, <span class="number">76</span>, <span class="number">-65</span>, <span class="number">98</span>, <span class="number">-17</span>, <span class="number">93</span>, <span class="number">98</span>, <span class="number">40</span>, <span class="number">130</span>, <span class="number">114</span>, <span class="number">-41</span>, <span class="number">49</span>, <span class="number">17</span>, <span class="number">4</span>, <span class="number">-38</span>, <span class="number">0</span>, <span class="number">-58</span>, <span class="number">-48</span>, <span class="number">132</span>, <span class="number">57</span>, <span class="number">0</span>, <span class="number">96</span>, <span class="number">-38</span>, <span class="number">122</span>, <span class="number">-89</span>, <span class="number">51</span>, <span class="number">-45</span>, <span class="number">60</span>, <span class="number">-11</span>, <span class="number">-63</span>, <span class="number">-75</span>, <span class="number">74</span>, <span class="number">13</span>, <span class="number">128</span>, <span class="number">-9</span>, <span class="number">26</span>, <span class="number">-34</span>, <span class="number">-71</span>, <span class="number">38</span>, <span class="number">81</span>, <span class="number">-108</span>, <span class="number">135</span>, <span class="number">-46</span>, <span class="number">60</span>, <span class="number">63</span>, <span class="number">-37</span>, <span class="number">-13</span>, <span class="number">-43</span>, <span class="number">-9</span>, <span class="number">91</span>, <span class="number">-11</span>, <span class="number">-74</span>, <span class="number">83</span>, <span class="number">47</span>, <span class="number">36</span>, <span class="number">104</span>, <span class="number">-81</span>, <span class="number">92</span>, <span class="number">-35</span>, <span class="number">41</span>, <span class="number">91</span>, <span class="number">112</span>, <span class="number">-104</span>, <span class="number">-45</span>, <span class="number">-46</span>, <span class="number">-106</span>, <span class="number">-65</span>, <span class="number">68</span>, <span class="number">70</span>, <span class="number">-66</span>, <span class="number">-79</span>, <span class="number">-57</span>, <span class="number">134</span>, <span class="number">-115</span>, <span class="number">-43</span>, <span class="number">41</span>, <span class="number">-111</span>, <span class="number">118</span>, <span class="number">-90</span>, <span class="number">-56</span>, <span class="number">-34</span>, <span class="number">133</span>, <span class="number">-104</span>, <span class="number">141</span>, <span class="number">42</span>, <span class="number">6</span>, <span class="number">96</span>, <span class="number">36</span>, <span class="number">56</span>, <span class="number">123</span>, <span class="number">-31</span>, <span class="number">77</span>, <span class="number">80</span>, <span class="number">37</span>, <span class="number">8</span>, <span class="number">59</span>, <span class="number">-54</span>, <span class="number">-1</span>, <span class="number">104</span>, <span class="number">126</span>, <span class="number">-12</span>, <span class="number">113</span>, <span class="number">-14</span>, <span class="number">-97</span>, <span class="number">-107</span>, <span class="number">-18</span>, <span class="number">-46</span>, <span class="number">81</span>, <span class="number">55</span>, <span class="number">153</span>, <span class="number">-84</span>, <span class="number">19</span>, <span class="number">100</span>, <span class="number">-104</span>, <span class="number">124</span>, <span class="number">19</span>],</span><br><span class="line">        m = <span class="function"><span class="keyword">function</span> (<span class="params">a, k, i</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (a + k[pc](k[le] % i))</span><br><span class="line">        &#125;,</span><br><span class="line">        dc = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> sl = sk[le] - <span class="number">1</span>,</span><br><span class="line">                av = sk[sl],</span><br><span class="line">                i = <span class="number">0</span>,</span><br><span class="line">                j = i,</span><br><span class="line">                ret = i,</span><br><span class="line">                a, b;</span><br><span class="line">            <span class="keyword">while</span> (sl--) &#123;</span><br><span class="line">                i = j;</span><br><span class="line">                b = m(sk[j++], id, (j &gt; <span class="number">0</span> &amp;&amp; j % <span class="number">0x10</span> == <span class="number">0</span>) ? <span class="number">0x10</span> : j % <span class="number">0x10</span>);</span><br><span class="line">                <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                    ret -= (b * (i % <span class="number">3</span>) - av)</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ret += (b + <span class="number">87</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ret | mov(<span class="number">1</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">    w[s([<span class="number">95</span>, <span class="number">95</span>, <span class="number">113</span>, <span class="number">122</span>, <span class="number">109</span>, <span class="number">99</span>, <span class="number">102</span>])] = dc</span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/10/article-12/WX20200610-160618.png" alt></p>
<p>现在已经确定这就是加密的代码块了，扣下来在webstorm中执行老样子缺什么补什么，最后发现了这样一个错误</p>
<p><img src="/2020/06/10/article-12/WX20200610-160918@2x.png" alt></p>
<p>提示我们 <strong><em>cookie</em></strong> 没有定义，在控制台看下</p>
<p><img src="/2020/06/10/article-12/WX20200610-161200.png" alt></p>
<p>再结合代码得知这里是将 <strong><em>qznewsite.uid</em></strong> 做了处理</p>
<p>所以我们在js中增加如下定义，再执行代码就发现成功了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">window</span> = &#123;<span class="attr">document</span>: &#123;<span class="attr">cookie</span>: <span class="string">"qznewsite.uid=nzaxo1a4zrhqc34sn214bbyz"</span>&#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h3><p>前面已经修改好了js代码，然后使用python调用并请求后发现会跳到登陆页，这是因为该js是动态返回的，对比下两次得到的js</p>
<p><img src="/2020/06/10/article-12/WX20200610-161952.png" alt></p>
<p>所以就需要动态获取了，上代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line">headers = &#123;&#125;</span><br><span class="line">headers[<span class="string">"User-Agent"</span>] = <span class="string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36"</span></span><br><span class="line">headers[<span class="string">"Referer"</span>] = <span class="string">"https://www.qichamao.com/"</span></span><br><span class="line"></span><br><span class="line">js_url = <span class="string">f"https://www.qichamao.com/home/GetJsVerfyCode?t=<span class="subst">&#123;random.random()&#125;</span>&amp;_=<span class="subst">&#123;int(time.time())&#125;</span>"</span></span><br><span class="line"></span><br><span class="line">js_result = requests.get(js_url, verify=<span class="literal">False</span>, proxies=proxies, headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取</span></span><br><span class="line">uid = js_result.headers.get(<span class="string">"Set-Cookie"</span>, <span class="string">""</span>).split(<span class="string">";"</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># 设置uid</span></span><br><span class="line">cookies = uid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新cookie</span></span><br><span class="line">headers[<span class="string">"Cookie"</span>] = cookies</span><br><span class="line"></span><br><span class="line">js_code = js_result.text</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建可执行的 js</span></span><br><span class="line">_js_code = <span class="string">'var window = &#123;document: &#123;cookie: "%s"&#125;&#125;;!'</span> %cookies + js_code</span><br><span class="line"></span><br><span class="line">ctx = execjs.compile(_js_code)</span><br><span class="line">mfccode = ctx.eval(<span class="string">"window.__qzmcf()"</span>)</span><br><span class="line"></span><br><span class="line">url = <span class="string">f'https://www.qichamao.com/search/all/<span class="subst">&#123;quote(<span class="string">"小米"</span>)&#125;</span>?mfccode=<span class="subst">&#123;mfccode&#125;</span>'</span></span><br><span class="line"></span><br><span class="line">result = requests.get(url, headers=headers, proxies=proxies, verify=<span class="literal">False</span>)</span><br><span class="line">print(result.text)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/06/10/article-12/WX20200610-162446@2x.png" alt></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>一个很好的使用动态js调试案例，没什么难度，之前没接触过这类情况，需要耐心。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>JS逆向</category>
      </categories>
      <tags>
        <tag>JS逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>JS逆向学习-某汽车交易网站数据抓取</title>
    <url>/2020/06/10/article-13/</url>
    <content><![CDATA[<p>aHR0cHM6Ly93d3cuZ3VhemkuY29tLw==</p>
<h3 id="分析请求"><a href="#分析请求" class="headerlink" title="分析请求"></a>分析请求</h3><p>打开首页，查看获取 <strong><em>热卖车型</em></strong> 的请求</p>
<p><img src="/2020/06/10/article-13/WX20200610-183244.png" alt></p>
<p>发现就是一个很简单的 <strong><em>get</em></strong> 请求，也没有什么加密参数，但是当直接访问时就发现并没有返回想要的结果，而是跳转到了首页，说明需要对header做分析了，调了一圈发现是 <strong><em>antipas</em></strong> 这个cookie 的问题</p>
<p><img src="/2020/06/10/article-13/WX20200610-183845.png" alt></p>
<p>全局搜索后也没有发现设置的请求，那就从第一个请求找起，结果发现从第二个请求就开始有这个cookie了，但是第一个203请求在chrome中看不到响应内容，所以使用fiddler抓包分析，果然看到了内容</p>
<p><img src="/2020/06/10/article-13/WX20200610-184701.png" alt></p>
<p>发现这是一段eval执行的js代码，在浏览器新建一个窗口，把粘贴到控制台</p>
<p><img src="/2020/06/10/article-13/WX20200610-185028.png" alt></p>
<p>发现 <strong><em>value</em></strong> 就是我们要找的结果，是通过 <strong><em>anti</em></strong> 这个函数调用返回的，看下这个函数</p>
<p><img src="/2020/06/10/article-13/WX20200610-185202.png" alt></p>
<p>好了，把还原后的代码在本地执行，缺什么补什么，最后结果是这样的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span> = &#123;<span class="attr">location</span>: &#123;&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safeAdd</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> lsw = (x &amp; <span class="number">0xFFFF</span>) + (y &amp; <span class="number">0xFFFF</span>);</span><br><span class="line">    <span class="keyword">var</span> msw = (x &gt;&gt; <span class="number">16</span>) + (y &gt;&gt; <span class="number">16</span>) + (lsw &gt;&gt; <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">return</span> (msw &lt;&lt; <span class="number">16</span>) | (lsw &amp; <span class="number">0xFFFF</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bitRotateLeft</span>(<span class="params">num, cnt</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (num &lt;&lt; cnt) | (num &gt;&gt;&gt; (<span class="number">32</span> - cnt))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cmn</span>(<span class="params">q, a, b, x, s, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ff</span>(<span class="params">a, b, c, d, x, s, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cmn((b &amp; c) | ((~b) &amp; d), a, b, x, s, t)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gg</span>(<span class="params">a, b, c, d, x, s, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cmn((b &amp; d) | (c &amp; (~d)), a, b, x, s, t)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hh</span>(<span class="params">a, b, c, d, x, s, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cmn(b ^ c ^ d, a, b, x, s, t)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ii</span>(<span class="params">a, b, c, d, x, s, t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cmn(c ^ (b | (~d)), a, b, x, s, t)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binl</span>(<span class="params">x, len</span>) </span>&#123;</span><br><span class="line">    x[len &gt;&gt; <span class="number">5</span>] |= <span class="number">0x80</span> &lt;&lt; (len % <span class="number">32</span>);</span><br><span class="line">    x[(((len + <span class="number">64</span>) &gt;&gt;&gt; <span class="number">9</span>) &lt;&lt; <span class="number">4</span>) + <span class="number">14</span>] = len;</span><br><span class="line">    <span class="keyword">var</span> i;</span><br><span class="line">    <span class="keyword">var</span> olda;</span><br><span class="line">    <span class="keyword">var</span> oldb;</span><br><span class="line">    <span class="keyword">var</span> oldc;</span><br><span class="line">    <span class="keyword">var</span> oldd;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1732584193</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">-271733879</span>;</span><br><span class="line">    <span class="keyword">var</span> c = <span class="number">-1732584194</span>;</span><br><span class="line">    <span class="keyword">var</span> d = <span class="number">271733878</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; x.length; i += <span class="number">16</span>) &#123;</span><br><span class="line">        olda = a;</span><br><span class="line">        oldb = b;</span><br><span class="line">        oldc = c;</span><br><span class="line">        oldd = d;</span><br><span class="line">        a = ff(a, b, c, d, x[i], <span class="number">7</span>, <span class="number">-680876936</span>);</span><br><span class="line">        d = ff(d, a, b, c, x[i + <span class="number">1</span>], <span class="number">12</span>, <span class="number">-389564586</span>);</span><br><span class="line">        c = ff(c, d, a, b, x[i + <span class="number">2</span>], <span class="number">17</span>, <span class="number">606105819</span>);</span><br><span class="line">        b = ff(b, c, d, a, x[i + <span class="number">3</span>], <span class="number">22</span>, <span class="number">-1044525330</span>);</span><br><span class="line">        a = ff(a, b, c, d, x[i + <span class="number">4</span>], <span class="number">7</span>, <span class="number">-176418897</span>);</span><br><span class="line">        d = ff(d, a, b, c, x[i + <span class="number">5</span>], <span class="number">12</span>, <span class="number">1200080426</span>);</span><br><span class="line">        c = ff(c, d, a, b, x[i + <span class="number">6</span>], <span class="number">17</span>, <span class="number">-1473231341</span>);</span><br><span class="line">        b = ff(b, c, d, a, x[i + <span class="number">7</span>], <span class="number">22</span>, <span class="number">-45705983</span>);</span><br><span class="line">        a = ff(a, b, c, d, x[i + <span class="number">8</span>], <span class="number">7</span>, <span class="number">1770035416</span>);</span><br><span class="line">        d = ff(d, a, b, c, x[i + <span class="number">9</span>], <span class="number">12</span>, <span class="number">-1958414417</span>);</span><br><span class="line">        c = ff(c, d, a, b, x[i + <span class="number">10</span>], <span class="number">17</span>, <span class="number">-42063</span>);</span><br><span class="line">        b = ff(b, c, d, a, x[i + <span class="number">11</span>], <span class="number">22</span>, <span class="number">-1990404162</span>);</span><br><span class="line">        a = ff(a, b, c, d, x[i + <span class="number">12</span>], <span class="number">7</span>, <span class="number">1804603682</span>);</span><br><span class="line">        d = ff(d, a, b, c, x[i + <span class="number">13</span>], <span class="number">12</span>, <span class="number">-40341101</span>);</span><br><span class="line">        c = ff(c, d, a, b, x[i + <span class="number">14</span>], <span class="number">17</span>, <span class="number">-1502002290</span>);</span><br><span class="line">        b = ff(b, c, d, a, x[i + <span class="number">15</span>], <span class="number">22</span>, <span class="number">1236535329</span>);</span><br><span class="line">        a = gg(a, b, c, d, x[i + <span class="number">1</span>], <span class="number">5</span>, <span class="number">-165796510</span>);</span><br><span class="line">        d = gg(d, a, b, c, x[i + <span class="number">6</span>], <span class="number">9</span>, <span class="number">-1069501632</span>);</span><br><span class="line">        c = gg(c, d, a, b, x[i + <span class="number">11</span>], <span class="number">14</span>, <span class="number">643717713</span>);</span><br><span class="line">        b = gg(b, c, d, a, x[i], <span class="number">20</span>, <span class="number">-373897302</span>);</span><br><span class="line">        a = gg(a, b, c, d, x[i + <span class="number">5</span>], <span class="number">5</span>, <span class="number">-701558691</span>);</span><br><span class="line">        d = gg(d, a, b, c, x[i + <span class="number">10</span>], <span class="number">9</span>, <span class="number">38016083</span>);</span><br><span class="line">        c = gg(c, d, a, b, x[i + <span class="number">15</span>], <span class="number">14</span>, <span class="number">-660478335</span>);</span><br><span class="line">        b = gg(b, c, d, a, x[i + <span class="number">4</span>], <span class="number">20</span>, <span class="number">-405537848</span>);</span><br><span class="line">        a = gg(a, b, c, d, x[i + <span class="number">9</span>], <span class="number">5</span>, <span class="number">568446438</span>);</span><br><span class="line">        d = gg(d, a, b, c, x[i + <span class="number">14</span>], <span class="number">9</span>, <span class="number">-1019803690</span>);</span><br><span class="line">        c = gg(c, d, a, b, x[i + <span class="number">3</span>], <span class="number">14</span>, <span class="number">-187363961</span>);</span><br><span class="line">        b = gg(b, c, d, a, x[i + <span class="number">8</span>], <span class="number">20</span>, <span class="number">1163531501</span>);</span><br><span class="line">        a = gg(a, b, c, d, x[i + <span class="number">13</span>], <span class="number">5</span>, <span class="number">-1444681467</span>);</span><br><span class="line">        d = gg(d, a, b, c, x[i + <span class="number">2</span>], <span class="number">9</span>, <span class="number">-51403784</span>);</span><br><span class="line">        c = gg(c, d, a, b, x[i + <span class="number">7</span>], <span class="number">14</span>, <span class="number">1735328473</span>);</span><br><span class="line">        b = gg(b, c, d, a, x[i + <span class="number">12</span>], <span class="number">20</span>, <span class="number">-1926607734</span>);</span><br><span class="line">        a = hh(a, b, c, d, x[i + <span class="number">5</span>], <span class="number">4</span>, <span class="number">-378558</span>);</span><br><span class="line">        d = hh(d, a, b, c, x[i + <span class="number">8</span>], <span class="number">11</span>, <span class="number">-2022574463</span>);</span><br><span class="line">        c = hh(c, d, a, b, x[i + <span class="number">11</span>], <span class="number">16</span>, <span class="number">1839030562</span>);</span><br><span class="line">        b = hh(b, c, d, a, x[i + <span class="number">14</span>], <span class="number">23</span>, <span class="number">-35309556</span>);</span><br><span class="line">        a = hh(a, b, c, d, x[i + <span class="number">1</span>], <span class="number">4</span>, <span class="number">-1530992060</span>);</span><br><span class="line">        d = hh(d, a, b, c, x[i + <span class="number">4</span>], <span class="number">11</span>, <span class="number">1272893353</span>);</span><br><span class="line">        c = hh(c, d, a, b, x[i + <span class="number">7</span>], <span class="number">16</span>, <span class="number">-155497632</span>);</span><br><span class="line">        b = hh(b, c, d, a, x[i + <span class="number">10</span>], <span class="number">23</span>, <span class="number">-1094730640</span>);</span><br><span class="line">        a = hh(a, b, c, d, x[i + <span class="number">13</span>], <span class="number">4</span>, <span class="number">681279174</span>);</span><br><span class="line">        d = hh(d, a, b, c, x[i], <span class="number">11</span>, <span class="number">-358537222</span>);</span><br><span class="line">        c = hh(c, d, a, b, x[i + <span class="number">3</span>], <span class="number">16</span>, <span class="number">-722521979</span>);</span><br><span class="line">        b = hh(b, c, d, a, x[i + <span class="number">6</span>], <span class="number">23</span>, <span class="number">76029189</span>);</span><br><span class="line">        a = hh(a, b, c, d, x[i + <span class="number">9</span>], <span class="number">4</span>, <span class="number">-640364487</span>);</span><br><span class="line">        d = hh(d, a, b, c, x[i + <span class="number">12</span>], <span class="number">11</span>, <span class="number">-421815835</span>);</span><br><span class="line">        c = hh(c, d, a, b, x[i + <span class="number">15</span>], <span class="number">16</span>, <span class="number">530742520</span>);</span><br><span class="line">        b = hh(b, c, d, a, x[i + <span class="number">2</span>], <span class="number">23</span>, <span class="number">-995338651</span>);</span><br><span class="line">        a = ii(a, b, c, d, x[i], <span class="number">6</span>, <span class="number">-198630844</span>);</span><br><span class="line">        d = ii(d, a, b, c, x[i + <span class="number">7</span>], <span class="number">10</span>, <span class="number">1126891415</span>);</span><br><span class="line">        c = ii(c, d, a, b, x[i + <span class="number">14</span>], <span class="number">15</span>, <span class="number">-1416354905</span>);</span><br><span class="line">        b = ii(b, c, d, a, x[i + <span class="number">5</span>], <span class="number">21</span>, <span class="number">-57434055</span>);</span><br><span class="line">        a = ii(a, b, c, d, x[i + <span class="number">12</span>], <span class="number">6</span>, <span class="number">1700485571</span>);</span><br><span class="line">        d = ii(d, a, b, c, x[i + <span class="number">3</span>], <span class="number">10</span>, <span class="number">-1894986606</span>);</span><br><span class="line">        c = ii(c, d, a, b, x[i + <span class="number">10</span>], <span class="number">15</span>, <span class="number">-1051523</span>);</span><br><span class="line">        b = ii(b, c, d, a, x[i + <span class="number">1</span>], <span class="number">21</span>, <span class="number">-2054922799</span>);</span><br><span class="line">        a = ii(a, b, c, d, x[i + <span class="number">8</span>], <span class="number">6</span>, <span class="number">1873313359</span>);</span><br><span class="line">        d = ii(d, a, b, c, x[i + <span class="number">15</span>], <span class="number">10</span>, <span class="number">-30611744</span>);</span><br><span class="line">        c = ii(c, d, a, b, x[i + <span class="number">6</span>], <span class="number">15</span>, <span class="number">-1560198380</span>);</span><br><span class="line">        b = ii(b, c, d, a, x[i + <span class="number">13</span>], <span class="number">21</span>, <span class="number">1309151649</span>);</span><br><span class="line">        a = ii(a, b, c, d, x[i + <span class="number">4</span>], <span class="number">6</span>, <span class="number">-145523070</span>);</span><br><span class="line">        d = ii(d, a, b, c, x[i + <span class="number">11</span>], <span class="number">10</span>, <span class="number">-1120210379</span>);</span><br><span class="line">        c = ii(c, d, a, b, x[i + <span class="number">2</span>], <span class="number">15</span>, <span class="number">718787259</span>);</span><br><span class="line">        b = ii(b, c, d, a, x[i + <span class="number">9</span>], <span class="number">21</span>, <span class="number">-343485551</span>);</span><br><span class="line">        a = safeAdd(a, olda);</span><br><span class="line">        b = safeAdd(b, oldb);</span><br><span class="line">        c = safeAdd(c, oldc);</span><br><span class="line">        d = safeAdd(d, oldd)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [a, b, c, d]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binl2rstr</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i;</span><br><span class="line">    <span class="keyword">var</span> output = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">var</span> length32 = input.length * <span class="number">32</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length32; i += <span class="number">8</span>) &#123;</span><br><span class="line">        output += <span class="built_in">String</span>.fromCharCode((input[i &gt;&gt; <span class="number">5</span>] &gt;&gt;&gt; (i % <span class="number">32</span>)) &amp; <span class="number">0xFF</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rstr2binl</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i;</span><br><span class="line">    <span class="keyword">var</span> output = [];</span><br><span class="line">    output[(input.length &gt;&gt; <span class="number">2</span>) - <span class="number">1</span>] = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; output.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">        output[i] = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> length8 = input.length * <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length8; i += <span class="number">8</span>) &#123;</span><br><span class="line">        output[i &gt;&gt; <span class="number">5</span>] |= (input.charCodeAt(i / <span class="number">8</span>) &amp; <span class="number">0xFF</span>) &lt;&lt; (i % <span class="number">32</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rstr</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> binl2rstr(binl(rstr2binl(s), s.length * <span class="number">8</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rstrHMAC</span>(<span class="params">key, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i;</span><br><span class="line">    <span class="keyword">var</span> bkey = rstr2binl(key);</span><br><span class="line">    <span class="keyword">var</span> ipad = [];</span><br><span class="line">    <span class="keyword">var</span> opad = [];</span><br><span class="line">    <span class="keyword">var</span> hash;</span><br><span class="line">    ipad[<span class="number">15</span>] = opad[<span class="number">15</span>] = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">if</span> (bkey.length &gt; <span class="number">16</span>) &#123;</span><br><span class="line">        bkey = binl(bkey, key.length * <span class="number">8</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">        ipad[i] = bkey[i] ^ <span class="number">0x36363636</span>;</span><br><span class="line">        opad[i] = bkey[i] ^ <span class="number">0x5C5C5C5C</span></span><br><span class="line">    &#125;</span><br><span class="line">    hash = binl(ipad.concat(rstr2binl(data)), <span class="number">512</span> + data.length * <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">return</span> binl2rstr(binl(opad.concat(hash), <span class="number">512</span> + <span class="number">128</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rstr2hex</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hexTab = <span class="string">'0123456789abcdef'</span>;</span><br><span class="line">    <span class="keyword">var</span> output = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">var</span> x;</span><br><span class="line">    <span class="keyword">var</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; input.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">        x = input.charCodeAt(i);</span><br><span class="line">        output += hexTab.charAt((x &gt;&gt;&gt; <span class="number">4</span>) &amp; <span class="number">0x0F</span>) + hexTab.charAt(x &amp; <span class="number">0x0F</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str2rstrUTF8</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">unescape</span>(<span class="built_in">encodeURIComponent</span>(input))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">raw</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> rstr(str2rstrUTF8(s))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hex</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> rstr2hex(raw(s))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uid</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> text = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">var</span> possible = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"</span>;</span><br><span class="line">    <span class="keyword">var</span> len = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        text += possible.charAt(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * possible.length))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> text</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">charRun</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    s = s.replace(<span class="regexp">/[a-zA-Z]/g</span>, <span class="string">'#'</span>);</span><br><span class="line">    <span class="keyword">var</span> arr = s.split(<span class="string">''</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] == <span class="string">'#'</span>) &#123;</span><br><span class="line">            arr[i] = uid()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr.join(<span class="string">''</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">anti</span>(<span class="params">string, key</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> estring = hex(string);</span><br><span class="line">    <span class="keyword">return</span> charRun(estring)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xredirect</span>(<span class="params">name, value, url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    date.setTime(date.getTime() + <span class="number">2592000000</span>);</span><br><span class="line">    <span class="keyword">var</span> expires = <span class="string">"; expires="</span> + date.toUTCString();</span><br><span class="line">    <span class="built_in">document</span>.cookie = name + <span class="string">"="</span> + value + expires + <span class="string">"; path=/"</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.cookie.indexOf(name) === <span class="number">-1</span> &amp;&amp; navigator.cookieEnabled) &#123;</span><br><span class="line">        alert(<span class="string">'请修改浏览器设置,允许cookie缓存'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (url == <span class="string">''</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> url = location.href;</span><br><span class="line">            <span class="keyword">if</span> (location.protocol != <span class="string">'https:'</span>) &#123;</span><br><span class="line">                url = <span class="string">'https:'</span> + <span class="built_in">window</span>.location.href.substring(<span class="built_in">window</span>.location.protocol.length)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (location.protocol != <span class="string">'https:'</span>) &#123;</span><br><span class="line">                url = <span class="string">'https:'</span> + url</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> ulen = url.indexOf(<span class="string">'#'</span>);</span><br><span class="line">        <span class="keyword">if</span> (ulen !== <span class="number">-1</span>) &#123;</span><br><span class="line">            url = url.substring(<span class="number">0</span>, ulen)</span><br><span class="line">        &#125;</span><br><span class="line">        location.replace(url)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(anti(<span class="string">'1AFJO04hvED0DuQk0vfc9VPPITrFcbOJ7EOP9opjc4k='</span>, <span class="string">'691898463814653675'</span>))</span><br></pre></td></tr></table></figure>

<p>至此，<strong><em>antipas</em></strong> 的值我们就获取到了</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>没什么难度，就是要对eval还原，另外chrome看不到响应时就试着用其他抓包工具或者接口测试工具调试下</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>JS逆向</category>
      </categories>
      <tags>
        <tag>JS逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>JS逆向学习-某游戏网站登陆</title>
    <url>/2020/06/11/article-14/</url>
    <content><![CDATA[<p>aHR0cDovLzk5NzE4aC5jb20vY24vcmVnaXN0ZXI=</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><img src="/2020/06/11/article-14/WX20200611-181630.png" alt></p>
<p>登陆时对密码进行了加密处理，打一个xhr断点，定位到了这里</p>
<p><img src="/2020/06/11/article-14/WX20200611-181835.png" alt></p>
<p>跟进 <strong><em>cryptStr</em></strong> 这个函数查看</p>
<p><img src="/2020/06/11/article-14/WX20200611-182047.png" alt></p>
<p>这里的处理是在DOM中增加了一个button，触发click后再将其删掉，通过事件监听发现了加密代码</p>
<p><img src="/2020/06/11/article-14/WX20200611-182300.png" alt></p>
<p><img src="/2020/06/11/article-14/WX20200611-182430.png" alt></p>
<p><img src="/2020/06/11/article-14/WX20200611-182544.png" alt></p>
<p>到这里就已经明确加密流程了，最外层是一个 <strong><em>AES</em></strong> 加密模式使用 <strong><em>ECB</em></strong> ，加密的 <strong><em>key</em></strong> 是 <strong><em>cookie</em></strong> 中的 <strong><em>web</em></strong> 和 <strong><em>randomYes</em></strong> 字符串拼接后使用 <strong><em>sdc</em></strong> 函数处理后的结果，经分析其实就是个 <strong><em>MD5</em></strong> 操作，最后将 <strong><em>AES</em></strong> 和结果和 <strong><em>randomYes</em></strong> 拼接返回。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>yysy很简单，值得注意的点是dom的事件监听。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>JS逆向</category>
      </categories>
      <tags>
        <tag>JS逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>AST学习资料收集</title>
    <url>/2020/06/16/article-15/</url>
    <content><![CDATA[<p>本系列为AST个人学习笔记，完整知识内容请关注知识星球 <a href="https://wx.zsxq.com/" target="_blank" rel="noopener">AST入门与实战</a> 和公众号 <a href>菜鸟学Python编程</a></p>
<p>1、AST在线解析网站</p>
<p><a href="https://astexplorer.net/" target="_blank" rel="noopener">原版</a>  <a href="https://blogz.gitee.io/ast/" target="_blank" rel="noopener">国内镜像</a></p>
<p>2、babel库官方文档</p>
<p><a href="https://babeljs.io/docs/en/" target="_blank" rel="noopener">官方学习文档</a></p>
<p>3、babel库 github地址</p>
<p><a href="https://github.com/babel/babel" target="_blank" rel="noopener">babel</a></p>
<p>4、babel库插件开发手册</p>
<p><a href="https://blog.csdn.net/weixin_33826609/article/details/93164633#toc-visitors" target="_blank" rel="noopener">插件手册</a></p>
<p>5、JavaScript在线学习网站</p>
<p><a href="https://wangdoc.com/javascript/index.html" target="_blank" rel="noopener">入门</a></p>
<p><a href="https://es6.ruanyifeng.com/" target="_blank" rel="noopener">es6教程</a></p>
<p><strong>JavaScript高级程序设计（第3版）</strong></p>
<p>6、查看JavaStript代码流程</p>
<p><a href="https://bogdan-lyashenko.github.io/js-code-to-svg-flowchart/docs/live-editor/index.html" target="_blank" rel="noopener">代码流程</a></p>
<p><a href="https://github.com/Bogdan-Lyashenko/js-code-to-svg-flowchart" target="_blank" rel="noopener">Github地址</a></p>
<p>7、AST入门网站</p>
<p><a href="https://github.com/yacan8/blog/blob/master/posts/JavaScript抽象语法树AST.md" target="_blank" rel="noopener">JavaScript抽象语法树AST</a></p>
<p>8、其他的干货文章</p>
<p><a href="https://github.com/babel/babylon/blob/master/ast/spec.md" target="_blank" rel="noopener"><strong>AS各个节点解释</strong></a></p>
<p><a href="http://www.alloyteam.com/2017/04/analysis-of-babel-babel-overview/" target="_blank" rel="noopener"><strong>简单剖析babel</strong></a></p>
<p><a href="https://fed.taobao.org/blog/taofed/do71ct/babel-plugins/" target="_blank" rel="noopener"><strong>淘系前端团队写的babel库相关</strong></a></p>
<p><a href="http://www.alloyteam.com/2016/05/babel-code-into-a-bird-like/" target="_blank" rel="noopener"><strong>babel到底将代码转换成了什么鸟样</strong></a></p>
<p>9、将代码转换成图片的网站</p>
<p><a href="https://carbon.now.sh/" target="_blank" rel="noopener">漂亮代码图片在线生成</a></p>
<p>10、查看AST结构图</p>
<p><a href="https://resources.jointjs.com/demos/rappid/apps/Ast/index.html" target="_blank" rel="noopener">AST结构图</a></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>AST</category>
      </categories>
      <tags>
        <tag>AST</tag>
        <tag>资料</tag>
      </tags>
  </entry>
  <entry>
    <title>AST学习-认识AST结构</title>
    <url>/2020/06/16/article-16/</url>
    <content><![CDATA[<p>环境：Mac  Node.js  babel</p>
<h2 id="AST基本结构"><a href="#AST基本结构" class="headerlink" title="AST基本结构"></a>AST基本结构</h2><h3 id="变量声明-VariableDeclaration"><a href="#变量声明-VariableDeclaration" class="headerlink" title="变量声明 VariableDeclaration"></a>变量声明 VariableDeclaration</h3><p><img src="/2020/06/16/article-16/WX20200616-172515.png" alt></p>
<h4 id="declarations-基本说明"><a href="#declarations-基本说明" class="headerlink" title="declarations 基本说明"></a>declarations 基本说明</h4><p>type 表示节点类型，变量声明就是：VariableDeclaration</p>
<p>start end 表示节点的起始位置</p>
<p>kind 变量声明关键字 分为 var let const</p>
<p><strong><em>declarations</em></strong> 需要重点看下</p>
<p><img src="/2020/06/16/article-16/WX20200616-173414.png" alt></p>
<p>declarations 是一个数组结构，里边存放了变量的声明信息，声明了几个变量，就有几个 <strong><em>VariableDeclarator</em></strong>，注意只要声明了就会有这个节点，不管是否赋值</p>
<p><img src="/2020/06/16/article-16/WX20200616-173817.png" alt></p>
<h4 id="VariableDeclarator-说明"><a href="#VariableDeclarator-说明" class="headerlink" title="VariableDeclarator 说明"></a>VariableDeclarator 说明</h4><p><img src="/2020/06/16/article-16/WX20200616-175248.png" alt></p>
<p>除了前面提到过的节点，还出现了两个新节点 <strong><em>id</em></strong> <strong><em>init</em></strong> </p>
<p><strong><em>id</em></strong> : 对变量名的描述，包含类型、位置和名称</p>
<p><strong><em>init</em></strong> : 表示变量初始化的情况，包含类型、位置和value</p>
<h3 id="其他类型表示"><a href="#其他类型表示" class="headerlink" title="其他类型表示"></a>其他类型表示</h3><p>1+2，b+c 这种是 BinaryExpression<br>函数为 FunctionExpression<br>对象 ObjectExpression<br>new Object() 为 NewExpression<br>[] 数组为 ArrayExpression<br>Math.sin() 为 CallExpression</p>
<h3 id="使用babel库操作AST"><a href="#使用babel库操作AST" class="headerlink" title="使用babel库操作AST"></a>使用babel库操作AST</h3><h4 id="打印整个AST"><a href="#打印整个AST" class="headerlink" title="打印整个AST"></a>打印整个AST</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 下面的导入不一定会全用，但是要知道</span></span><br><span class="line"><span class="comment">// 将 JS 源码转换成语法树的函数</span></span><br><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">"@babel/parser"</span>)</span><br><span class="line"><span class="comment">// 遍历 AST 的函数</span></span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">"@babel/traverse"</span>).default</span><br><span class="line"><span class="comment">// 操作节点的函数</span></span><br><span class="line"><span class="keyword">const</span> t = <span class="built_in">require</span>(<span class="string">"@babel/types"</span>)</span><br><span class="line"><span class="comment">// 将语法书转换成源代码的函数</span></span><br><span class="line"><span class="keyword">const</span> generator = <span class="built_in">require</span>(<span class="string">"@babel/generator"</span>).default</span><br><span class="line"><span class="comment">// 操作文件的函数</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> jscode = <span class="string">"var a = 123;"</span>;</span><br><span class="line"><span class="keyword">let</span> ast = parser.parse(jscode);</span><br><span class="line"></span><br><span class="line">fs.writeFile(<span class="string">'ast.json'</span>, <span class="built_in">JSON</span>.stringify(ast, <span class="literal">null</span>, <span class="string">'\t'</span>), (err)=&gt;&#123;&#125;);</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">"type"</span>: <span class="string">"File"</span>,</span><br><span class="line">	<span class="attr">"start"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="attr">"end"</span>: <span class="number">12</span>,</span><br><span class="line">	<span class="attr">"loc"</span>: &#123;</span><br><span class="line">		<span class="attr">"start"</span>: &#123;</span><br><span class="line">			<span class="attr">"line"</span>: <span class="number">1</span>,</span><br><span class="line">			<span class="attr">"column"</span>: <span class="number">0</span></span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="attr">"end"</span>: &#123;</span><br><span class="line">			<span class="attr">"line"</span>: <span class="number">1</span>,</span><br><span class="line">			<span class="attr">"column"</span>: <span class="number">12</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">"errors"</span>: [],</span><br><span class="line">	<span class="attr">"program"</span>: &#123;</span><br><span class="line">		<span class="attr">"type"</span>: <span class="string">"Program"</span>,</span><br><span class="line">		<span class="attr">"start"</span>: <span class="number">0</span>,</span><br><span class="line">		<span class="attr">"end"</span>: <span class="number">12</span>,</span><br><span class="line">		<span class="attr">"loc"</span>: &#123;</span><br><span class="line">			<span class="attr">"start"</span>: &#123;</span><br><span class="line">				<span class="attr">"line"</span>: <span class="number">1</span>,</span><br><span class="line">				<span class="attr">"column"</span>: <span class="number">0</span></span><br><span class="line">			&#125;,</span><br><span class="line">			<span class="attr">"end"</span>: &#123;</span><br><span class="line">				<span class="attr">"line"</span>: <span class="number">1</span>,</span><br><span class="line">				<span class="attr">"column"</span>: <span class="number">12</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="attr">"sourceType"</span>: <span class="string">"script"</span>,</span><br><span class="line">		<span class="attr">"interpreter"</span>: <span class="literal">null</span>,</span><br><span class="line">		<span class="attr">"body"</span>: [</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="attr">"type"</span>: <span class="string">"VariableDeclaration"</span>,</span><br><span class="line">				<span class="attr">"start"</span>: <span class="number">0</span>,</span><br><span class="line">				<span class="attr">"end"</span>: <span class="number">12</span>,</span><br><span class="line">				<span class="attr">"loc"</span>: &#123;</span><br><span class="line">					<span class="attr">"start"</span>: &#123;</span><br><span class="line">						<span class="attr">"line"</span>: <span class="number">1</span>,</span><br><span class="line">						<span class="attr">"column"</span>: <span class="number">0</span></span><br><span class="line">					&#125;,</span><br><span class="line">					<span class="attr">"end"</span>: &#123;</span><br><span class="line">						<span class="attr">"line"</span>: <span class="number">1</span>,</span><br><span class="line">						<span class="attr">"column"</span>: <span class="number">12</span></span><br><span class="line">					&#125;</span><br><span class="line">				&#125;,</span><br><span class="line">				<span class="attr">"declarations"</span>: [</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="attr">"type"</span>: <span class="string">"VariableDeclarator"</span>,</span><br><span class="line">						<span class="attr">"start"</span>: <span class="number">4</span>,</span><br><span class="line">						<span class="attr">"end"</span>: <span class="number">11</span>,</span><br><span class="line">						<span class="attr">"loc"</span>: &#123;</span><br><span class="line">							<span class="attr">"start"</span>: &#123;</span><br><span class="line">								<span class="attr">"line"</span>: <span class="number">1</span>,</span><br><span class="line">								<span class="attr">"column"</span>: <span class="number">4</span></span><br><span class="line">							&#125;,</span><br><span class="line">							<span class="attr">"end"</span>: &#123;</span><br><span class="line">								<span class="attr">"line"</span>: <span class="number">1</span>,</span><br><span class="line">								<span class="attr">"column"</span>: <span class="number">11</span></span><br><span class="line">							&#125;</span><br><span class="line">						&#125;,</span><br><span class="line">						<span class="attr">"id"</span>: &#123;</span><br><span class="line">							<span class="attr">"type"</span>: <span class="string">"Identifier"</span>,</span><br><span class="line">							<span class="attr">"start"</span>: <span class="number">4</span>,</span><br><span class="line">							<span class="attr">"end"</span>: <span class="number">5</span>,</span><br><span class="line">							<span class="attr">"loc"</span>: &#123;</span><br><span class="line">								<span class="attr">"start"</span>: &#123;</span><br><span class="line">									<span class="attr">"line"</span>: <span class="number">1</span>,</span><br><span class="line">									<span class="attr">"column"</span>: <span class="number">4</span></span><br><span class="line">								&#125;,</span><br><span class="line">								<span class="attr">"end"</span>: &#123;</span><br><span class="line">									<span class="attr">"line"</span>: <span class="number">1</span>,</span><br><span class="line">									<span class="attr">"column"</span>: <span class="number">5</span></span><br><span class="line">								&#125;,</span><br><span class="line">								<span class="attr">"identifierName"</span>: <span class="string">"a"</span></span><br><span class="line">							&#125;,</span><br><span class="line">							<span class="attr">"name"</span>: <span class="string">"a"</span></span><br><span class="line">						&#125;,</span><br><span class="line">						<span class="attr">"init"</span>: &#123;</span><br><span class="line">							<span class="attr">"type"</span>: <span class="string">"NumericLiteral"</span>,</span><br><span class="line">							<span class="attr">"start"</span>: <span class="number">8</span>,</span><br><span class="line">							<span class="attr">"end"</span>: <span class="number">11</span>,</span><br><span class="line">							<span class="attr">"loc"</span>: &#123;</span><br><span class="line">								<span class="attr">"start"</span>: &#123;</span><br><span class="line">									<span class="attr">"line"</span>: <span class="number">1</span>,</span><br><span class="line">									<span class="attr">"column"</span>: <span class="number">8</span></span><br><span class="line">								&#125;,</span><br><span class="line">								<span class="attr">"end"</span>: &#123;</span><br><span class="line">									<span class="attr">"line"</span>: <span class="number">1</span>,</span><br><span class="line">									<span class="attr">"column"</span>: <span class="number">11</span></span><br><span class="line">								&#125;</span><br><span class="line">							&#125;,</span><br><span class="line">							<span class="attr">"extra"</span>: &#123;</span><br><span class="line">								<span class="attr">"rawValue"</span>: <span class="number">123</span>,</span><br><span class="line">								<span class="attr">"raw"</span>: <span class="string">"123"</span></span><br><span class="line">							&#125;,</span><br><span class="line">							<span class="attr">"value"</span>: <span class="number">123</span></span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				],</span><br><span class="line">				<span class="attr">"kind"</span>: <span class="string">"var"</span></span><br><span class="line">			&#125;</span><br><span class="line">		],</span><br><span class="line">		<span class="attr">"directives"</span>: []</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">"comments"</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="访问AST节点内容"><a href="#访问AST节点内容" class="headerlink" title="访问AST节点内容"></a>访问AST节点内容</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 访问编译后的ast结构</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">"@babel/parser"</span>);</span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">"@babel/traverse"</span>).default;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> js_code = <span class="string">"var a = 123;function b()&#123;debugger;&#125;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const vistor = &#123;</span></span><br><span class="line"><span class="comment">//     VariableDeclaration(path) &#123;</span></span><br><span class="line"><span class="comment">//         console.log(path.type);</span></span><br><span class="line"><span class="comment">//         console.log(path.toString());</span></span><br><span class="line"><span class="comment">//     &#125;,</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多路径查看，使用 "|"</span></span><br><span class="line"><span class="keyword">const</span> vistor = &#123;</span><br><span class="line">    <span class="string">"VariableDeclaration|VariableDeclarator"</span>(path)&#123;</span><br><span class="line">    <span class="comment">// "FunctionDeclaration|BlockStatement"(path)&#123;</span></span><br><span class="line">        <span class="built_in">console</span>.log(path.type);</span><br><span class="line">        <span class="built_in">console</span>.log(path.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ast = parser.parse(js_code);</span><br><span class="line"></span><br><span class="line">traverse(ast, vistor)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>技术</category>
        <category>AST</category>
      </categories>
      <tags>
        <tag>AST</tag>
      </tags>
  </entry>
  <entry>
    <title>AST学习-认识path和node</title>
    <url>/2020/06/16/article-17/</url>
    <content><![CDATA[<h3 id="path-路径-常用操作"><a href="#path-路径-常用操作" class="headerlink" title="path(路径)常用操作"></a>path(路径)常用操作</h3><h4 id="获取当前路径所对应的源代码"><a href="#获取当前路径所对应的源代码" class="headerlink" title="获取当前路径所对应的源代码"></a>获取当前路径所对应的源代码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用toString()</span></span><br><span class="line"><span class="keyword">const</span> vistor = &#123;</span><br><span class="line">        VariableDeclaration(path) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(path.toString())</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="判断path是什么type"><a href="#判断path是什么type" class="headerlink" title="判断path是什么type"></a>判断path是什么type</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 path.isXXX()</span></span><br><span class="line"><span class="keyword">const</span> vistor = &#123;</span><br><span class="line">   VariableDeclarator(path)&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(path.isVariableDeclarator())</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="获取path的上一级路径"><a href="#获取path的上一级路径" class="headerlink" title="获取path的上一级路径"></a>获取path的上一级路径</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> parent = path.parentPath;</span><br><span class="line"><span class="built_in">console</span>.log(parent.node)</span><br></pre></td></tr></table></figure>



<h4 id="获取path的子路径"><a href="#获取path的子路径" class="headerlink" title="获取path的子路径"></a>获取path的子路径</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 get()</span></span><br><span class="line">path.get(<span class="string">'id'</span>);</span><br></pre></td></tr></table></figure>



<h4 id="删除path"><a href="#删除path" class="headerlink" title="删除path"></a>删除path</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// remove()</span></span><br><span class="line">path.remove()</span><br></pre></td></tr></table></figure>



<h4 id="替换path"><a href="#替换path" class="headerlink" title="替换path"></a>替换path</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> t = <span class="built_in">require</span>(<span class="string">"@babel/types"</span>)</span><br><span class="line"><span class="comment">// 单路径可以使用replaceWith方法，多路径则使用replaceWithMultiple方法</span></span><br><span class="line"><span class="keyword">const</span> vistor = &#123;</span><br><span class="line">    VariableDeclarator(path)&#123;</span><br><span class="line">        <span class="comment">// 替换时注意路径结构</span></span><br><span class="line">        path.get(<span class="string">'init'</span>).replaceWith(t.NumericLiteral(<span class="number">996</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="path源码"><a href="#path源码" class="headerlink" title="path源码"></a>path源码</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@babel\traverse\lib\path</span><br></pre></td></tr></table></figure>



<h3 id="node-节点-常用操作"><a href="#node-节点-常用操作" class="headerlink" title="node(节点)常用操作"></a>node(节点)常用操作</h3><h4 id="获取当前节点所对应的源代码"><a href="#获取当前节点所对应的源代码" class="headerlink" title="获取当前节点所对应的源代码"></a>获取当前节点所对应的源代码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> generator = <span class="built_in">require</span>(<span class="string">"@babel/generator"</span>).default;</span><br><span class="line"><span class="keyword">let</span> &#123;code&#125; = generator(node);</span><br></pre></td></tr></table></figure>



<h4 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> path.node.init</span><br></pre></td></tr></table></figure>



<h4 id="访问子节点"><a href="#访问子节点" class="headerlink" title="访问子节点"></a>访问子节点</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vistor = &#123;</span><br><span class="line">    VariableDeclarator(path)&#123;</span><br><span class="line">        <span class="comment">// 打印节点初始化的值</span></span><br><span class="line">        <span class="built_in">console</span>.log(path.node.init.value)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 与 JSON 之间转换</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(path.node))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ast = parser.parse(jscode);</span><br><span class="line">traverse(ast, vistor)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
        <category>AST</category>
      </categories>
      <tags>
        <tag>AST</tag>
      </tags>
  </entry>
  <entry>
    <title>AST学习-十六进制还原十进制</title>
    <url>/2020/06/17/article-18/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">"\x48\x65\x6c\x6c\x6f\x2c\x4e\x69\x67\x68\x74\x54\x65\x61\x6d\x21"</span>;</span><br></pre></td></tr></table></figure>



<h4 id="AST-TREE分析"><a href="#AST-TREE分析" class="headerlink" title="AST-TREE分析"></a>AST-TREE分析</h4><p><img src="/2020/06/17/article-18/WX20200617-115051.png" alt></p>
<p>由上图可知影响结果的节点是 <strong><em>extra.raw</em></strong> ，接下来对这个节点进行操作</p>
<h4 id="方式一：遍历VariableDeclarator下init节点，符合条件后将extra-raw重新赋值。"><a href="#方式一：遍历VariableDeclarator下init节点，符合条件后将extra-raw重新赋值。" class="headerlink" title="方式一：遍历VariableDeclarator下init节点，符合条件后将extra.raw重新赋值。"></a>方式一：遍历VariableDeclarator下init节点，符合条件后将extra.raw重新赋值。</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vistor = &#123;</span><br><span class="line">    VariableDeclarator(path)&#123;</span><br><span class="line">        <span class="keyword">const</span> init = path.get(<span class="string">'init'</span>);</span><br><span class="line">        <span class="keyword">if</span> (!init.isStringLiteral()) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">const</span> node = init.node;</span><br><span class="line">        <span class="keyword">let</span> &#123;value, extra&#125; = node;</span><br><span class="line">        extra.raw = <span class="string">'"'</span> + value + <span class="string">':)"'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="方式二：直接遍历type为StringLiteral的路径。"><a href="#方式二：直接遍历type为StringLiteral的路径。" class="headerlink" title="方式二：直接遍历type为StringLiteral的路径。"></a>方式二：直接遍历type为StringLiteral的路径。</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vistor = &#123;</span><br><span class="line">    StringLiteral(path)&#123;</span><br><span class="line">        <span class="keyword">let</span> &#123;value, extra&#125; = path.node;</span><br><span class="line">        extra.raw = <span class="string">'"'</span> + value + <span class="string">':)"'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="方式三：使用新建节点替换"><a href="#方式三：使用新建节点替换" class="headerlink" title="方式三：使用新建节点替换"></a>方式三：使用新建节点替换</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vistor = &#123;</span><br><span class="line">    StringLiteral(path)&#123;</span><br><span class="line">        <span class="keyword">let</span> &#123;value&#125; = path.node;</span><br><span class="line">        path.replaceWith(t.StringLiteral(value + <span class="string">":("</span>));</span><br><span class="line">        <span class="comment">// 因为新生成的节点类型也是StringLiteral，所以会一直遍历下去，最终导致栈溢出</span></span><br><span class="line">        <span class="comment">// 解决方案为使用path.stop()方法，让其遍历后立即停止。</span></span><br><span class="line">        path.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="方式四：删除raw节点"><a href="#方式四：删除raw节点" class="headerlink" title="方式四：删除raw节点"></a>方式四：删除raw节点</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vistor = &#123;</span><br><span class="line">    StringLiteral(path)&#123;</span><br><span class="line">        <span class="keyword">let</span> &#123;extra&#125; = path.node;</span><br><span class="line">        <span class="keyword">delete</span> extra.raw;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="通用步骤-十六进制数值-字符串还原十进制"><a href="#通用步骤-十六进制数值-字符串还原十进制" class="headerlink" title="通用步骤 (十六进制数值/字符串还原十进制)"></a>通用步骤 (十六进制数值/字符串还原十进制)</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vistor = &#123;</span><br><span class="line">    <span class="string">"StringLiteral|NumericLiteral"</span>(path)&#123;</span><br><span class="line">        <span class="comment">// 删除extra节点</span></span><br><span class="line">        <span class="keyword">delete</span> path.node.extra</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
        <category>AST</category>
      </categories>
      <tags>
        <tag>AST</tag>
      </tags>
  </entry>
  <entry>
    <title>AST学习-插入节点</title>
    <url>/2020/06/17/article-19/</url>
    <content><![CDATA[<h3 id="变量后面插入一个未被初始化的变量"><a href="#变量后面插入一个未被初始化的变量" class="headerlink" title="变量后面插入一个未被初始化的变量"></a>变量后面插入一个未被初始化的变量</h3><p>示例代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">996</span>;</span><br></pre></td></tr></table></figure>

<h4 id="新构造一个-Identifier-类型的节点，然后直接插入"><a href="#新构造一个-Identifier-类型的节点，然后直接插入" class="headerlink" title="新构造一个 Identifier 类型的节点，然后直接插入"></a>新构造一个 <strong>Identifier</strong> 类型的节点，然后直接插入</h4><p>遍历 <strong><em>VariableDeclarator</em></strong> 节点</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vistor = &#123;</span><br><span class="line">    VariableDeclarator(path)&#123;</span><br><span class="line">        path.insertAfter(t.Identifier(<span class="string">'b'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看输出结果</p>
<p><img src="/2020/06/17/article-19/WX20200617-144220.png" alt></p>
<h4 id="使用ExpressionStatement表达式语句"><a href="#使用ExpressionStatement表达式语句" class="headerlink" title="使用ExpressionStatement表达式语句"></a>使用ExpressionStatement表达式语句</h4><p>遍历 <strong><em>VariableDeclaration</em></strong> 节点</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// var a = 996;b = 250;</span></span><br><span class="line"><span class="keyword">const</span> vistor = &#123;</span><br><span class="line">    VariableDeclaration(path)&#123;</span><br><span class="line">        <span class="keyword">const</span> operator = <span class="string">"="</span>;</span><br><span class="line">        <span class="keyword">const</span> left = t.Identifier(<span class="string">'var b'</span>);</span><br><span class="line">        <span class="keyword">const</span> right = t.NumericLiteral(<span class="number">250</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> new_assign = t.AssignmentExpression(operator, left, right);</span><br><span class="line">        <span class="keyword">const</span> new_express = t.ExpressionStatement(new_assign);</span><br><span class="line"></span><br><span class="line">        path.insertAfter(new_express);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看结果</p>
<p><img src="/2020/06/17/article-19/WX20200617-153708.png" alt></p>
<h4 id="使用VariableDeclaration表达式语句"><a href="#使用VariableDeclaration表达式语句" class="headerlink" title="使用VariableDeclaration表达式语句"></a>使用VariableDeclaration表达式语句</h4><p>遍历 <strong><em>VariableDeclaration</em></strong> 节点</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// var a = 996;var b = 250;</span></span><br><span class="line"><span class="keyword">const</span> vistor = &#123;</span><br><span class="line">    VariableDeclaration(path)&#123;</span><br><span class="line">        <span class="keyword">const</span> id = t.Identifier(<span class="string">'b'</span>);</span><br><span class="line">        <span class="keyword">const</span> init = t.NumericLiteral(<span class="number">250</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> new_variable = t.VariableDeclarator(id, init)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> kind = <span class="string">'var'</span>;</span><br><span class="line">        <span class="keyword">const</span> new_variable_express = t.VariableDeclaration(kind, <span class="built_in">Array</span>(new_variable))</span><br><span class="line">        path.insertAfter(new_variable_express);</span><br><span class="line">        path.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看结果</p>
<p><img src="/2020/06/17/article-19/WX20200617-144713.png" alt></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>AST</category>
      </categories>
      <tags>
        <tag>AST</tag>
      </tags>
  </entry>
  <entry>
    <title>AST学习-拆分一个Literal类型的节点</title>
    <url>/2020/06/17/article-20/</url>
    <content><![CDATA[<h3 id="拆分NumericLiteral节点类型"><a href="#拆分NumericLiteral节点类型" class="headerlink" title="拆分NumericLiteral节点类型"></a>拆分NumericLiteral节点类型</h3><p>示例代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">12345678</span>;</span><br></pre></td></tr></table></figure>

<h4 id="了解异或操作"><a href="#了解异或操作" class="headerlink" title="了解异或操作"></a>了解异或操作</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># 生成随机八位负数</span><br><span class="line"><span class="keyword">const</span> first = <span class="number">0</span> - <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10000000</span> + <span class="number">10000000</span>)</span><br><span class="line"># 与a做异或操作</span><br><span class="line"><span class="keyword">const</span> second = a ^ first;</span><br><span class="line"># 将first 与 second 进行异或操作</span><br><span class="line"><span class="keyword">const</span> res = first ^ second</span><br><span class="line">&gt;&gt;&gt;<span class="number">12345678</span></span><br></pre></td></tr></table></figure>

<p>可以发现输出结果为 <strong><em>12345678</em></strong>,  <strong><em>res = first ^ second = first ^ first ^ a = 0 ^ a = a</em></strong></p>
<p>了解了这个概念就可以在 AST 中实现了</p>
<h4 id="在-AST-中实现"><a href="#在-AST-中实现" class="headerlink" title="在 AST 中实现"></a>在 AST 中实现</h4><p><img src="/2020/06/17/article-20/WX20200617-164925.png" alt></p>
<p>通过 AST-TREE查看可知异或表达式属于 <strong><em>BinaryExpression</em></strong> 节点，所以我们需要构造这个节点</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> t = <span class="built_in">require</span>(<span class="string">"@babel/types"</span>)</span><br><span class="line">t.BinaryExpression(<span class="string">'^'</span>, t.NumericLiteral(first), t.NumericLiteral(second))</span><br></pre></td></tr></table></figure>

<p>然后使用该节点替换原来的 <strong><em>NumericLiteral</em></strong> 节点就好了，代码如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vistor = &#123;</span><br><span class="line">    NumericLiteral(path)&#123;</span><br><span class="line">        <span class="keyword">const</span> node = path.node;</span><br><span class="line">        <span class="keyword">const</span> value = node.value;</span><br><span class="line">        <span class="keyword">const</span> first = <span class="number">0</span> - <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10000000</span> + <span class="number">10000000</span>);</span><br><span class="line">        <span class="keyword">const</span> second = value ^ first;</span><br><span class="line"></span><br><span class="line">        path.replaceWith(t.BinaryExpression(<span class="string">'^'</span>, t.NumericLiteral(first), t.NumericLiteral(second)));</span><br><span class="line">        path.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看结果</p>
<p><img src="/2020/06/17/article-20/WX20200617-165333.png" alt></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>AST</category>
      </categories>
      <tags>
        <tag>AST</tag>
      </tags>
  </entry>
  <entry>
    <title>AST学习-合并Literal类型的计算表达式</title>
    <url>/2020/06/18/article-21/</url>
    <content><![CDATA[<p>将如下示例代码进行合并</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = !![], b = <span class="string">'Hey '</span> + <span class="string">'Rach'</span> + <span class="string">'!'</span>,c = <span class="number">8</span> + <span class="number">3</span> * <span class="number">40</span>,d = <span class="built_in">Math</span>.abs(<span class="number">-911</span>) % <span class="number">19</span>,e = <span class="literal">true</span> ? <span class="number">996</span>:<span class="number">250</span>;</span><br></pre></td></tr></table></figure>

<h3 id="使用babel库中的evaluate方法"><a href="#使用babel库中的evaluate方法" class="headerlink" title="使用babel库中的evaluate方法"></a>使用babel库中的evaluate方法</h3><p>源代码路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node_modules/@babel/traverse/lib/path/evaluation.js</span><br></pre></td></tr></table></figure>

<p>查看 AST-Tree </p>
<p><img src="/2020/06/18/article-21/WX20200618-115653.png" alt></p>
<p>发现这五个变量的初始化节点类型有三种 <strong><em>UnaryExpression</em></strong>, <strong><em>BinaryExpression</em></strong>, <strong><em>ConditionalExpression</em></strong></p>
<p>然后通过代码遍历查看结果</p>
<h4 id="优先顶层遍历"><a href="#优先顶层遍历" class="headerlink" title="优先顶层遍历"></a>优先顶层遍历</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 优先顶层遍历</span></span><br><span class="line"><span class="keyword">const</span> vistor = &#123;</span><br><span class="line">    <span class="string">"UnaryExpression|BinaryExpression|ConditionalExpression"</span>(path)&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;value&#125; = path.evaluate();</span><br><span class="line">        <span class="built_in">console</span>.log(path.toString(), value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看结果</p>
<p><img src="/2020/06/18/article-21/WX20200618-120552.png" alt></p>
<p>这里出现了结果，但是遍历是从顶层开始的</p>
<h4 id="优先底层遍历"><a href="#优先底层遍历" class="headerlink" title="优先底层遍历"></a>优先底层遍历</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 从底层遍历</span></span><br><span class="line"><span class="keyword">const</span> vistor = &#123;</span><br><span class="line">    <span class="string">"UnaryExpression|BinaryExpression|ConditionalExpression"</span>:&#123;</span><br><span class="line">        exit: <span class="function"><span class="keyword">function</span>(<span class="params">path</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;value&#125; = path.evaluate();</span><br><span class="line">            <span class="built_in">console</span>.log(path.toString(), value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看结果</p>
<p><img src="/2020/06/18/article-21/WX20200618-120824.png" alt></p>
<p><strong>enter：默认值，顶层优先</strong></p>
<p><strong>exit：底层优先</strong></p>
<h4 id="通用完整代码"><a href="#通用完整代码" class="headerlink" title="通用完整代码"></a>通用完整代码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将 JS 源码转换成语法树的函数</span></span><br><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">"@babel/parser"</span>)</span><br><span class="line"><span class="comment">// 遍历 AST 的函数</span></span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">"@babel/traverse"</span>).default</span><br><span class="line"><span class="comment">// 操作节点的函数</span></span><br><span class="line"><span class="keyword">const</span> t = <span class="built_in">require</span>(<span class="string">"@babel/types"</span>)</span><br><span class="line"><span class="comment">// 将语法书转换成源代码的函数</span></span><br><span class="line"><span class="keyword">const</span> generator = <span class="built_in">require</span>(<span class="string">"@babel/generator"</span>).default</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> jscode = <span class="string">"var a = !![], b = 'Hey ' + 'Rach' + '!',c = 8 + 3 * 40,d = Math.abs(-911) % 19,e = true ? 996:250;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据value类型替换相对应节点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PathToLiteral</span>(<span class="params">path, value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="keyword">typeof</span> value) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"boolean"</span>:</span><br><span class="line">            path.replaceWith(t.BooleanLiteral(value));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"string"</span>:</span><br><span class="line">            path.replaceWith(t.StringLiteral(value));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"number"</span>:</span><br><span class="line">            path.replaceWith(t.NumericLiteral(value));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行替换入口函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">do_replace</span>(<span class="params">path</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;value&#125; = path.evaluate();</span><br><span class="line">    PathToLiteral(path, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意这里使用enter而非exit</span></span><br><span class="line"><span class="keyword">const</span> vistor = &#123;</span><br><span class="line">    <span class="string">"UnaryExpression|BinaryExpression|ConditionalExpression"</span>:&#123;</span><br><span class="line">        enter: [do_replace]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ast = parser.parse(jscode);</span><br><span class="line">traverse(ast, vistor)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;code&#125; = generator(ast)</span><br><span class="line"><span class="built_in">console</span>.log(code)</span><br></pre></td></tr></table></figure>

<p>查看结果</p>
<p><img src="/2020/06/18/article-21/WX20200618-121458.png" alt></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>尽量多阅读源码，应有尽有。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>AST</category>
      </categories>
      <tags>
        <tag>AST</tag>
      </tags>
  </entry>
  <entry>
    <title>AST学习-将 BinaryExpression 类型转换为 CallExpression 类型</title>
    <url>/2020/06/18/article-22/</url>
    <content><![CDATA[<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">996</span> | <span class="number">250</span>;</span><br></pre></td></tr></table></figure>

<p>转换为</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span> (<span class="params">s, h</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> s | h;</span><br><span class="line">&#125;(<span class="number">996</span>, <span class="number">250</span>);</span><br></pre></td></tr></table></figure>

<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><img src="/2020/06/18/article-22/WX20200618-154437.png" alt></p>
<p>对比发现差别在于 <strong><em>VariableDeclarator</em></strong> 节点的初始化中，所以转换思路就是将原来的 <strong><em>BinaryExpression</em></strong> 节点替换为 <strong><em>CallExpression</em></strong> 节点</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="修改BinaryExpression节点"><a href="#修改BinaryExpression节点" class="headerlink" title="修改BinaryExpression节点"></a>修改BinaryExpression节点</h4><p>代码如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将 JS 源码转换成语法树的函数</span></span><br><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">"@babel/parser"</span>)</span><br><span class="line"><span class="comment">// 遍历 AST 的函数</span></span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">"@babel/traverse"</span>).default</span><br><span class="line"><span class="comment">// 操作节点的函数</span></span><br><span class="line"><span class="keyword">const</span> t = <span class="built_in">require</span>(<span class="string">"@babel/types"</span>)</span><br><span class="line"><span class="comment">// 将语法书转换成源代码的函数</span></span><br><span class="line"><span class="keyword">const</span> generator = <span class="built_in">require</span>(<span class="string">"@babel/generator"</span>).default</span><br><span class="line"><span class="comment">// 操作文件的函数</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>)</span><br><span class="line"></span><br><span class="line">jscode = <span class="string">"var a = 996 | 250;"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binary2func</span>(<span class="params">path</span>)</span>&#123;</span><br><span class="line">    init_path = path.get(<span class="string">'init'</span>);</span><br><span class="line">    <span class="keyword">if</span> (!init_path.isBinaryExpression) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将type改为 CallExpression</span></span><br><span class="line">    init_path.node.type = <span class="string">"CallExpression"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加 arguments 节点</span></span><br><span class="line">    <span class="keyword">let</span> &#123;operator, left, right&#125; = init_path.node;</span><br><span class="line">    init_path.node.arguments = [left, right];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加 callee 节点</span></span><br><span class="line">    <span class="comment">// 先构造 params</span></span><br><span class="line">    <span class="keyword">let</span> s = t.Identifier(<span class="string">'s'</span>);</span><br><span class="line">    <span class="keyword">let</span> h = t.Identifier(<span class="string">'h'</span>);</span><br><span class="line">    <span class="keyword">let</span> params = [s, h];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造 BlockStatement-&gt;ReturnStatement-&gt;BinaryExpression</span></span><br><span class="line">    <span class="keyword">let</span> binaryExpress = t.BinaryExpression(operator, s, h);</span><br><span class="line">    <span class="keyword">let</span> returnStmt = t.ReturnStatement(binaryExpress);</span><br><span class="line">    <span class="keyword">let</span> body = t.BlockStatement([returnStmt]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> id = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">const</span> fuuncExpress = t.FunctionExpression(id, params, body);</span><br><span class="line"></span><br><span class="line">    init_path.node.callee = fuuncExpress;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vistor = &#123;</span><br><span class="line">    VariableDeclarator:&#123;</span><br><span class="line">        enter: [binary2func]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ast = parser.parse(jscode);</span><br><span class="line">traverse(ast, vistor)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;code&#125; = generator(ast);</span><br><span class="line"><span class="built_in">console</span>.log(code)</span><br></pre></td></tr></table></figure>



<h4 id="构造-CallExpression-替换-BinaryExpression"><a href="#构造-CallExpression-替换-BinaryExpression" class="headerlink" title="构造 CallExpression 替换 BinaryExpression"></a>构造 CallExpression 替换 BinaryExpression</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将 JS 源码转换成语法树的函数</span></span><br><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">"@babel/parser"</span>)</span><br><span class="line"><span class="comment">// 遍历 AST 的函数</span></span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">"@babel/traverse"</span>).default</span><br><span class="line"><span class="comment">// 操作节点的函数</span></span><br><span class="line"><span class="keyword">const</span> t = <span class="built_in">require</span>(<span class="string">"@babel/types"</span>)</span><br><span class="line"><span class="comment">// 将语法书转换成源代码的函数</span></span><br><span class="line"><span class="keyword">const</span> generator = <span class="built_in">require</span>(<span class="string">"@babel/generator"</span>).default</span><br><span class="line"><span class="comment">// 操作文件的函数</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>)</span><br><span class="line"></span><br><span class="line">jscode = <span class="string">"var a = 996 | 250;"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binary2func</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line">    init_path = path.get(<span class="string">'init'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!init_path.isBinaryExpression()) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> id = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> &#123;operator, left, right&#125; = init_path.node;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造 arguments 节点</span></span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">arguments</span> = [left, right];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造 FunctionExpression 节点</span></span><br><span class="line">    <span class="keyword">let</span> s = t.Identifier(<span class="string">'s'</span>);</span><br><span class="line">    <span class="keyword">let</span> h = t.Identifier(<span class="string">'h'</span>);</span><br><span class="line">    <span class="keyword">let</span> params = [s, h]</span><br><span class="line">    <span class="keyword">let</span> binaryExpress = t.BinaryExpression(operator, s, h);</span><br><span class="line">    <span class="keyword">let</span> returnStmt = t.ReturnStatement(binaryExpress);</span><br><span class="line">    <span class="keyword">let</span> blockStmt = t.BlockStatement([returnStmt]);</span><br><span class="line">    <span class="keyword">const</span> funcExpress = t.FunctionExpression(id, params,blockStmt)</span><br><span class="line"></span><br><span class="line">    init_path.replaceWith(t.CallExpression(funcExpress, <span class="built_in">arguments</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vistor = &#123;</span><br><span class="line">    VariableDeclarator:&#123;</span><br><span class="line">        enter: [binary2func]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ast = parser.parse(jscode);</span><br><span class="line">traverse(ast, vistor)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;code&#125; = generator(ast);</span><br><span class="line"><span class="built_in">console</span>.log(code)</span><br></pre></td></tr></table></figure>

<p>打印结果</p>
<p><img src="/2020/06/18/article-22/WX20200618-155056.png" alt></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>注意本文中节点的修改和替换操作都是由底层向顶层的。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>AST</category>
      </categories>
      <tags>
        <tag>AST</tag>
      </tags>
  </entry>
  <entry>
    <title>AST学习-还原简单的 CallExpression 类型</title>
    <url>/2020/06/19/article-23/</url>
    <content><![CDATA[<h4 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Xor = <span class="function"><span class="keyword">function</span> (<span class="params">p,q</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> p ^ q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = Xor(<span class="number">996</span>,<span class="number">250</span>);</span><br></pre></td></tr></table></figure>

<p>转化为如下形式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Xor = <span class="function"><span class="keyword">function</span> (<span class="params">p,q</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> p ^ q;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">996</span> ^ <span class="number">250</span>;</span><br></pre></td></tr></table></figure>

<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>遍历 <strong><em>VariableDeclarator</em></strong> 路径，对参数及函数主体进行判断校验，筛选出符合条件的节点</p>
<p>遍历函数定义作用域，当 <strong><em>CallExpression</em></strong> 与函数名相同时执行替换</p>
<h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将 JS 源码转换成语法树的函数</span></span><br><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">"@babel/parser"</span>)</span><br><span class="line"><span class="comment">// 遍历 AST 的函数</span></span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">"@babel/traverse"</span>).default</span><br><span class="line"><span class="comment">// 操作节点的函数</span></span><br><span class="line"><span class="keyword">const</span> t = <span class="built_in">require</span>(<span class="string">"@babel/types"</span>)</span><br><span class="line"><span class="comment">// 将语法书转换成源代码的函数</span></span><br><span class="line"><span class="keyword">const</span> generator = <span class="built_in">require</span>(<span class="string">"@babel/generator"</span>).default</span><br><span class="line"></span><br><span class="line">jscode = <span class="string">"var Xor = function (p,q)\n"</span> +</span><br><span class="line">    <span class="string">"&#123;\n"</span> +</span><br><span class="line">    <span class="string">"  return p ^ q;\n"</span> +</span><br><span class="line">    <span class="string">"&#125;\n"</span> +</span><br><span class="line">    <span class="string">"\n"</span> +</span><br><span class="line">    <span class="string">"let a = Xor(996,250);"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">call2express</span>(<span class="params">path</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 获取函数名及初始化节点</span></span><br><span class="line">    <span class="keyword">const</span> &#123;init, id&#125; = path.node;</span><br><span class="line">    <span class="keyword">const</span> name = id.name;</span><br><span class="line">    <span class="keyword">const</span> params = init.params;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断行参是否为两个</span></span><br><span class="line">    <span class="keyword">if</span> (!params.length === <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取行参名</span></span><br><span class="line">    <span class="keyword">let</span> first_name = params[<span class="number">0</span>].name;</span><br><span class="line">    <span class="keyword">let</span> second_name = params[<span class="number">1</span>].name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> func_body = init.body</span><br><span class="line">    <span class="comment">// 校验函数主体内容</span></span><br><span class="line">    <span class="keyword">if</span> (!func_body.body || !func_body.body.length === <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> return_body = func_body.body[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="built_in">arguments</span> = return_body.argument;</span><br><span class="line">    <span class="keyword">let</span> &#123;operator, left, right&#125; = <span class="built_in">arguments</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断ReturnStatement节点内容</span></span><br><span class="line">    <span class="keyword">if</span> (!t.isReturnStatement(return_body) || !t.isBinaryExpression(<span class="built_in">arguments</span>)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断return语句和行参是否一致</span></span><br><span class="line">    <span class="keyword">if</span> (!t.isIdentifier(left, &#123;<span class="attr">name</span>:first_name&#125;) || !t.isIdentifier(right, &#123;<span class="attr">name</span>:second_name&#125;)) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 校验完毕，开始执行替换</span></span><br><span class="line">    <span class="comment">// 获取函数定义作用域</span></span><br><span class="line">    <span class="keyword">const</span> scope = path.scope;</span><br><span class="line"></span><br><span class="line">    traverse(scope.block, &#123;</span><br><span class="line">        <span class="comment">// CallExpression: function (_path) &#123;</span></span><br><span class="line">        <span class="comment">//     node = _path.node;</span></span><br><span class="line">        <span class="comment">//     if (!t.isIdentifier(node.callee, &#123;name:name&#125;)) return;</span></span><br><span class="line">        <span class="comment">//     args = node.arguments;</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">//     _path.replaceWith(t.BinaryExpression(operator, args[0], args[1]));</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        CallExpression:&#123;</span><br><span class="line">            enter: [</span><br><span class="line">                <span class="function"><span class="keyword">function</span> (<span class="params">_path</span>) </span>&#123;</span><br><span class="line">                    node = _path.node;</span><br><span class="line">                    <span class="keyword">if</span> (!t.isIdentifier(node.callee, &#123;<span class="attr">name</span>:name&#125;)) <span class="keyword">return</span>;</span><br><span class="line">                    args = node.arguments;</span><br><span class="line"></span><br><span class="line">                    _path.replaceWith(t.BinaryExpression(operator, args[<span class="number">0</span>], args[<span class="number">1</span>]));</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vistor = &#123;</span><br><span class="line">    VariableDeclarator(path)&#123;</span><br><span class="line">        <span class="keyword">let</span> init = path.get(<span class="string">'init'</span>);</span><br><span class="line">        <span class="keyword">if</span> (init.isFunctionExpression())&#123;</span><br><span class="line">            call2express(path);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ast = parser.parse(jscode)</span><br><span class="line">traverse(ast, vistor)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;code&#125; = generator(ast);</span><br><span class="line"><span class="built_in">console</span>.log(code)</span><br></pre></td></tr></table></figure>

<p>查看执行结果</p>
<p><img src="/2020/06/19/article-23/WX20200619-165529.png" alt></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>AST</category>
      </categories>
      <tags>
        <tag>AST</tag>
      </tags>
  </entry>
  <entry>
    <title>AST学习-将a[&quot;length&quot;]转变为a.length</title>
    <url>/2020/06/19/article-24/</url>
    <content><![CDATA[<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'hello world!'</span>;</span><br><span class="line"><span class="keyword">var</span> b = a[<span class="string">'length'</span>];</span><br></pre></td></tr></table></figure>

<p>转化为</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'hello world!'</span>;</span><br><span class="line"><span class="keyword">var</span> b = a.length;</span><br></pre></td></tr></table></figure>

<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><img src="/2020/06/19/article-24/WX20200619-184840.png" alt></p>
<p>经AST-Tree比较获知差距在于 <strong><em>property</em></strong> 和 <strong><em>computed</em></strong> 这两个路径，替换掉就好了</p>
<h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">member2identify</span>(<span class="params">path</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> init = path.get(<span class="string">'init'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!init.isMemberExpression()) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> member_node = init.node;</span><br><span class="line">    <span class="keyword">const</span> member_property = init.get(<span class="string">'property'</span>);</span><br><span class="line"></span><br><span class="line">    member_node.computed = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">let</span> value = member_node.property.value;</span><br><span class="line">    member_property.replaceWith(t.Identifier(value));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vistor = &#123;</span><br><span class="line">    VariableDeclarator:&#123;</span><br><span class="line">        enter: [member2identify]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查看结果</p>
<p><img src="/2020/06/19/article-24/WX20200619-185204.png" alt></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>AST</category>
      </categories>
      <tags>
        <tag>AST</tag>
      </tags>
  </entry>
  <entry>
    <title>AST学习-删除全部注释</title>
    <url>/2020/06/22/article-25/</url>
    <content><![CDATA[<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>删除示例代码中的注释：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>; <span class="comment">//this is single line comment</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">This is a  multiline comments;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">test</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">test</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">test</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">456</span>;</span><br></pre></td></tr></table></figure>

<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><img src="/2020/06/22/article-25/WX20200622-114717.png" alt></p>
<p>但使用插件遍历发现如下异常</p>
<p><img src="/2020/06/22/article-25/WX20200622-115102.png" alt></p>
<p>这时使用generator直接操作，将comments参数声明为false，就可以去掉注释了</p>
<p><img src="/2020/06/22/article-25/WX20200622-115311.png" alt></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ast = parser.parse(jscode);</span><br><span class="line"><span class="comment">// traverse(ast, vistor)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;code&#125; = generator(ast, opts=&#123;<span class="attr">comments</span>:<span class="literal">false</span>&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(code)</span><br></pre></td></tr></table></figure>

<p>查看结果</p>
<p><img src="/2020/06/22/article-25/WX20200622-115557.png" alt></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>AST</category>
      </categories>
      <tags>
        <tag>AST</tag>
      </tags>
  </entry>
  <entry>
    <title>AST学习-删除空行和空语句</title>
    <url>/2020/06/22/article-26/</url>
    <content><![CDATA[<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>示例代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">456</span>;</span><br></pre></td></tr></table></figure>

<p>转换为</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">456</span>;</span><br></pre></td></tr></table></figure>

<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><img src="/2020/06/22/article-26/WX20200622-121701.png" alt></p>
<p>空语句的节点type是 <strong><em>EmptyStatement</em></strong> ，空行不会被解析，所以使用generator方法处理</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将 JS 源码转换成语法树的函数</span></span><br><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">"@babel/parser"</span>)</span><br><span class="line"><span class="comment">// 遍历 AST 的函数</span></span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">"@babel/traverse"</span>).default</span><br><span class="line"><span class="comment">// 操作节点的函数</span></span><br><span class="line"><span class="keyword">const</span> t = <span class="built_in">require</span>(<span class="string">"@babel/types"</span>)</span><br><span class="line"><span class="comment">// 将语法书转换成源代码的函数</span></span><br><span class="line"><span class="keyword">const</span> generator = <span class="built_in">require</span>(<span class="string">"@babel/generator"</span>).default</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> jscode = <span class="string">'var a = 123;\n'</span> +</span><br><span class="line">    <span class="string">'\n'</span> +</span><br><span class="line">    <span class="string">'\n'</span> +</span><br><span class="line">    <span class="string">'\n'</span> +</span><br><span class="line">    <span class="string">';\n'</span> +</span><br><span class="line">    <span class="string">'\n'</span> +</span><br><span class="line">    <span class="string">'\n'</span> +</span><br><span class="line">    <span class="string">'\n'</span> +</span><br><span class="line">    <span class="string">'var b = 456;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除空语句</span></span><br><span class="line"><span class="keyword">const</span> vistor = &#123;</span><br><span class="line">    EmptyStatement(path)&#123;</span><br><span class="line">        path.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ast = parser.parse(jscode);</span><br><span class="line">traverse(ast, vistor)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除空行</span></span><br><span class="line">options = &#123;</span><br><span class="line">    readlines: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;code&#125; = generator(ast, opts=options);</span><br><span class="line"><span class="built_in">console</span>.log(code)</span><br></pre></td></tr></table></figure>

<p>查看结果</p>
<p><img src="/2020/06/22/article-26/WX20200622-122351.png" alt></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>AST</category>
      </categories>
      <tags>
        <tag>AST</tag>
      </tags>
  </entry>
  <entry>
    <title>链表（下）</title>
    <url>/2020/08/31/article-33/</url>
    <content><![CDATA[<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="理解指针或引用的含义"><a href="#理解指针或引用的含义" class="headerlink" title="理解指针或引用的含义"></a>理解指针或引用的含义</h3><p>将某个变量赋值给指针，实际上就是将这个变量的地址赋值给指针，或者反过来说，指针中存储了这个<strong><em>变量的内存地址</em></strong>，指向了这个变量，通过指针就能找到这个变量。</p>
<h3 id="警惕指针丢失和内存泄漏"><a href="#警惕指针丢失和内存泄漏" class="headerlink" title="警惕指针丢失和内存泄漏"></a>警惕指针丢失和内存泄漏</h3><p>插入结点时，一定要注意操作的顺序</p>
<p>删除链表结点时，也一定要记得手动释放内存空间（针对C语言）</p>
<h3 id="利用哨兵简化实现难度"><a href="#利用哨兵简化实现难度" class="headerlink" title="利用哨兵简化实现难度"></a>利用哨兵简化实现难度</h3><p>针对链表的插入、删除操作，需要对插入第一个结点和删除最后一个结点的情况进行特殊处理。这样代码实现起来就会很繁琐，不简洁。由此，引入 <strong><em>哨兵</em></strong> 的概念。这里说的哨兵也是解决“<strong><em>边界问题</em></strong>”的，不直接参与业务逻辑。</p>
<p>在任何时候，不管链表是不是空，head 指针都会一直指向这个哨兵结点。我们也把这种有哨兵结点的链表叫带头链表。相反，没有哨兵结点的链表就叫作不带头链表。（相当于在原链表基础上再增加一个“头”节点，该节点不存储任何数据）</p>
<h3 id="重点留意边界条件处理"><a href="#重点留意边界条件处理" class="headerlink" title="重点留意边界条件处理"></a>重点留意边界条件处理</h3><p>经常用来检查链表代码是否正确的边界条件有这样几个：</p>
<ul>
<li>如果链表为空时，代码是否能正常工作？</li>
<li>如果链表只包含一个结点时，代码是否能正常工作？</li>
<li>如果链表只包含两个结点时，代码是否能正常工作？</li>
<li>代码逻辑在处理头结点和尾结点的时候，是否能正常工作？</li>
</ul>
<h3 id="举例画图，辅助思考"><a href="#举例画图，辅助思考" class="headerlink" title="举例画图，辅助思考"></a>举例画图，辅助思考</h3><p>多举例，多画图</p>
<h3 id="多写多练，没有捷径"><a href="#多写多练，没有捷径" class="headerlink" title="多写多练，没有捷径"></a>多写多练，没有捷径</h3><p>5 个常见的链表操作</p>
<ul>
<li>单链表反转</li>
<li>链表中环的检测（快慢指针）</li>
<li>两个有序的链表合并</li>
<li>删除链表倒数第 n 个结点（快慢指针）</li>
<li>求链表的中间结点（快慢指针）</li>
</ul>
<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><h4 id="还能够想到其他场景，利用哨兵可以大大地简化编码难度？"><a href="#还能够想到其他场景，利用哨兵可以大大地简化编码难度？" class="headerlink" title="还能够想到其他场景，利用哨兵可以大大地简化编码难度？"></a>还能够想到其他场景，利用哨兵可以大大地简化编码难度？</h4>]]></content>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>article-30</title>
    <url>/2020/07/30/article-30/</url>
    <content><![CDATA[<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h4 id="将”hello-world”转换为首字母大写”Hello-World”"><a href="#将”hello-world”转换为首字母大写”Hello-World”" class="headerlink" title="将”hello world”转换为首字母大写”Hello World”"></a>将”hello world”转换为首字母大写”Hello World”</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"hello world"</span>.title()</span><br></pre></td></tr></table></figure>



<h4 id="如何检测字符串中只含有数字"><a href="#如何检测字符串中只含有数字" class="headerlink" title="如何检测字符串中只含有数字?"></a>如何检测字符串中只含有数字?</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">""</span>.isdigit()</span><br></pre></td></tr></table></figure>



<h4 id="将字符串”ilovechina”进行反转"><a href="#将字符串”ilovechina”进行反转" class="headerlink" title="将字符串”ilovechina”进行反转"></a>将字符串”ilovechina”进行反转</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"ilovechina"</span>[::<span class="number">-1</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tmp = <span class="string">"ilovechina"</span></span><br><span class="line">output = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tmp:</span><br><span class="line">  output = i + output</span><br></pre></td></tr></table></figure>



<h4 id="Python-中的字符串格式化方式你知道哪些？"><a href="#Python-中的字符串格式化方式你知道哪些？" class="headerlink" title="Python 中的字符串格式化方式你知道哪些？"></a>Python 中的字符串格式化方式你知道哪些？</h4><p>%s, format, fstring</p>
<h4 id="有一个字符串开头和末尾都有空格，比如“-adabdw-”，要求写一个函数把这个字符串的前后空格都去掉。"><a href="#有一个字符串开头和末尾都有空格，比如“-adabdw-”，要求写一个函数把这个字符串的前后空格都去掉。" class="headerlink" title="有一个字符串开头和末尾都有空格，比如“ adabdw ”，要求写一个函数把这个字符串的前后空格都去掉。"></a>有一个字符串开头和末尾都有空格，比如“ adabdw ”，要求写一个函数把这个字符串的前后空格都去掉。</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clean_space</span><span class="params">(tmp)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> tmp.strip()</span><br></pre></td></tr></table></figure>



<h4 id="获取字符串”123456“最后的两个字符。"><a href="#获取字符串”123456“最后的两个字符。" class="headerlink" title="获取字符串”123456“最后的两个字符。"></a>获取字符串”123456“最后的两个字符。</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"123456"</span>[<span class="number">-2</span>:]</span><br></pre></td></tr></table></figure>



<h4 id="一个编码为-GBK-的字符串-S，要将其转成-UTF-8-编码的字符串，应如何操作？"><a href="#一个编码为-GBK-的字符串-S，要将其转成-UTF-8-编码的字符串，应如何操作？" class="headerlink" title="一个编码为 GBK 的字符串 S，要将其转成 UTF-8 编码的字符串，应如何操作？"></a>一个编码为 GBK 的字符串 S，要将其转成 UTF-8 编码的字符串，应如何操作？</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">S.encode(<span class="string">'gbk'</span>).decode(<span class="string">'utf8'</span>, <span class="string">'ignore'</span>)</span><br></pre></td></tr></table></figure>



<h4 id="（1）s-”info：xiaoZhang-33-shandong”，用正则切分字符串输出-‘info’-‘xiaoZhang’-‘33’-‘shandong’-。（2）a-“你好-中国-“，去除多余空格只留一个空格。"><a href="#（1）s-”info：xiaoZhang-33-shandong”，用正则切分字符串输出-‘info’-‘xiaoZhang’-‘33’-‘shandong’-。（2）a-“你好-中国-“，去除多余空格只留一个空格。" class="headerlink" title="（1）s=”info：xiaoZhang 33 shandong”，用正则切分字符串输出[‘info’, ‘xiaoZhang’, ‘33’, ‘shandong’]。（2）a = “你好 中国 “，去除多余空格只留一个空格。"></a>（1）s=”info：xiaoZhang 33 shandong”，用正则切分字符串输出[‘info’, ‘xiaoZhang’, ‘33’, ‘shandong’]。（2）a = “你好 中国 “，去除多余空格只留一个空格。</h4><p>(1)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">s = <span class="string">"info：xiaoZhang 33 shandong"</span></span><br><span class="line">output = re.split(<span class="string">r"：| "</span>, s)</span><br><span class="line">print(output)</span><br></pre></td></tr></table></figure>

<p>(2)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">"你好   中国 "</span></span><br><span class="line">output = <span class="string">' '</span>.join(a.split())</span><br><span class="line">print(output)</span><br></pre></td></tr></table></figure>



<h4 id="1-怎样将字符串转换为小写。-2-单引号、双引号、三引号的区别？"><a href="#1-怎样将字符串转换为小写。-2-单引号、双引号、三引号的区别？" class="headerlink" title="(1) 怎样将字符串转换为小写。 (2) 单引号、双引号、三引号的区别？"></a>(1) 怎样将字符串转换为小写。 (2) 单引号、双引号、三引号的区别？</h4><p>(1)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">""</span>.lower()</span><br></pre></td></tr></table></figure>



<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="已知-AList-1-2-3-1-2-，对-AList-列表元素去重，写出具体过程。"><a href="#已知-AList-1-2-3-1-2-，对-AList-列表元素去重，写出具体过程。" class="headerlink" title="已知 AList = [1,2,3,1,2]，对 AList 列表元素去重，写出具体过程。"></a>已知 AList = [1,2,3,1,2]，对 AList 列表元素去重，写出具体过程。</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">List(set(Alist))</span><br></pre></td></tr></table></figure>



<h4 id="如何实现-“1-2-3”-变成-“1”-”2”-”3”"><a href="#如何实现-“1-2-3”-变成-“1”-”2”-”3”" class="headerlink" title="如何实现 “1,2,3” 变成 [“1”,”2”,”3”]"></a>如何实现 “1,2,3” 变成 [“1”,”2”,”3”]</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"1,2,3"</span>.split(<span class="string">","</span>)</span><br></pre></td></tr></table></figure>



<h4 id="给定两个-list，A-和-B，找出相同元素和不同元素"><a href="#给定两个-list，A-和-B，找出相同元素和不同元素" class="headerlink" title="给定两个 list，A 和 B，找出相同元素和不同元素"></a>给定两个 list，A 和 B，找出相同元素和不同元素</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(set(A) &amp; set(B))</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(set(A) ^ set(B))</span><br></pre></td></tr></table></figure>



<h4 id="1-2-3-4-5-6-一行代码展开该列表，得出-1-2-3-4-5-6"><a href="#1-2-3-4-5-6-一行代码展开该列表，得出-1-2-3-4-5-6" class="headerlink" title="[[1,2],[3,4],[5,6]] 一行代码展开该列表，得出 [1,2,3,4,5,6]"></a>[[1,2],[3,4],[5,6]] 一行代码展开该列表，得出 [1,2,3,4,5,6]</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tmp = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>]]</span><br><span class="line">print([j <span class="keyword">for</span> i <span class="keyword">in</span> tmp <span class="keyword">for</span> j <span class="keyword">in</span> i])</span><br></pre></td></tr></table></figure>



<h4 id="合并列表-1-5-7-9-和-2-2-6-8"><a href="#合并列表-1-5-7-9-和-2-2-6-8" class="headerlink" title="合并列表 [1,5,7,9] 和 [2,2,6,8]"></a>合并列表 [1,5,7,9] 和 [2,2,6,8]</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a =  [<span class="number">1</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br><span class="line">b =  [<span class="number">2</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>]</span><br><span class="line">a.extend(b)</span><br></pre></td></tr></table></figure>



<h4 id="如何打乱一个列表的元素？"><a href="#如何打乱一个列表的元素？" class="headerlink" title="如何打乱一个列表的元素？"></a>如何打乱一个列表的元素？</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">tmp = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">random.shuffle(tmp)</span><br><span class="line">print(tmp)</span><br></pre></td></tr></table></figure>



<h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><h4 id="字典操作中-del-和-pop-有什么区别"><a href="#字典操作中-del-和-pop-有什么区别" class="headerlink" title="字典操作中 del 和 pop 有什么区别"></a>字典操作中 del 和 pop 有什么区别</h4><p>del 可以根据索引（元素所在位置）来删除的，没有返回值。 pop 可以根据索引弹出一个值，然后可以接收它的返回值。</p>
<h4 id="按照字典的内的年龄排序"><a href="#按照字典的内的年龄排序" class="headerlink" title="按照字典的内的年龄排序"></a>按照字典的内的年龄排序</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d1 = [</span><br><span class="line">    &#123;<span class="string">'name'</span>:<span class="string">'alice'</span>, <span class="string">'age'</span>:<span class="number">38</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>:<span class="string">'bob'</span>, <span class="string">'age'</span>:<span class="number">18</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>:<span class="string">'Carl'</span>, <span class="string">'age'</span>:<span class="number">28</span>&#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">print(sorted(d1, key=<span class="keyword">lambda</span> d:d[<span class="string">'age'</span>]))</span><br></pre></td></tr></table></figure>



<h4 id="请合并下面两个字典-a-“A”：1-”B”：2-b-“C”：3-”D”：4"><a href="#请合并下面两个字典-a-“A”：1-”B”：2-b-“C”：3-”D”：4" class="headerlink" title="请合并下面两个字典 a = {“A”：1,”B”：2},b = {“C”：3,”D”：4}"></a>请合并下面两个字典 a = {“A”：1,”B”：2},b = {“C”：3,”D”：4}</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="string">"A"</span>:<span class="number">1</span>,<span class="string">"B"</span>:<span class="number">2</span>&#125;</span><br><span class="line">b = &#123;<span class="string">"C"</span>:<span class="number">3</span>,<span class="string">"D"</span>:<span class="number">4</span>&#125;</span><br><span class="line">a.update(b)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(&#123;**a, **b&#125;)</span><br></pre></td></tr></table></figure>



<h4 id="如何使用生成式的方式生成一个字典，写一段功能代码。"><a href="#如何使用生成式的方式生成一个字典，写一段功能代码。" class="headerlink" title="如何使用生成式的方式生成一个字典，写一段功能代码。"></a>如何使用生成式的方式生成一个字典，写一段功能代码。</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tmp = [[<span class="string">'name'</span>, <span class="string">'Boss'</span>], [<span class="string">'age'</span>, <span class="number">18</span>]]</span><br><span class="line"></span><br><span class="line">output = &#123;k:v <span class="keyword">for</span> k, v <span class="keyword">in</span> tmp&#125;</span><br><span class="line">print(output)</span><br></pre></td></tr></table></figure>



<h4 id="如何把元组-“a”-”b”-和元组-1-2-，变为字典-“a”：1-”b”：2"><a href="#如何把元组-“a”-”b”-和元组-1-2-，变为字典-“a”：1-”b”：2" class="headerlink" title="如何把元组 (“a”,”b”) 和元组 (1,2)，变为字典 {“a”：1,”b”：2}"></a>如何把元组 (“a”,”b”) 和元组 (1,2)，变为字典 {“a”：1,”b”：2}</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = (<span class="string">"a"</span>,<span class="string">"b"</span>)</span><br><span class="line">b = (<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">output = dict(zip(a, b))</span><br><span class="line">print(output)</span><br></pre></td></tr></table></figure>



<h3 id="数据类型-综合"><a href="#数据类型-综合" class="headerlink" title="数据类型 - 综合"></a>数据类型 - 综合</h3><h4 id="下列字典对象键类型不正确的是？"><a href="#下列字典对象键类型不正确的是？" class="headerlink" title="下列字典对象键类型不正确的是？"></a>下列字典对象键类型不正确的是？</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A：&#123;<span class="number">1</span>：<span class="number">0</span>,<span class="number">2</span>：<span class="number">0</span>,<span class="number">3</span>：<span class="number">0</span>&#125;</span><br><span class="line">B：&#123;<span class="string">"a"</span>：<span class="number">0</span>, <span class="string">"b"</span>：<span class="number">0</span>, <span class="string">"c"</span>：<span class="number">0</span>&#125;</span><br><span class="line">C： &#123;(<span class="number">1</span>,<span class="number">2</span>)：<span class="number">0</span>, (<span class="number">2</span>,<span class="number">3</span>)：<span class="number">0</span>&#125;</span><br><span class="line">D： &#123;[<span class="number">1</span>,<span class="number">2</span>]：<span class="number">0</span>, [<span class="number">2</span>,<span class="number">3</span>]：<span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure>

<p>D, 字典的key必须是可哈希的，list是可变数据类型，不符合</p>
<h4 id="如何交换字典-“A”：1-”B”：2-的键和值"><a href="#如何交换字典-“A”：1-”B”：2-的键和值" class="headerlink" title="如何交换字典 {“A”：1,”B”：2}的键和值"></a>如何交换字典 {“A”：1,”B”：2}的键和值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tmp = &#123;<span class="string">"A"</span>:<span class="number">1</span>,<span class="string">"B"</span>:<span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法一</span></span><br><span class="line">output = &#123;v:k <span class="keyword">for</span> k, v <span class="keyword">in</span> tmp.items()&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line">output = dict(zip(tmp.values(), tmp.keys()))</span><br><span class="line"></span><br><span class="line">print(output)</span><br></pre></td></tr></table></figure>



<h4 id="Python-里面如何实现-tuple-和-list-的转换？"><a href="#Python-里面如何实现-tuple-和-list-的转换？" class="headerlink" title="Python 里面如何实现 tuple 和 list 的转换？"></a>Python 里面如何实现 tuple 和 list 的转换？</h4><p>Python 中的类型转换，一般通过类型强转即可完成 tuple 转 list 是 list() 方法 list 转 tuple 使用 tuple() 方法</p>
<h4 id="我们知道对于列表可以使用切片操作进行部分元素的选择，那么如何对生成器类型的对象实现相同的功能呢？"><a href="#我们知道对于列表可以使用切片操作进行部分元素的选择，那么如何对生成器类型的对象实现相同的功能呢？" class="headerlink" title="我们知道对于列表可以使用切片操作进行部分元素的选择，那么如何对生成器类型的对象实现相同的功能呢？"></a>我们知道对于列表可以使用切片操作进行部分元素的选择，那么如何对生成器类型的对象实现相同的功能呢？</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> islice</span><br><span class="line"></span><br><span class="line">gen = iter(range(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> islice(gen, <span class="number">0</span>, <span class="number">4</span>):</span><br><span class="line">  	print(i)</span><br></pre></td></tr></table></figure>

<p>这个题目考察了 Python 标准库的 itertools 模快的掌握情况，该模块提供了操作生成器的一些方法。 对于生成器类型我们使用 islice 方法来实现切片的功能。</p>
<h4 id="请将-i-for-i-in-range-3-改成生成器"><a href="#请将-i-for-i-in-range-3-改成生成器" class="headerlink" title="请将 [i for i in range(3)] 改成生成器"></a>请将 [i for i in range(3)] 改成生成器</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>))</span><br></pre></td></tr></table></figure>



<h4 id="a-”hello”-和-b-”你好”-编码成-bytes-类型"><a href="#a-”hello”-和-b-”你好”-编码成-bytes-类型" class="headerlink" title="a=”hello” 和 b=”你好” 编码成 bytes 类型"></a>a=”hello” 和 b=”你好” 编码成 bytes 类型</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">b"hello"</span></span><br><span class="line">b = bytes(<span class="string">"你好"</span>, <span class="string">"utf-8"</span>)</span><br><span class="line">c = <span class="string">"你好"</span>.encode(<span class="string">"utf-8"</span>)</span><br><span class="line">print(a, b, c)</span><br></pre></td></tr></table></figure>



<h4 id="下面的代码输出结果是什么？"><a href="#下面的代码输出结果是什么？" class="headerlink" title="下面的代码输出结果是什么？"></a>下面的代码输出结果是什么？</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>],<span class="number">8</span>)</span><br><span class="line">a[<span class="number">2</span>] = <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>出现异常</p>
<h4 id="下面的代码输出的结果是什么"><a href="#下面的代码输出的结果是什么" class="headerlink" title="下面的代码输出的结果是什么?"></a>下面的代码输出的结果是什么?</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>],<span class="number">8</span>)</span><br><span class="line">a[<span class="number">3</span>][<span class="number">0</span>] = <span class="number">2</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>],<span class="number">8</span>)</span><br></pre></td></tr></table></figure>



<h4 id="在读文件操作的时候会使用-read、readline-或者-readlines，简述它们各自的作用"><a href="#在读文件操作的时候会使用-read、readline-或者-readlines，简述它们各自的作用" class="headerlink" title="在读文件操作的时候会使用 read、readline 或者 readlines，简述它们各自的作用"></a>在读文件操作的时候会使用 read、readline 或者 readlines，简述它们各自的作用</h4><p>read() 每次读取整个文件，它通常用于将文件内容放到一个字符串变量中。如果希望一行一行的输出那么就可以使用 readline()，该方法会把文件的内容加载到内存，所以对于对于大文件的读取操作来说非常的消耗内存资源，此时就可以通过 readlines 方法，将文件的句柄生成一个生产器，然后去读就可以了。</p>
<h4 id="json-序列化时，可以处理的数据类型有哪些？如何定制支持-datetime-类型？"><a href="#json-序列化时，可以处理的数据类型有哪些？如何定制支持-datetime-类型？" class="headerlink" title="json 序列化时，可以处理的数据类型有哪些？如何定制支持 datetime 类型？"></a>json 序列化时，可以处理的数据类型有哪些？如何定制支持 datetime 类型？</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date, datetime</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DateJson</span><span class="params">(json.JSONEncoder)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">default</span><span class="params">(self, o)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> isinstance(o, datetime):</span><br><span class="line">            <span class="keyword">return</span> o.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line">        <span class="keyword">elif</span> isinstance(o, date):</span><br><span class="line">            <span class="keyword">return</span> o.strftime(<span class="string">"%Y-%m-%d"</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> json.JSONEncoder.default(o)</span><br><span class="line"></span><br><span class="line">d1 = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">"Boss"</span>,</span><br><span class="line">    <span class="string">'date'</span>: datetime.now()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">print(json.dumps(d1, cls=DateJson))</span><br></pre></td></tr></table></figure>



<h4 id="json-序列化时，默认遇到中文会转换成-unicode，如果想要保留中文怎么办？"><a href="#json-序列化时，默认遇到中文会转换成-unicode，如果想要保留中文怎么办？" class="headerlink" title="json 序列化时，默认遇到中文会转换成 unicode，如果想要保留中文怎么办？"></a>json 序列化时，默认遇到中文会转换成 unicode，如果想要保留中文怎么办？</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">d = &#123;<span class="string">'name'</span>: <span class="string">'张三'</span>,<span class="string">'desc'</span>: <span class="string">'法外狂徒'</span>&#125;</span><br><span class="line">print(json.dumps(d, ensure_ascii=<span class="literal">False</span>))</span><br></pre></td></tr></table></figure>



<h4 id="有两个磁盘文件-A-和-B，各存放一行字母，要求把这两个文件中的信息合并-按字母顺序排列-，输出到一个新文件-C-中。"><a href="#有两个磁盘文件-A-和-B，各存放一行字母，要求把这两个文件中的信息合并-按字母顺序排列-，输出到一个新文件-C-中。" class="headerlink" title="有两个磁盘文件 A 和 B，各存放一行字母，要求把这两个文件中的信息合并(按字母顺序排列)，输出到一个新文件 C 中。"></a>有两个磁盘文件 A 和 B，各存放一行字母，要求把这两个文件中的信息合并(按字母顺序排列)，输出到一个新文件 C 中。</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'A.text'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    a_text = f.readline()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'B.text'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    b_text = f.readline()</span><br><span class="line"></span><br><span class="line">output = a_text + b_text</span><br><span class="line"></span><br><span class="line">c_list = sorted(output)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'c.text'</span>, <span class="string">'a+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">''</span>.join(c_list))</span><br></pre></td></tr></table></figure>



<h4 id="如果当前的日期为-20190530，要求写一个函数输出-N-天后的日期，-比如-N-为-2，则输出-20190601-。"><a href="#如果当前的日期为-20190530，要求写一个函数输出-N-天后的日期，-比如-N-为-2，则输出-20190601-。" class="headerlink" title="如果当前的日期为 20190530，要求写一个函数输出 N 天后的日期，(比如 N 为 2，则输出 20190601)。"></a>如果当前的日期为 20190530，要求写一个函数输出 N 天后的日期，(比如 N 为 2，则输出 20190601)。</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> dateutil.relativedelta <span class="keyword">import</span> relativedelta</span><br><span class="line"></span><br><span class="line">now_date = <span class="string">"20190530"</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">date_add</span><span class="params">(now_date ,N)</span>:</span></span><br><span class="line">    date = datetime.strptime(now_date, <span class="string">"%Y%m%d"</span>)</span><br><span class="line">    new_date = date + relativedelta(days=<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> new_date.strftime(<span class="string">'%Y%m%d'</span>)</span><br><span class="line"></span><br><span class="line">print(date_add(now_date, <span class="number">2</span>))</span><br></pre></td></tr></table></figure>



<h4 id="写一个函数，接收整数参数-n，返回一个函数，函数的功能是把函数的参数和-n-相乘并把结果返回。"><a href="#写一个函数，接收整数参数-n，返回一个函数，函数的功能是把函数的参数和-n-相乘并把结果返回。" class="headerlink" title="写一个函数，接收整数参数 n，返回一个函数，函数的功能是把函数的参数和 n 相乘并把结果返回。"></a>写一个函数，接收整数参数 n，返回一个函数，函数的功能是把函数的参数和 n 相乘并把结果返回。</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func_out</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func_inner</span><span class="params">(val)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> n * val</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> func_inner</span><br><span class="line"></span><br><span class="line">run = func_out(<span class="number">8</span>)</span><br><span class="line">print(run(<span class="number">5</span>))</span><br></pre></td></tr></table></figure>



<h4 id="下面代码会存在什么问题，如何改进？"><a href="#下面代码会存在什么问题，如何改进？" class="headerlink" title="下面代码会存在什么问题，如何改进？"></a>下面代码会存在什么问题，如何改进？</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">strappend</span><span class="params">(num)</span>：</span></span><br><span class="line">    str='first'</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num)：</span><br><span class="line">        str+=str(i)</span><br><span class="line">    <span class="keyword">return</span> str</span><br></pre></td></tr></table></figure>

<p>首先不应该使用 Python 的内置类似 str 作为变量名这里我把它改为了 s,另外在Python,str 是个不可变对象，每次迭代都会生成新的存储空间，num 越大，创建的 str 对象就会越多，内存消耗越大。使用 yield 改成生成器即可, 还有一点就是命名规范的位置，函数名改为_分割比较好</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str_append</span><span class="params">(num)</span>:</span></span><br><span class="line">    s = <span class="string">'first'</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        s += str(i)</span><br><span class="line">        <span class="keyword">yield</span> s</span><br></pre></td></tr></table></figure>



<h4 id="一行代码输出-1-100-之间的所有偶数。"><a href="#一行代码输出-1-100-之间的所有偶数。" class="headerlink" title="一行代码输出 1-100 之间的所有偶数。"></a>一行代码输出 1-100 之间的所有偶数。</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法一</span></span><br><span class="line">print(list(filter(<span class="keyword">lambda</span> num: num % <span class="number">2</span> == <span class="number">0</span>, range(<span class="number">1</span>, <span class="number">101</span>))))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line">print(list(range(<span class="number">2</span>, <span class="number">101</span>, <span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法三</span></span><br><span class="line">print([i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">101</span>) <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>])</span><br></pre></td></tr></table></figure>



<h4 id="with-语句的作用，写一段代码？"><a href="#with-语句的作用，写一段代码？" class="headerlink" title="with 语句的作用，写一段代码？"></a>with 语句的作用，写一段代码？</h4><p>with 语句适用于对资源进行访问的场合，确保不管使用过程中是否发生异常都会执行必要的“清理”操作，释放资源，比如文件使用后自动关闭、线程中锁的自动获取和释放等。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#一般访问文件资源时我们会这样处理：</span></span><br><span class="line"></span><br><span class="line">f = open(</span><br><span class="line">    <span class="string">'c：\test.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line">data = f.read()</span><br><span class="line">f.close()</span><br><span class="line"><span class="comment"># 这样写没有错，但是容易犯两个毛病：</span></span><br><span class="line"><span class="comment"># 1. 如果在读写时出现异常而忘了异常处理。</span></span><br><span class="line"><span class="comment"># 2. 忘了关闭文件句柄</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#以下的加强版本的写法：</span></span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'c：\test.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line"><span class="keyword">try</span>：</span><br><span class="line">    data = f.read()</span><br><span class="line"><span class="keyword">finally</span>：</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#以上的写法就可以避免因读取文件时异常的发生而没有关闭问题的处理了。代码长了一些。</span></span><br><span class="line"><span class="comment">#但使用 with 有更优雅的写法：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">r'c：\test.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f：</span><br><span class="line">    data = f.read()</span><br><span class="line"><span class="comment">#with 的实现</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>：</span></span><br><span class="line"><span class="class">    <span class="title">def</span> <span class="title">__enter__</span><span class="params">(self)</span>：</span></span><br><span class="line"><span class="class">        <span class="title">print</span><span class="params">(<span class="string">'__enter__() is call!'</span>)</span></span></span><br><span class="line"><span class="class">        <span class="title">return</span> <span class="title">self</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="title">def</span> <span class="title">dosomething</span><span class="params">(self)</span>：</span></span><br><span class="line"><span class="class">        <span class="title">print</span><span class="params">(<span class="string">'dosomethong!'</span>)</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="title">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_value, traceback)</span>：</span></span><br><span class="line"><span class="class">        <span class="title">print</span><span class="params">(<span class="string">'__exit__() is call!'</span>)</span></span></span><br><span class="line"><span class="class">        <span class="title">print</span><span class="params">(<span class="string">f'type：<span class="subst">&#123;exc_type&#125;</span>'</span>)</span></span></span><br><span class="line"><span class="class">        <span class="title">print</span><span class="params">(<span class="string">f'value：<span class="subst">&#123;exc_value&#125;</span>'</span>)</span></span></span><br><span class="line"><span class="class">        <span class="title">print</span><span class="params">(<span class="string">f'trace：<span class="subst">&#123;traceback&#125;</span>'</span>)</span></span></span><br><span class="line"><span class="class">        <span class="title">print</span><span class="params">(<span class="string">'__exit()__ is call!'</span>)</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">with</span> <span class="title">Test</span><span class="params">()</span> <span class="title">as</span> <span class="title">sample</span>：</span></span><br><span class="line"><span class="class">      <span class="title">pass</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">#当对象被实例化时，就会主动调用<span class="title">__enter__</span><span class="params">()</span>方法，任务执行完成后就会调用<span class="title">__exit__</span><span class="params">()</span>方法，</span></span><br><span class="line">#另外，注意到，__exit__()方法是带有三个参数的(exc_type, exc_value, traceback),</span><br><span class="line"><span class="comment">#依据上面的官方说明：如果上下文运行时没有异常发生，那么三个参数都将置为 None, </span></span><br><span class="line"><span class="comment">#这里三个参数由于没有发生异常，的确是置为了 None, 与预期一致.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改后不出异常了</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>：</span></span><br><span class="line"><span class="class">    <span class="title">def</span> <span class="title">__enter__</span><span class="params">(self)</span>：</span></span><br><span class="line"><span class="class">        <span class="title">print</span><span class="params">(<span class="string">'__enter__() is call!'</span>)</span></span></span><br><span class="line"><span class="class">        <span class="title">return</span> <span class="title">self</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    <span class="title">def</span> <span class="title">dosomething</span><span class="params">(self)</span>：</span></span><br><span class="line">        x = 1/0</span><br><span class="line">        print(<span class="string">'dosomethong!'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_value, traceback)</span>：</span></span><br><span class="line"><span class="function">        <span class="title">print</span><span class="params">(<span class="string">'__exit__() is call!'</span>)</span></span></span><br><span class="line"><span class="function">        <span class="title">print</span><span class="params">(<span class="string">f'type：<span class="subst">&#123;exc_type&#125;</span>'</span>)</span></span></span><br><span class="line"><span class="function">        <span class="title">print</span><span class="params">(<span class="string">f'value：<span class="subst">&#123;exc_value&#125;</span>'</span>)</span></span></span><br><span class="line"><span class="function">        <span class="title">print</span><span class="params">(<span class="string">f'trace：<span class="subst">&#123;traceback&#125;</span>'</span>)</span></span></span><br><span class="line"><span class="function">        <span class="title">print</span><span class="params">(<span class="string">'__exit()__ is call!'</span>)</span></span></span><br><span class="line"><span class="function">        <span class="title">return</span> <span class="title">True</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">with</span> <span class="title">Test</span><span class="params">()</span> <span class="title">as</span> <span class="title">sample</span>：</span></span><br></pre></td></tr></table></figure>



<h4 id="Python-字典和-json-字符串相互转化方法"><a href="#Python-字典和-json-字符串相互转化方法" class="headerlink" title="Python 字典和 json 字符串相互转化方法"></a>Python 字典和 json 字符串相互转化方法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dict -&gt; json</span></span><br><span class="line">d = &#123;</span><br><span class="line">  <span class="string">'name'</span>: <span class="string">'Bob'</span>,</span><br><span class="line">  <span class="string">'age'</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line">output = json.dumps(d)</span><br><span class="line">print(output)</span><br><span class="line"></span><br><span class="line"><span class="comment"># json -&gt; dict </span></span><br><span class="line">s = <span class="string">'&#123;"name": "Bob", "age": 18&#125;'</span></span><br><span class="line">output = json.loads(s)</span><br><span class="line">print(output)</span><br></pre></td></tr></table></figure>



<h4 id="请写一个-Python-逻辑，计算一个文件中的大写字母数量"><a href="#请写一个-Python-逻辑，计算一个文件中的大写字母数量" class="headerlink" title="请写一个 Python 逻辑，计算一个文件中的大写字母数量"></a>请写一个 Python 逻辑，计算一个文件中的大写字母数量</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'test.text'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    content = f.read()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pre_count</span><span class="params">(content)</span>:</span></span><br><span class="line">    content = content.replace(<span class="string">' '</span>, <span class="string">''</span>)</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_count</span><span class="params">(content)</span>:</span></span><br><span class="line">    COUNT = <span class="number">0</span></span><br><span class="line">    content = pre_count(content)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> content:</span><br><span class="line">        <span class="keyword">if</span> i.isupper():</span><br><span class="line">            COUNT += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> COUNT</span><br><span class="line"></span><br><span class="line">print(do_count(content))</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'A.txt'</span>) <span class="keyword">as</span> fs：</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> fs.read()：</span><br><span class="line">        <span class="keyword">if</span> i.isupper()：</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">print(count)</span><br></pre></td></tr></table></figure>



<h4 id="请写一段-Python连接Mongo数据库，然后查询的代码。"><a href="#请写一段-Python连接Mongo数据库，然后查询的代码。" class="headerlink" title="请写一段 Python连接Mongo数据库，然后查询的代码。"></a>请写一段 Python连接Mongo数据库，然后查询的代码。</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"></span><br><span class="line">mongo = MongoClient(</span><br><span class="line">    host=<span class="string">'localhost'</span>,</span><br><span class="line">    port=<span class="number">27017</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">db = mongo.tutorial</span><br><span class="line">collection = db.QuoteItem</span><br><span class="line"></span><br><span class="line">result = collection.find()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line">mongo.close()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line">db_configs = &#123;</span><br><span class="line">    <span class="string">'type'</span>: <span class="string">'mongo'</span>,</span><br><span class="line">    <span class="string">'host'</span>: <span class="string">'地址'</span>,</span><br><span class="line">    <span class="string">'port'</span>: <span class="string">'端口'</span>,</span><br><span class="line">    <span class="string">'user'</span>: <span class="string">'spider_data'</span>,</span><br><span class="line">    <span class="string">'passwd'</span>: <span class="string">'密码'</span>,</span><br><span class="line">    <span class="string">'db_name'</span>: <span class="string">'spider_data'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mongo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, db=db_configs[<span class="string">"db_name"</span>], username=db_configs[<span class="string">"user"</span>],</span></span></span><br><span class="line"><span class="function"><span class="params">                 password=db_configs[<span class="string">"passwd"</span>])</span>:</span></span><br><span class="line">        self.client = pymongo.MongoClient(<span class="string">f'mongodb://<span class="subst">&#123;db_configs[<span class="string">"host"</span>]&#125;</span>:db_configs["port"]'</span>)</span><br><span class="line">        self.username = username</span><br><span class="line">        self.password = password</span><br><span class="line">        <span class="keyword">if</span> self.username <span class="keyword">and</span> self.password:</span><br><span class="line">            self.db1 = self.client[db].authenticate(self.username, self.password)</span><br><span class="line">        self.db1 = self.client[db]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_data</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 获取状态为0的数据</span></span><br><span class="line">        data = self.db1.test.find(&#123;<span class="string">"status"</span>: <span class="number">0</span>&#125;)</span><br><span class="line">        gen = (item <span class="keyword">for</span> item <span class="keyword">in</span> data)</span><br><span class="line">        <span class="keyword">return</span> gen</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    m = Mongo()</span><br><span class="line">    print(m.find_data())</span><br></pre></td></tr></table></figure>



<h4 id="说一说Redis的基本类型"><a href="#说一说Redis的基本类型" class="headerlink" title="说一说Redis的基本类型"></a>说一说Redis的基本类型</h4><p>Redis 支持五种数据类型： string（字符串） 、 hash（哈希）、list（列表） 、 set（集合） 及 zset(sorted set： 有序集合)。</p>
<h4 id="请写一段-Python连接Redis数据库的代码。"><a href="#请写一段-Python连接Redis数据库的代码。" class="headerlink" title="请写一段 Python连接Redis数据库的代码。"></a>请写一段 Python连接Redis数据库的代码。</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> ConnectionPool, StrictRedis</span><br><span class="line"></span><br><span class="line">pool = ConnectionPool.from_url(<span class="string">"redis://127.0.0.1:6379/2"</span>, decode_components=<span class="literal">True</span>)</span><br><span class="line">conn = StrictRedis(connection_pool=pool)</span><br></pre></td></tr></table></figure>



<h4 id="请写一段-Python连接Mysql数据库的代码。"><a href="#请写一段-Python连接Mysql数据库的代码。" class="headerlink" title="请写一段 Python连接Mysql数据库的代码。"></a>请写一段 Python连接Mysql数据库的代码。</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line">conn = pymysql.connect(</span><br><span class="line">    host=<span class="string">"localhost"</span>,</span><br><span class="line">    port=<span class="number">3306</span>,</span><br><span class="line">    user=<span class="string">"root"</span>,</span><br><span class="line">    password=<span class="string">"251314wq"</span>,</span><br><span class="line">    db=<span class="string">"spider"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>



<h4 id="了解Redis的事务么"><a href="#了解Redis的事务么" class="headerlink" title="了解Redis的事务么"></a>了解Redis的事务么</h4><p>简单理解，可以认为 redis 事务是一些列 redis 命令的集合，并且有如下两个特点： 1.事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。 2.事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。 一般来说，事务有四个性质称为ACID，分别是原子性，一致性，隔离性和持久性。 一个事务从开始到执行会经历以下三个阶段：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span>   </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        conn=redis.StrictRedis(<span class="string">'192.168.80.41'</span>)</span><br><span class="line">       <span class="comment"># Python中redis事务是通过pipeline的封装实现的</span></span><br><span class="line">        pipe=conn.pipeline()</span><br><span class="line">        pipe.sadd(<span class="string">'s001'</span>,<span class="string">'a'</span>)</span><br><span class="line">        sys.exit()</span><br><span class="line">        <span class="comment">#在事务还没有提交前退出，所以事务不会被执行。</span></span><br><span class="line">        pipe.sadd(<span class="string">'s001'</span>,<span class="string">'b'</span>)</span><br><span class="line">        pipe.execute()</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">        print(err)</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">      run()</span><br></pre></td></tr></table></figure>



<h4 id="了解数据库的三范式么？"><a href="#了解数据库的三范式么？" class="headerlink" title="了解数据库的三范式么？"></a>了解数据库的三范式么？</h4><p>经过研究和对使用中问题的总结，对于设计数据库提出了一些规范，这些规范被称为范式 一般需要遵守下面3范式即可: 第一范式（1NF）：强调的是列的原子性，即列不能够再分成其他几列。 第二范式（2NF）：首先是 1NF，另外包含两部分内容，一是表必须有一个主键；二是没有包含在主键中的列必须完全依赖于主键，而不能只依赖于主键的一部分。 第三范式（3NF）：首先是 2NF，另外非主键列必须直接依赖于主键，不能存在传递依赖。即不能存在：非主键列 A 依赖于非主键列 B，非主键列 B 依赖于主键的情况。</p>
<h4 id="了解分布式锁么"><a href="#了解分布式锁么" class="headerlink" title="了解分布式锁么"></a>了解分布式锁么</h4><p>分布式锁是控制分布式系统之间的同步访问共享资源的一种方式。 对于分布式锁的目标，我们必须首先明确三点：</p>
<ul>
<li>任何一个时间点必须只能够有一个客户端拥有锁。</li>
<li>不能够有死锁，也就是最终客户端都能够获得锁，尽管可能会经历失败。</li>
<li>错误容忍性要好，只要有大部分的Redis实例存活，客户端就应该能够获得锁。 分布式锁的条件 互斥性：分布式锁需要保证在不同节点的不同线程的互斥 可重入性：同一个节点上的同一个线程如果获取了锁之后，能够再次获取这个锁。 锁超时：支持超时释放锁，防止死锁 高效，高可用：加锁和解锁需要高效，同时也需要保证高可用防止分布式锁失效，可以增加降级。 支持阻塞和非阻塞：可以实现超时获取失败，tryLock(long timeOut) 支持公平锁和非公平锁</li>
</ul>
<p>分布式锁的实现方案 1、数据库实现（乐观锁） 2、基于zookeeper的实现 3、基于Redis的实现（推荐）</p>
<h4 id="用-Python-实现一个-Reids-的分布式锁的功能"><a href="#用-Python-实现一个-Reids-的分布式锁的功能" class="headerlink" title="用 Python 实现一个 Reids 的分布式锁的功能"></a>用 Python 实现一个 Reids 的分布式锁的功能</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> redis</span><br><span class="line"><span class="keyword">from</span> conf.config <span class="keyword">import</span> REDIS_HOST, REDIS_PORT, REDIS_PASSWORD</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RedisLock</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.conn = redis.Redis(host=REDIS_HOST, port=REDIS_PORT, password=REDIS_PASSWORD, db=<span class="number">1</span>)</span><br><span class="line">        self._lock = <span class="number">0</span></span><br><span class="line">        self.lock_key = <span class="string">""</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">my_float</span><span class="params">(timestamp)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            timestamp:</span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            float或者0</span></span><br><span class="line"><span class="string">            如果取出的是None，说明原本锁并没人用，getset已经写入，返回0，可以继续操作。</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> timestamp:</span><br><span class="line">            <span class="keyword">return</span> float(timestamp)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment">#防止取出的值为None，转换float报错</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">          </span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_lock</span><span class="params">(cls, key, timeout=<span class="number">10</span>)</span>:</span></span><br><span class="line">        cls.lock_key = <span class="string">f"<span class="subst">&#123;key&#125;</span>_dynamic_lock"</span></span><br><span class="line">        <span class="keyword">while</span> cls._lock != <span class="number">1</span>:</span><br><span class="line">            timestamp = time.time() + timeout + <span class="number">1</span></span><br><span class="line">            cls._lock = cls.conn.setnx(cls.lock_key, timestamp)</span><br><span class="line">            <span class="comment"># if 条件中，可能在运行到or之后被释放，也可能在and之后被释放</span></span><br><span class="line">            <span class="comment"># 将导致 get到一个None，float失败。</span></span><br><span class="line">            <span class="keyword">if</span> cls._lock == <span class="number">1</span> <span class="keyword">or</span> (</span><br><span class="line">                            time.time() &gt; cls.my_float(cls.conn.get(cls.lock_key)) <span class="keyword">and</span></span><br><span class="line">                            time.time() &gt; cls.my_float(cls.conn.getset(cls.lock_key, timestamp))):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                time.sleep(<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">release</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> cls.conn.get(cls.lock_key) <span class="keyword">and</span> time.time() &lt; cls.conn.get(cls.lock_key):</span><br><span class="line">            cls.conn.delete(cls.lock_key)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">redis_lock_deco</span><span class="params">(cls)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_deco</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__deco</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            cls.get_lock(cls, args[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">            <span class="keyword">finally</span>:</span><br><span class="line">                cls.release(cls)</span><br><span class="line">        <span class="keyword">return</span> __deco</span><br><span class="line">    <span class="keyword">return</span> _deco</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@redis_lock_deco(RedisLock())</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"myfunc() called."</span>)</span><br><span class="line">    time.sleep(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    my_func()</span><br></pre></td></tr></table></figure>



<h4 id="写一段-Python-使用-mongo-数据库创建索引的代码"><a href="#写一段-Python-使用-mongo-数据库创建索引的代码" class="headerlink" title="写一段 Python 使用 mongo 数据库创建索引的代码:"></a>写一段 Python 使用 mongo 数据库创建索引的代码:</h4><h3 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h3><h4 id="函数装饰器有什么作用？请列举说明？"><a href="#函数装饰器有什么作用？请列举说明？" class="headerlink" title="函数装饰器有什么作用？请列举说明？"></a>函数装饰器有什么作用？请列举说明？</h4><p>装饰器就是一个函数，它可以在不需要做任何代码变动的前提下给一个函数增加额外功能，启动装饰的效果。 它经常用于有切面需求的场景，比如：插入日志、性能测试、事务处理、缓存、权限校验等场景。 下面是一个日志功能的装饰器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(label)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorate</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">        @wraps(func)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">_wrap</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                func(*args, **kwargs)</span><br><span class="line">                print(<span class="string">'name'</span>, func.__name__)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                print(e)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> _wrap</span><br><span class="line">    <span class="keyword">return</span> decorate</span><br><span class="line"></span><br><span class="line"><span class="meta">@log('info')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(a, b, c)</span>:</span></span><br><span class="line">    print(a + b +c)</span><br><span class="line">    print(<span class="string">"in foo"</span>)</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>





<h4 id="Python-垃圾回收机制？"><a href="#Python-垃圾回收机制？" class="headerlink" title="Python 垃圾回收机制？"></a>Python 垃圾回收机制？</h4><p>1.引用计数机制 2.标记-清除 3.分代回收</p>
<h4 id="魔法函数-call-怎么使用"><a href="#魔法函数-call-怎么使用" class="headerlink" title="魔法函数 _call_怎么使用?"></a>魔法函数 _<em>call</em>_怎么使用?</h4><p> <em><em>call</em></em> 可以把类实例当做函数调用。 使用示例如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Duck</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'I am a duck!'</span>)</span><br><span class="line"></span><br><span class="line">d = Duck()</span><br><span class="line">d()</span><br></pre></td></tr></table></figure>



<h4 id="如何判断一个对象是函数还是方法？"><a href="#如何判断一个对象是函数还是方法？" class="headerlink" title="如何判断一个对象是函数还是方法？"></a>如何判断一个对象是函数还是方法？</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> types <span class="keyword">import</span> MethodType, FunctionType</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'method'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'function'</span>)</span><br><span class="line"></span><br><span class="line">print(isinstance(Bar().foo, MethodType))</span><br><span class="line">print(isinstance(Bar().foo, FunctionType))</span><br><span class="line">print(isinstance(foo, MethodType))</span><br><span class="line">print(isinstance(foo, FunctionType))</span><br></pre></td></tr></table></figure>



<h4 id="classmethod-和-staticmethod-用法和区别"><a href="#classmethod-和-staticmethod-用法和区别" class="headerlink" title="@classmethod 和 @staticmethod 用法和区别"></a>@classmethod 和 @staticmethod 用法和区别</h4><p>相同之处：@staticmethod 和@classmethod 都可以直接类名.方法名()来调用，不用在示例化一个类。</p>
<p>@classmethod</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">iget_no_of_instance</span><span class="params">(ins_obj)</span>：</span></span><br><span class="line"><span class="function">    <span class="title">return</span> <span class="title">ins_obj</span>.<span class="title">__class__</span>.<span class="title">no_inst</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">class</span> <span class="title">Kls</span><span class="params">(object)</span>：</span></span><br><span class="line">    no_inst = 0</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>：</span></span><br><span class="line">        Kls.no_inst = Kls.no_inst + 1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ik1 = Kls()</span><br><span class="line">ik2 = Kls()</span><br><span class="line">print(iget_no_of_instance(ik1))</span><br></pre></td></tr></table></figure>

<p>@staticmethod 经常有一些跟类有关系的功能但在运行时又不需要实例和类参与的情况下需要用到静态方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">IND = <span class="string">'ON'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Kls</span><span class="params">(object)</span>：</span></span><br><span class="line"><span class="class">    <span class="title">def</span> <span class="title">__init__</span><span class="params">(self, data)</span>：</span></span><br><span class="line">        self.data = data</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">check_ind</span><span class="params">()</span>：</span></span><br><span class="line"><span class="function">        <span class="title">return</span> <span class="params">(IND == <span class="string">'ON'</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">def</span> <span class="title">do_reset</span><span class="params">(self)</span>：</span></span><br><span class="line"><span class="function">        <span class="title">if</span> <span class="title">self</span>.<span class="title">check_ind</span><span class="params">()</span>：</span></span><br><span class="line"><span class="function">            <span class="title">print</span><span class="params">(<span class="string">'Reset done for：'</span>, self.data)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">def</span> <span class="title">set_db</span><span class="params">(self)</span>：</span></span><br><span class="line"><span class="function">        <span class="title">if</span> <span class="title">self</span>.<span class="title">check_ind</span><span class="params">()</span>：</span></span><br><span class="line">            self.db = 'New db connection'</span><br><span class="line">        print(<span class="string">'DB connection made for： '</span>, self.data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ik1 = Kls(<span class="number">12</span>)</span><br><span class="line">ik1.do_reset()</span><br><span class="line">ik1.set_db()</span><br></pre></td></tr></table></figure>



<h4 id="Python-中的接口如何实现？"><a href="#Python-中的接口如何实现？" class="headerlink" title="Python 中的接口如何实现？"></a>Python 中的接口如何实现？</h4><p>接口提取了一群类共同的函数，可以把接口当做一个函数的集合，然后让子类去实现接口中的函数。但是在 Python 中根本就没有一个叫做 interface 的关键字，如果非要去模仿接口的概念，可以使用抽象类来实现。抽象类是一个特殊的类，它的特殊之处在于只能被继承，不能被实例化。使用 abc 模块来实现抽象类。</p>
<h4 id="metaclass-作用？以及应用场景？"><a href="#metaclass-作用？以及应用场景？" class="headerlink" title="metaclass 作用？以及应用场景？"></a>metaclass 作用？以及应用场景？</h4><p>metaclass 即元类，metaclass 是类似创建类的模板，所有的类都是通过他来 create 的(调用<strong>new</strong>)，这使得你可以自由的控制创建类的那个过程，实现你所需要的功能。 我们可以使用元类创建单例模式和实现 ORM 模式。</p>
<h4 id="hasattr-、getattr-、setattr-的用法"><a href="#hasattr-、getattr-、setattr-的用法" class="headerlink" title="hasattr()、getattr()、setattr() 的用法"></a>hasattr()、getattr()、setattr() 的用法</h4><p>这三个方法属于 Python 的反射机制里面的，hasattr 可以判断一个对象是否含有某个属性，getattr 可以充当 get 获取对象属性的作用。而 setattr 可以充当 person.name = “liming”的赋值操作.</p>
<h4 id="请列举你知道的-Python-的魔法方法及用途。"><a href="#请列举你知道的-Python-的魔法方法及用途。" class="headerlink" title="请列举你知道的 Python 的魔法方法及用途。"></a>请列举你知道的 Python 的魔法方法及用途。</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1 __init__：</span><br><span class="line">类的初始化方法。它获取任何传给构造器的参数（比如我们调用 x = SomeClass(10, ‘foo’) ， __init__就会接到参数 10 和 ‘foo’ 。 __init__在 Python 的类定义中用的最多。</span><br><span class="line"></span><br><span class="line">2 __new__：</span><br><span class="line">__new__是对象实例化时第一个调用的方法，它只取下 cls 参数，并把其他参数传给 __init__ 。 __new__很少使用，但是也有它适合的场景，尤其是当类继承自一个像元组或者字符串这样不经常改变的类型的时候.</span><br><span class="line"></span><br><span class="line">3 __del__：</span><br><span class="line">__new__和 __init__是对象的构造器， __del__是对象的销毁器。它并非实现了语句 del x (因此该语句不等同于 x.__del__())。而是定义了当对象被垃圾回收时的行为。 当对象需要在销毁时做一些处理的时候这个方法很有用，比如 socket 对象、文件对象。但是需要注意的是，当 Python 解释器退出但对象仍然存活的时候，__del__并不会 执行。 所以养成一个手工清理的好习惯是很重要的，比如及时关闭连接。</span><br></pre></td></tr></table></figure>



<h4 id="如何知道一个-Python-对象的类型？"><a href="#如何知道一个-Python-对象的类型？" class="headerlink" title="如何知道一个 Python 对象的类型？"></a>如何知道一个 Python 对象的类型？</h4><p>type(object)</p>
<h4 id="Python-的传参是传值还是传址？"><a href="#Python-的传参是传值还是传址？" class="headerlink" title="Python 的传参是传值还是传址？"></a>Python 的传参是传值还是传址？</h4><p>Python 中的传参即不是传值也不是传地址，传的是对象的引用。</p>
<h4 id="Python-中的元类-metaclass-使用举例"><a href="#Python-中的元类-metaclass-使用举例" class="headerlink" title="Python 中的元类 (metaclass) 使用举例"></a>Python 中的元类 (metaclass) 使用举例</h4><p>可以使用元类实现一个单例模式，代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">"in init"</span>)</span><br><span class="line">        self.__instance = <span class="literal">None</span></span><br><span class="line">        super(Singleton, self).__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">"in call"</span>)</span><br><span class="line">        <span class="keyword">if</span> self.__instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            self.__instance = super(Singleton, self).__call__(*args, **kwargs)</span><br><span class="line">        print(self.__instance)</span><br><span class="line">        <span class="keyword">return</span> self.__instance</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(metaclass=Singleton)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">f1 = Foo()</span><br><span class="line">f2 = Foo()</span><br><span class="line">print(f1 <span class="keyword">is</span> f2)</span><br></pre></td></tr></table></figure>



<h4 id="简述-any-和-all-方法"><a href="#简述-any-和-all-方法" class="headerlink" title="简述 any() 和 all() 方法"></a>简述 any() 和 all() 方法</h4><p>any(x)：判断 x 对象是否为空对象，如果都为空、0、false，则返回 false，如果不都为空、0、false，则返回 true。 all(x)：如果 all(x) 参数 x 对象的所有元素不为 0、’’、False 或者 x 为空对象，则返回 True，否则返回 False。</p>
<h4 id="filter-方法求出列表所有奇数并构造新列表，a-1-2-3-4-5-6-7-8-9-10"><a href="#filter-方法求出列表所有奇数并构造新列表，a-1-2-3-4-5-6-7-8-9-10" class="headerlink" title="filter 方法求出列表所有奇数并构造新列表，a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"></a>filter 方法求出列表所有奇数并构造新列表，a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line">print(list(filter(<span class="keyword">lambda</span> num: num % <span class="number">2</span> &gt; <span class="number">0</span>, a)))</span><br></pre></td></tr></table></figure>



<h4 id="什么是猴子补丁？"><a href="#什么是猴子补丁？" class="headerlink" title="什么是猴子补丁？"></a>什么是猴子补丁？</h4><p>猴子补丁（monkey patching)：在运行时动态修改模块、类或函数，通常是添加功能或修正缺陷。猴子补丁在代码运行时内存中）发挥作用，不会修改源码，因此只对当前运行的程序实例有效。因为猴子补丁破坏了封装，而且容易导致程序与补丁代码的实现细节紧密耦合，所以被视为临时的变通方案，不是集成代码的推荐方式。</p>
<h4 id="在-Python-中是如何管理内存的？"><a href="#在-Python-中是如何管理内存的？" class="headerlink" title="在 Python 中是如何管理内存的？"></a>在 Python 中是如何管理内存的？</h4><p>垃圾回收：Python 不像 C++，Java 等语言一样，他们可以不用事先声明变量类型而直接对变量进行赋值。对 Python 语言来讲，对象的类型和内存都是在运行时确定的。这也是为什么我们称 Python 语言为动态类型的原因（这里我们把动态类型可以简单的归结为对变量内存地址的分配是在运行时自动判断变量类型并对变量进行赋值）。</p>
<p>引用计数：Python 采用了类似 Windows 内核对象一样的方式来对内存进行管理。每一个对象，都维护这一个对指向该对对象的引用的计数。当变量被绑定在一个对象上的时候，该变量的引用计数就是 1，(还有另外一些情况也会导致变量引用计数的增加)，系统会自动维护这些标签，并定时扫描，当某标签的引用计数变为 0 的时候，该对就会被回收。</p>
<ul>
<li>内存池机制 Python 的内存机制以金字塔行，1、2 层主要有操作系统进行操作</li>
<li>第 0 层是 C 中的 malloc，free 等内存分配和释放函数进行操作</li>
<li>第 1 层和第 2 层是内存池，有 Python 的接口函数 PyMem_Malloc 函数实现，当对象小于 256K 时有该层直接分配内存</li>
<li>第 3 层是最上层，也就是我们对 Python 对象的直接操作</li>
<li>在 C 中如果频繁的调用 malloc 与 free 时,是会产生性能问题的.再加上频繁的分配与释放小块的内存会产生内存碎片。Python 在这里主要干的工作有：<ul>
<li>如果请求分配的内存在 1~256 字节之间就使用自己的内存管理系统,否则直接使用 malloc。</li>
<li>这里还是会调用 malloc 分配内存，但每次会分配一块大小为 256k 的大块内存。</li>
</ul>
</li>
<li>经由内存池登记的内存到最后还是会回收到内存池，并不会调用 C 的 free 释放掉以便下次使用。对于简单的 Python 对象，例如数值、字符串，元组（tuple 不允许被更改)采用的是复制的方式(深拷贝?)，也就是说当将另一个变量 B 赋值给变量 A 时，虽然 A 和 B 的内存空间仍然相同，但当 A 的值发生变化时，会重新给 A 分配空间，A 和 B 的地址变得不再相同。</li>
</ul>
<h4 id="当退出-Python-时是否释放所有内存分配？"><a href="#当退出-Python-时是否释放所有内存分配？" class="headerlink" title="当退出 Python 时是否释放所有内存分配？"></a>当退出 Python 时是否释放所有内存分配？</h4><p>不是的，循环引用其他对象或引用自全局命名空间的对象的模块，在 Python 退出时并非完全释放。</p>
<p>另外，也不会释放 c 库保留的内存部分</p>
<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><h4 id="1）使用正则表达式匹配出-lt-html-gt-lt-h1-gt-www-baidu-com-lt-h1-gt-lt-html-gt-中的地址（2）a-”张明-98-分”，用-re-sub，将-98-替换为-100"><a href="#1）使用正则表达式匹配出-lt-html-gt-lt-h1-gt-www-baidu-com-lt-h1-gt-lt-html-gt-中的地址（2）a-”张明-98-分”，用-re-sub，将-98-替换为-100" class="headerlink" title="1）使用正则表达式匹配出&lt;html&gt;&lt;h1\&gt;www.baidu.com&lt;/h1&gt;&lt;/html&gt;中的地址（2）a=”张明 98 分”，用 re.sub，将 98 替换为 100"></a>1）使用正则表达式匹配出<code>&lt;html&gt;&lt;h1\&gt;www.baidu.com&lt;/h1&gt;&lt;/html&gt;</code>中的地址（2）a=”张明 98 分”，用 re.sub，将 98 替换为 100</h4><p>(1)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">"&lt;html&gt;&lt;h1&gt;www.baidu.com&lt;/h1&gt;&lt;/html&gt;"</span></span><br><span class="line">print(re.findall(<span class="string">".*?&lt;h1&gt;(.*?)&lt;/h1&gt;&lt;/html&gt;"</span>, s))</span><br></pre></td></tr></table></figure>

<p>(2)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">a=<span class="string">"张明 98 分"</span></span><br><span class="line">print(re.sub(<span class="string">"\d+"</span>, <span class="string">"100"</span>, a))</span><br></pre></td></tr></table></figure>



<h4 id="正则表达式匹配中-和-匹配区别？"><a href="#正则表达式匹配中-和-匹配区别？" class="headerlink" title="正则表达式匹配中(.)和(.?)匹配区别？"></a>正则表达式匹配中(.<em>)和(.</em>?)匹配区别？</h4><p>(.<em>) 为贪婪模式极可能多的匹配内容 ,(.</em>?) 为非贪婪模式又叫懒惰模式，一般匹配到结果就好，匹配字符的少为主</p>
<h4 id="写一段匹配邮箱的正则表达式"><a href="#写一段匹配邮箱的正则表达式" class="headerlink" title="写一段匹配邮箱的正则表达式"></a>写一段匹配邮箱的正则表达式</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">a = <span class="string">"example_001@gmail.com"</span></span><br><span class="line"></span><br><span class="line">pat = re.compile(<span class="string">"^[a-zA-Z0-9]+[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$"</span>)</span><br><span class="line">print(pat.findall(a))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通用邮箱正则匹配</span></span><br><span class="line"><span class="string">"""(?：[a-z0-9!#$%&amp;'*+/=?^_`&#123;|&#125;~-]+(?：\.[a-z0-9!#$%&amp;'*+/=?^_`&#123;|&#125;~-]+)*|"(?：[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?：(?：[a-z0-9](?：[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?：[a-z0-9-]*[a-z0-9])?|\[(?：(?：25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.)&#123;3&#125;(?：25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]：(?：[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])"""</span></span><br></pre></td></tr></table></figure>



<h3 id="其他内容"><a href="#其他内容" class="headerlink" title="其他内容"></a>其他内容</h3><h4 id="解释一下-Python-中-pass-语句的作用？"><a href="#解释一下-Python-中-pass-语句的作用？" class="headerlink" title="解释一下 Python 中 pass 语句的作用？"></a>解释一下 Python 中 pass 语句的作用？</h4><p>pass 实际上就是一个占位符，在写一个函数但是不确定里面写啥的时候，这个时候可以使用 pass。</p>
<h4 id="Python-中的作用域"><a href="#Python-中的作用域" class="headerlink" title="Python 中的作用域"></a>Python 中的作用域</h4><p>Python 中，一个变量的作用域总是由在代码中被赋值的地方所决定 当 Python 遇到一个变量的话它会按照这的顺序进行搜索 本地作用域(Local)—&gt;当前作用域被嵌入的本地作用域(Enclosing locals)—&gt;全局/模块作用域(Global)—&gt;内置作用域(Built-<strong>in</strong>)</p>
<h4 id="三元运算写法和应用场景？"><a href="#三元运算写法和应用场景？" class="headerlink" title="三元运算写法和应用场景？"></a>三元运算写法和应用场景？</h4><p>Python 中的三元运算又称三目运算，是对简单的条件语句的简写。 是一种比较 Pythonic 的学法，形式为：val = 1 if 条件成立 else 2 代码示例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(val)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span> <span class="keyword">if</span> val &gt; <span class="number">60</span> <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">print(run(<span class="number">100</span>))</span><br></pre></td></tr></table></figure>



<h4 id="了解-enumerate-么？"><a href="#了解-enumerate-么？" class="headerlink" title="了解 enumerate 么？"></a>了解 enumerate 么？</h4><p>enumerate 可以在迭代一个对象的时候，同时获取当前对象的索引和值。 代码示例如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_lowercase</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> idx, i <span class="keyword">in</span> enumerate(ascii_lowercase):</span><br><span class="line">    print(idx, i)</span><br></pre></td></tr></table></figure>



<h4 id="列举-5-个-Python-中的标准模块"><a href="#列举-5-个-Python-中的标准模块" class="headerlink" title="列举 5 个 Python 中的标准模块"></a>列举 5 个 Python 中的标准模块</h4><p>pathlib：路径操作模块，比 os 模块拼接方便。 urllib：网络请求模块，包括对 url 的结构解析。 asyncio： Python 的异步库，基于事件循环的协程模块。 re：正则表达式模块。 itertools：提供了操作生成器的一些模块。</p>
<h4 id="如何在函数中设置一个全局变量"><a href="#如何在函数中设置一个全局变量" class="headerlink" title="如何在函数中设置一个全局变量"></a>如何在函数中设置一个全局变量</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> count</span><br><span class="line">    count = count + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    print(count)</span><br><span class="line"></span><br><span class="line">run()</span><br></pre></td></tr></table></figure>



<h4 id="pathlib-的用法举例"><a href="#pathlib-的用法举例" class="headerlink" title="pathlib 的用法举例"></a>pathlib 的用法举例</h4><p>具体已收录在印象笔记里</p>
<h4 id="Python-中的异常处理，写一个简单的应用场景"><a href="#Python-中的异常处理，写一个简单的应用场景" class="headerlink" title="Python 中的异常处理，写一个简单的应用场景"></a>Python 中的异常处理，写一个简单的应用场景</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="number">1</span> + <span class="string">''</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br></pre></td></tr></table></figure>



<h4 id="Python-中递归的最大次数，那如何突破呢？"><a href="#Python-中递归的最大次数，那如何突破呢？" class="headerlink" title="Python 中递归的最大次数，那如何突破呢？"></a>Python 中递归的最大次数，那如何突破呢？</h4><p>默认最大1000次，突破方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.setrecursionlimit(<span class="number">1500</span>)</span><br></pre></td></tr></table></figure>

<p>另外需要注意的是 sys.setrecursionlimit() 只是修改解释器在解释时允许的最大递归次数，此外，限制最大递归次数的还和操作系统有关。</p>
<h4 id="什么是面向对象的-mro"><a href="#什么是面向对象的-mro" class="headerlink" title="什么是面向对象的 mro"></a>什么是面向对象的 mro</h4><p>Python 是支持面向对象编程的，同时也是支持多重继承的。一般我们通过调用类对象的 mro()方法获取其继承关系。</p>
<h4 id="isinstance-作用以及应用场景？"><a href="#isinstance-作用以及应用场景？" class="headerlink" title="isinstance 作用以及应用场景？"></a>isinstance 作用以及应用场景？</h4><p>isinstance 是判断一个对象是否为另一个对象的子类的，例如我们知道在 Python3 中 bool 类型其实是 int 的子类，所以我们可以对其检测。</p>
<h4 id="什么是断言？应用场景？"><a href="#什么是断言？应用场景？" class="headerlink" title="什么是断言？应用场景？"></a>什么是断言？应用场景？</h4><p>在 Python 中是断言语句 assert 实现此功能，一般在表达式为 True 的情况下，程序才能通过。</p>
<h4 id="lambda-表达式格式以及应用场景？"><a href="#lambda-表达式格式以及应用场景？" class="headerlink" title="lambda 表达式格式以及应用场景？"></a>lambda 表达式格式以及应用场景？</h4><p>lambda 表达式其实就是一个匿名函数,在函数编程中经常作为参数使用。</p>
<h4 id="新式类和旧式类的区别"><a href="#新式类和旧式类的区别" class="headerlink" title="新式类和旧式类的区别"></a>新式类和旧式类的区别</h4><p>Python 2.x 中默认都是经典类，只有显式继承了 object 才是新式类，Python 3.x 中默认都是新式类，经典类被移除，不必显式的继承 object。 新式类都从 object 继承，经典类不需要。 新式类的 MRO(method resolution order 基类搜索顺序)算法采用 C3 算法广度优先搜索，而旧式类的 MRO 算法是采用深度优先搜索。 新式类相同父类只执行一次构造函数，经典类重复执行多次。</p>
<h4 id="dir-是干什么用的？"><a href="#dir-是干什么用的？" class="headerlink" title="dir()是干什么用的？"></a>dir()是干什么用的？</h4><p>当在使用某一个对象不知道有哪些属性或者方法可以使用时，此时可以通过 dir() 方法进行查看。</p>
<h4 id="一个包里有三个模块，demo1-py、demo2-py、demo3-py，但使用-from-tools-import-导入模块时，如何保证只有-demo1、demo3-被导入了。"><a href="#一个包里有三个模块，demo1-py、demo2-py、demo3-py，但使用-from-tools-import-导入模块时，如何保证只有-demo1、demo3-被导入了。" class="headerlink" title="一个包里有三个模块，demo1.py、demo2.py、demo3.py，但使用 from tools import *导入模块时，如何保证只有 demo1、demo3 被导入了。"></a>一个包里有三个模块，demo1.py、demo2.py、demo3.py，但使用 from tools import *导入模块时，如何保证只有 demo1、demo3 被导入了。</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在__init__.py文件中加入</span></span><br><span class="line">__all__ = [<span class="string">"demo1.py"</span>, <span class="string">"demo3.py"</span>]</span><br></pre></td></tr></table></figure>



<h4 id="列举-5-个-Python-中的异常类型以及其含义"><a href="#列举-5-个-Python-中的异常类型以及其含义" class="headerlink" title="列举 5 个 Python 中的异常类型以及其含义"></a>列举 5 个 Python 中的异常类型以及其含义</h4><p>AttributeError 对象没有这个属性 </p>
<p>NotImplementedError 尚未实现的方法</p>
<p> <strong>StopIteration</strong> 迭代器没有更多的值</p>
<p> <strong>TypeError</strong> 对类型无效的操作</p>
<p> IndentationError 缩进错误</p>
<h4 id="copy-和-deepcopy-的区别是什么？"><a href="#copy-和-deepcopy-的区别是什么？" class="headerlink" title="copy 和 deepcopy 的区别是什么？"></a>copy 和 deepcopy 的区别是什么？</h4><p>copy.copy()浅拷贝，只拷贝父对象，不会拷贝对象的内部的子对象。 copy.deepcopy()深拷贝，拷贝对象及其子对象。</p>
<h4 id="代码中经常遇到的args-kwargs-含义及用法。"><a href="#代码中经常遇到的args-kwargs-含义及用法。" class="headerlink" title="代码中经常遇到的args, *kwargs 含义及用法。"></a>代码中经常遇到的<em>args, *</em>kwargs 含义及用法。</h4><p>在函数定义中使用 <em>args 和*</em>kwargs 传递可变长参数。 <em>args 用来将参数打包成 tuple 给函数体调用。 *</em>kwargs 打包关键字参数成 dict 给函数体调用。</p>
<h4 id="Python-中会有函数或成员变量包含单下划线前缀和结尾，和双下划线前缀结尾，区别是什么"><a href="#Python-中会有函数或成员变量包含单下划线前缀和结尾，和双下划线前缀结尾，区别是什么" class="headerlink" title="Python 中会有函数或成员变量包含单下划线前缀和结尾，和双下划线前缀结尾，区别是什么?"></a>Python 中会有函数或成员变量包含单下划线前缀和结尾，和双下划线前缀结尾，区别是什么?</h4><p>“单下划线” 开始的成员变量叫做保护变量，意思是只有类对象和子类对象自己能访问到这些变量； “双下划线” 开始的是私有成员，意思是只有类对象自己能访问，连子类对象也不能访问到这个数据。</p>
<p>以单下划线开头（_foo）的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用“from xxx import *”而导入；以双下划线开头的（__foo）代表类的私有成员；</p>
<p>以双下划线开头和结尾的（_<em>foo*</em>）代表 Python 里特殊方法专用的标识，如 _<strong>***init</strong>（）代表类的构造函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>：</span></span><br><span class="line"><span class="class">    """<span class="title">docstring</span> <span class="title">for</span> <span class="title">ClassName</span>"""</span></span><br><span class="line"><span class="class">    <span class="title">def</span> <span class="title">__init__</span><span class="params">(self)</span>：</span></span><br><span class="line">       self.__age = 12</span><br><span class="line">       self._sex = <span class="number">12</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_sex</span><span class="params">(self)</span>：</span></span><br><span class="line"><span class="function">        <span class="title">return</span> "男"</span></span><br><span class="line"><span class="function">    <span class="title">def</span> <span class="title">set_age</span><span class="params">(self,age)</span>：</span></span><br><span class="line">        self.__age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_age</span><span class="params">(self)</span>：</span></span><br><span class="line"><span class="function">        <span class="title">return</span> <span class="title">self</span>.<span class="title">__age</span>   </span></span><br><span class="line"><span class="function"></span></span><br><span class="line">if __name__ == '__main__'：</span><br><span class="line">    p=Person()</span><br><span class="line">    print(p._sex)</span><br><span class="line">    <span class="comment">#print(p.__age)</span></span><br><span class="line">    <span class="comment">#Python 自动将__age 解释成 _Person__age,于是我们用 _Person__age 访问，这次成功。</span></span><br><span class="line">    print(p._Person__age)</span><br></pre></td></tr></table></figure>



<h4 id="w、a-、wb-文件写入模式的区别"><a href="#w、a-、wb-文件写入模式的区别" class="headerlink" title="w、a+、wb 文件写入模式的区别"></a>w、a+、wb 文件写入模式的区别</h4><p> w 表示写模式支持写入字符串，如果文件存在则覆盖。 a+ 和 w 的功能类型不过如果文件存在的话内容不会覆盖而是追加。 wb 是写入二进制字节类型的数据。</p>
<h4 id="举例-sort-和-sorted-的区别"><a href="#举例-sort-和-sorted-的区别" class="headerlink" title="举例 sort 和 sorted 的区别"></a>举例 sort 和 sorted 的区别</h4><p>相同之处 sort 和 sorted 都可以对列表元素排序，sort() 与 sorted() 的不同在于，sort 是在原位重新排列列表，而 sorted() 是产生一个新的列表。 sort 是应用在 list 上的方法，sorted 可以对所有可迭代的对象进行排序操作。</p>
<p>list 的 sort 方法返回的是对已经存在的列表进行操作，而内建函数 sorted 方法返回的是一个新的 list，而不是在原来的基础上进行的操作。</p>
<h4 id="什么是负索引？"><a href="#什么是负索引？" class="headerlink" title="什么是负索引？"></a>什么是负索引？</h4><p>负索引一般表示的是从后面取元素。</p>
<h4 id="pprint-模块是干什么的？"><a href="#pprint-模块是干什么的？" class="headerlink" title="pprint 模块是干什么的？"></a>pprint 模块是干什么的？</h4><p>pprint 是 print 函数的美化版，可以通过 import pprint 导入。</p>
<h4 id="解释一下-Python-中的赋值运算符"><a href="#解释一下-Python-中的赋值运算符" class="headerlink" title="解释一下 Python 中的赋值运算符"></a>解释一下 Python 中的赋值运算符</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过下面的代码列举出所有的赋值运算符</span></span><br><span class="line">a=<span class="number">7</span></span><br><span class="line">a+=<span class="number">1</span></span><br><span class="line">print(a)</span><br><span class="line">a-=<span class="number">1</span></span><br><span class="line">print(a)</span><br><span class="line">a*=<span class="number">2</span></span><br><span class="line">print(a)</span><br><span class="line">a/=<span class="number">2</span></span><br><span class="line">print(a)</span><br><span class="line">a**=<span class="number">2</span></span><br><span class="line">print(a)</span><br><span class="line">a//=<span class="number">3</span></span><br><span class="line">print(a)</span><br><span class="line">a%=<span class="number">4</span></span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure>



<h4 id="解释一下-Python-中的逻辑运算符"><a href="#解释一下-Python-中的逻辑运算符" class="headerlink" title="解释一下 Python 中的逻辑运算符"></a>解释一下 Python 中的逻辑运算符</h4><p>Python 中有三个逻辑运算符：and、or、not</p>
<h4 id="在-Python-中如何使用多进制数字？"><a href="#在-Python-中如何使用多进制数字？" class="headerlink" title="在 Python 中如何使用多进制数字？"></a>在 Python 中如何使用多进制数字？</h4><p>我们在 Python 中，除十进制外还可以使用二进制、八进制和十六进制</p>
<ul>
<li><p>二进制数字由 0 和 1 组成，我们使用 0b 或 0B 前缀表示二进制数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="number">0b10101</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 bin()函数将一个数字转换为它的二进制形式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(bin(<span class="number">0xf</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>八进制数由数字 0-7 组成，用前缀 0o 或 0O 表示 8 进制数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(oct(<span class="number">8</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>十六进数由数字 0-15 组成，用前缀 0x 或者 0X 表示 16 进制数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(hex(<span class="number">16</span>))</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h4 id="怎样声明多个变量并赋值？"><a href="#怎样声明多个变量并赋值？" class="headerlink" title="怎样声明多个变量并赋值？"></a>怎样声明多个变量并赋值？</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br></pre></td></tr></table></figure>



<h3 id="算法和数据结构"><a href="#算法和数据结构" class="headerlink" title="算法和数据结构"></a>算法和数据结构</h3><h4 id="已知："><a href="#已知：" class="headerlink" title="已知："></a>已知：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">AList = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">BSet = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>

<p>(1) 从 AList 和 BSet 中 查找 4，最坏时间复杂度哪个大？ (2) 从 AList 和 BSet 中 插入 4，最坏时间复杂度哪个大？</p>
<p>(1) 对于查找，列表和集合的最坏时间复杂度都是 O(n)，所以一样的。 (2) 列表操作插入的最坏时间复杂度为 o(n),集合为 o(1)，所以 Alist 大。 set 是哈希表所以操作的复杂度基本上都是 o(1)。</p>
<h4 id="用-Python-实现一个二分查找的函数"><a href="#用-Python-实现一个二分查找的函数" class="headerlink" title="用 Python 实现一个二分查找的函数"></a>用 Python 实现一个二分查找的函数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(arr, target)</span>:</span></span><br><span class="line">    left = <span class="number">0</span></span><br><span class="line">    right = len(arr) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">      	<span class="comment"># (n-m)/2 + m = (n + m)/2</span></span><br><span class="line">        mid = (left + right) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> arr[mid] &lt; target:</span><br><span class="line">            left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> arr[mid] &gt; target:</span><br><span class="line">            right = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">f"index: <span class="subst">&#123;mid&#125;</span>, value: <span class="subst">&#123;arr[mid]&#125;</span>"</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">arr = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">binary_search(arr, <span class="number">8</span>)</span><br></pre></td></tr></table></figure>



<h4 id="Python-单例模式的实现方法"><a href="#Python-单例模式的实现方法" class="headerlink" title="Python 单例模式的实现方法"></a>Python 单例模式的实现方法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, title)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(cls, <span class="string">"_ins"</span>):</span><br><span class="line">            cls._ins = super().__new__(cls)</span><br><span class="line">        print(<span class="string">'in __new__'</span>)</span><br><span class="line">        <span class="keyword">return</span> cls._ins</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, title)</span>:</span></span><br><span class="line">        print(<span class="string">"in __init__"</span>)</span><br><span class="line">        super().__init__()</span><br><span class="line">        self.title = title</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    b = Book(<span class="string">'The Spider Book'</span>)</span><br><span class="line">    b2 = Book(<span class="string">'The Flask Book'</span>)</span><br><span class="line">    print(id(b))</span><br><span class="line">    print(id(b2))</span><br><span class="line">    print(b.title)</span><br><span class="line">    print(b2.title)</span><br></pre></td></tr></table></figure>



<h4 id="使用-Python-实现一个斐波那契数列"><a href="#使用-Python-实现一个斐波那契数列" class="headerlink" title="使用 Python 实现一个斐波那契数列"></a>使用 Python 实现一个斐波那契数列</h4><p>斐波那契数列：数列从第 3 项开始，每一项都等于前两项之和。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci</span><span class="params">(num)</span>:</span></span><br><span class="line">    a, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    output = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(num):</span><br><span class="line">        a, b = b, a + b</span><br><span class="line">        output.append(b)</span><br><span class="line">    print(output)</span><br><span class="line"></span><br><span class="line">fibonacci(<span class="number">5</span>)</span><br></pre></td></tr></table></figure>



<h4 id="找出列表中的重复数字"><a href="#找出列表中的重复数字" class="headerlink" title="找出列表中的重复数字"></a>找出列表中的重复数字</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">-3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">95</span>, <span class="number">95</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">-3</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">duplicate</span><span class="params">(arr)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> arr <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> len(arr) &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    num_set = set()</span><br><span class="line">    duplication = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> idx, i <span class="keyword">in</span> enumerate(arr):</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> num_set:</span><br><span class="line">            num_set.add(i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            duplication[idx] = i</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> duplication</span><br><span class="line"></span><br><span class="line">print(duplicate(arr))</span><br></pre></td></tr></table></figure>



<h4 id="找出列表中的单个数字"><a href="#找出列表中的单个数字" class="headerlink" title="找出列表中的单个数字"></a>找出列表中的单个数字</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_single</span><span class="params">(arr)</span>:</span></span><br><span class="line"></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> arr:</span><br><span class="line">        result ^= i</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> result == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">"没有落单元素"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">f"落单元素 <span class="subst">&#123;result&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">find_single(arr)</span><br></pre></td></tr></table></figure>



<h4 id="写一个冒泡排序"><a href="#写一个冒泡排序" class="headerlink" title="写一个冒泡排序"></a>写一个冒泡排序</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">55</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    n = len(arr)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(n - i <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> arr[j] &gt; arr[j+<span class="number">1</span>]:</span><br><span class="line">                arr[j], arr[j+<span class="number">1</span>] = arr[j+<span class="number">1</span>], arr[j]</span><br><span class="line">        print(arr)</span><br><span class="line"></span><br><span class="line">    print(arr)</span><br><span class="line"></span><br><span class="line">bubble_sort(arr)</span><br></pre></td></tr></table></figure>



<h4 id="写一个快速排序"><a href="#写一个快速排序" class="headerlink" title="写一个快速排序"></a>写一个快速排序</h4><h4 id="写一个拓扑排序"><a href="#写一个拓扑排序" class="headerlink" title="写一个拓扑排序"></a>写一个拓扑排序</h4><h4 id="Python-实现一个二进制计算"><a href="#Python-实现一个二进制计算" class="headerlink" title="Python 实现一个二进制计算"></a>Python 实现一个二进制计算</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_add</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    result = bin(int(a, <span class="number">2</span>) + int(b, <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> result[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    a = input(<span class="string">"a: "</span>)</span><br><span class="line">    b = input(<span class="string">"a: "</span>)</span><br><span class="line">    print(binary_add(a, b))</span><br></pre></td></tr></table></figure>



<h4 id="有一组“-”和“-”符号，要求将“-”排到左边，“-”排到右边，写出具体的实现方法。"><a href="#有一组“-”和“-”符号，要求将“-”排到左边，“-”排到右边，写出具体的实现方法。" class="headerlink" title="有一组“+”和“-”符号，要求将“+”排到左边，“-”排到右边，写出具体的实现方法。"></a>有一组“+”和“-”符号，要求将“+”排到左边，“-”排到右边，写出具体的实现方法。</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">"++++++----+++----"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(s)</span>:</span></span><br><span class="line"></span><br><span class="line">    ns = s.replace(<span class="string">'+'</span>, <span class="string">"0"</span>).replace(<span class="string">'-'</span>, <span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(sorted(ns)).replace(<span class="string">'0'</span>, <span class="string">"+"</span>).replace(<span class="string">'1'</span>, <span class="string">'-'</span>)</span><br><span class="line"></span><br><span class="line">print(func1(s))</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>链表（上）</title>
    <url>/2020/08/31/article-32/</url>
    <content><![CDATA[<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>缓存的作用:提高数据读取性能。 缓存设计的好不好，要看自己所设计的缓存的命中率高不高。</p>
<h4 id="缓存的应用场景"><a href="#缓存的应用场景" class="headerlink" title="缓存的应用场景"></a>缓存的应用场景</h4><p>硬件中的缓存: CPU缓存，而cpu缓存又可以分为寄存器，一级缓存，二级缓存，三级缓存。 软件中的缓存: 数据库缓存，数据库本身产品就自带缓存。redis也可以作为数据库缓存. 浏览器缓存，就是我们常说的Cookie,本质上就是一个文件。</p>
<h4 id="缓存淘汰策略"><a href="#缓存淘汰策略" class="headerlink" title="缓存淘汰策略"></a>缓存淘汰策略</h4><p>先进先出策略 FIFO（First In，First Out）、最少使用策略 LFU（Least Frequently Used）、最近最少使用策略 LRU（Least Recently Used）</p>
<p>eg：</p>
<p>FIFO（先进先出调度器） 、Capacity Scheduler（容量调度器）和 Fair Sceduler（公平调度器）。</p>
<h3 id="链表结构"><a href="#链表结构" class="headerlink" title="链表结构"></a>链表结构</h3><p><em>不需要一块连续的内存空间，它通过“指针”将一组<strong>零散的内存块</strong>串联起来使用。</em></p>
<p>对内存要求方面: 数组对内存的要求更高。因为数组需要一块连续内存空间来存放数据。（可能出现的问题就是:内存总的剩余空间足够，但是申请容量较大的数组时申请失败） 链表对内存的要求较低，是因为链表不需要连续的内存空间，只要内存剩余空间足够，无论是否连续，用链表来申请空间一定会成功。 但是要注意:链表虽然方便。但是内存开销比数组大了将近一倍，假设存储100个整数，数组400个字节的存储空间足够了。但是如果用链表存储100个整数，链表得需要800个字节的存储空间，因为链表中的每个节点不止要存储数据，还要存储地址，内存的利用率就比数组低太多了。 由此还可以得出:如果内存容量本身就很小，要存储的数据也比较多。选择数组来存储数据更好，如果内存空间充足，那我们在存储数据的时候到底选择链表还是数组。这个就视具体的业务场景而定了。</p>
<p>三种常见链表结构：单链表， 双链表和循环链表</p>
<h4 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h4><p>习惯性地把第一个结点叫作<strong>头结点</strong>，把最后一个结点叫作<strong>尾结点</strong>。</p>
<p><strong>头结点</strong>用来记录链表的基地址。有了它，我们就可以遍历得到整条链表。</p>
<p><strong>尾结点特殊的地方是</strong>：指针不是指向下一个结点，而是指向一个空地址 NULL，表示这是链表上最后一个结点。</p>
<h5 id="查找、删除和插入"><a href="#查找、删除和插入" class="headerlink" title="查找、删除和插入"></a>查找、删除和插入</h5><p>在链表中插入或者删除一个数据，我们并不需要为了保持内存的连续性而搬移结点，因为链表的存储空间本身就不是连续的。所以，在链表中插入和删除一个数据是非常快速的。</p>
<p>但是，因为链表中的数据并非连续存储的，所以无法像数组那样，根据首地址和下标，通过寻址公式就能直接计算出对应的内存地址，而是需要根据指针一个结点一个结点地依次遍历，直到找到相应的结点。时间复杂度O(n)</p>
<h4 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h4><p>循环链表是一种特殊的单链表</p>
<p>跟单链表唯一的区别就在尾结点。我们知道，单链表的尾结点指针指向空地址，表示这就是最后的结点了。而循环链表的尾结点指针是指向链表的头结点。</p>
<h4 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h4><p>它支持两个方向，每个结点不止有一个后继指针 next 指向后面的结点，还有一个前驱指针 prev 指向前面的结点。双向链表需要额外的两个空间来存储后继结点和前驱结点的地址。</p>
<p>双向链表可以支持 O(1) 时间复杂度的情况下找到前驱结点。</p>
<h4 id="空间换取时间"><a href="#空间换取时间" class="headerlink" title="空间换取时间"></a>空间换取时间</h4><p>当内存空间充足的时候，如果我们更加追求代码的执行速度，我们就可以选择空间复杂度相对较高、但时间复杂度相对很低的算法或者数据结构。</p>
<p>对于执行较慢的程序，可以通过消耗更多的内存（空间换时间）来进行优化；而消耗过多内存的程序，可以通过消耗更多的时间（时间换空间）来降低内存的消耗。</p>
<h3 id="链表-VS-数组"><a href="#链表-VS-数组" class="headerlink" title="链表 VS 数组"></a>链表 VS 数组</h3><p>数组简单易用，在实现上使用的是连续的内存空间，可以借助 CPU 的缓存机制，预读数组中的数据，所以访问效率更高。而链表在内存中并不是连续存储，所以对 CPU 缓存不友好，没办法有效预读。<strong><em>链表本身没有大小的限制，天然地支持动态扩容，这是它与数组最大的区别</em></strong>。</p>
<p>eg：</p>
<p>CPU在从内存读取数据的时候，会先把读取到的数据加载到CPU的缓存中。而CPU每次从内存读取数据并不是只读取那个特定要访问的地址，而是读取一个数据块(这个大小我不太确定。。)并保存到CPU缓存中，然后下次访问内存数据的时候就会先从CPU缓存开始查找，如果找到就不需要再从内存中取。这样就实现了比内存访问速度更快的机制，也就是CPU缓存存在的意义:为了弥补内存访问速度过慢与CPU执行速度快之间的差异而引入。 对于数组来说，存储空间是连续的，所以在加载某个下标的时候可以把以后的几个下标元素也加载到CPU缓存这样执行速度会快于存储空间不连续的链表存储。</p>
<h3 id="如何基于链表实现-LRU-缓存淘汰算法？"><a href="#如何基于链表实现-LRU-缓存淘汰算法？" class="headerlink" title="如何基于链表实现 LRU 缓存淘汰算法？"></a>如何基于链表实现 LRU 缓存淘汰算法？</h3><p>维护一个有序单链表，越靠近链表尾部的结点是越早之前访问的。</p>
<p>当有一个新的数据被访问时，我们从链表头开始顺序遍历链表。</p>
<ol>
<li>如果此数据之前已经被缓存在链表中了，我们遍历得到这个数据对应的结点，并将其从原来的位置删除，然后再插入到链表的头部。</li>
<li>如果此数据没有在缓存链表中，又可以分为两种情况：<ul>
<li>如果此时缓存未满，则将此结点直接插入到链表的头部；</li>
<li>如果此时缓存已满，则链表尾结点删除，将新的数据结点插入链表的头部。</li>
</ul>
</li>
</ol>
<p>思路优化：引入散列表（Hash table）来记录每个数据的位置，将缓存访问的时间复杂度降到 O(1)。</p>
<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><h4 id="如何判断一个字符串是否是回文字符串的问题？"><a href="#如何判断一个字符串是否是回文字符串的问题？" class="headerlink" title="如何判断一个字符串是否是回文字符串的问题？"></a>如何判断一个字符串是否是回文字符串的问题？</h4><p>1 快慢指针定位中间节点<br>2 从中间节点对后半部分逆序<br>3 前后半部分比较，判断是否为回文<br>4 后半部分逆序复原</p>
<p>时间复杂度On, 空间复杂度O1</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数组</title>
    <url>/2020/08/28/article-31/</url>
    <content><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="专业解释"><a href="#专业解释" class="headerlink" title="专业解释"></a>专业解释</h3><p><strong>数组（Array）是一种 <em>线性表</em> 数据结构。它用一组 <em>连续的内存空间</em>，来存储一组具有 <em>相同类型的数据</em>。</strong></p>
<h4 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h4><p>线性表就是数据排成像一条线一样的结构</p>
<h4 id="连续的内存空间和相同类型的数据"><a href="#连续的内存空间和相同类型的数据" class="headerlink" title="连续的内存空间和相同类型的数据"></a>连续的内存空间和相同类型的数据</h4><h4 id="元素存储的内存地址计算公式"><a href="#元素存储的内存地址计算公式" class="headerlink" title="元素存储的内存地址计算公式"></a>元素存储的内存地址计算公式</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a[i]_address &#x3D; base_address + i * data_type_size</span><br></pre></td></tr></table></figure>

<h4 id="数组和链表的区别"><a href="#数组和链表的区别" class="headerlink" title="数组和链表的区别"></a>数组和链表的区别</h4><p>数组支持随机访问，根据下标随机访问的时间复杂度为 O(1);链表适合插入、删除，时间复杂度 O(1)</p>
<h4 id="优化插入数据"><a href="#优化插入数据" class="headerlink" title="优化插入数据"></a>优化插入数据</h4><p>我们在某个位置插入一个新的元素时，就必须按照刚才的方法搬移 k 之后的数据。但是，如果数组中存储的数据并没有任何规律，数组只是被当作一个存储数据的集合。在这种情况下，如果要将某个数据插入到第 k 个位置，为了避免大规模的数据搬移，我们还有一个简单的办法就是，直接将第 k 位的数据搬移到数组元素的最后，把新的元素直接放入第 k 个位置</p>
<h4 id="优化删除操作"><a href="#优化删除操作" class="headerlink" title="优化删除操作"></a>优化删除操作</h4><p>先对要删除的数据进行记录，当数组空间不足时统一执行删除操作，与JVM垃圾回收类似。</p>
<h4 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h4><p>优势：支持数组常规操作，支持动态扩容</p>
<p>选择场景：对于业务开发，直接使用容器就足够了，省时省力。毕竟损耗一丢丢性能，完全不会影响到系统整体的性能。但如果你是做一些非常底层的开发，比如开发网络框架，性能的优化需要做到极致，这个时候数组就会优于容器，成为首选</p>
<h4 id="数组为何要使用“0”作为起始索引"><a href="#数组为何要使用“0”作为起始索引" class="headerlink" title="数组为何要使用“0”作为起始索引"></a>数组为何要使用“0”作为起始索引</h4><p>索引正确定义为“偏移量”，且如果使用“1”作为起始下标，内存地址计算公式变为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a[k]_address &#x3D; base_address + (k-1)*type_size</span><br></pre></td></tr></table></figure>

<p>此时会使cpu多进行一次减法运算。</p>
<h4 id="内容小结"><a href="#内容小结" class="headerlink" title="内容小结"></a>内容小结</h4><p>数组用一块连续的内存空间，来存储相同类型的一组数据，最大的特点就是支持随机访问，但插入、删除操作也因此变得比较低效，平均情况时间复杂度为 O(n)。在平时的业务开发中，我们可以直接使用编程语言提供的容器类，但是，如果是特别底层的开发，直接使用数组可能会更合适。</p>
<h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><h5 id="前面我基于数组的原理引出-JVM-的标记清除垃圾回收算法的核心理念。我不知道你是否使用-Java-语言，理解-JVM，如果你熟悉，可以在评论区回顾下你理解的标记清除垃圾回收算法。"><a href="#前面我基于数组的原理引出-JVM-的标记清除垃圾回收算法的核心理念。我不知道你是否使用-Java-语言，理解-JVM，如果你熟悉，可以在评论区回顾下你理解的标记清除垃圾回收算法。" class="headerlink" title="前面我基于数组的原理引出 JVM 的标记清除垃圾回收算法的核心理念。我不知道你是否使用 Java 语言，理解 JVM，如果你熟悉，可以在评论区回顾下你理解的标记清除垃圾回收算法。"></a>前面我基于数组的原理引出 JVM 的标记清除垃圾回收算法的核心理念。我不知道你是否使用 Java 语言，理解 JVM，如果你熟悉，可以在评论区回顾下你理解的标记清除垃圾回收算法。</h5><p>大多数主流虚拟机采用可达性分析算法来判断对象是否存活，在标记阶段，会遍历所有 GC ROOTS，将所有 GC ROOTS 可达的对象标记为存活。只有当标记工作完成后，清理工作才会开始。</p>
<p>不足：1.效率问题。标记和清理效率都不高，但是当知道只有少量垃圾产生时会很高效。2.空间问题。会产生不连续的内存空间碎片。</p>
<h5 id="前面我们讲到一维数组的内存寻址公式，那你可以思考一下，类比一下，二维数组的内存寻址公式是怎样的呢？"><a href="#前面我们讲到一维数组的内存寻址公式，那你可以思考一下，类比一下，二维数组的内存寻址公式是怎样的呢？" class="headerlink" title="前面我们讲到一维数组的内存寻址公式，那你可以思考一下，类比一下，二维数组的内存寻址公式是怎样的呢？"></a>前面我们讲到一维数组的内存寻址公式，那你可以思考一下，类比一下，二维数组的内存寻址公式是怎样的呢？</h5><p>对于 m * n 的数组，a [ i ][ j ] (i &lt; m,j &lt; n)的地址为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">address &#x3D; base_address + ( i * n + j) * type_size</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>队列</title>
    <url>/2020/08/31/article-35/</url>
    <content><![CDATA[<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><h3 id="结构特点"><a href="#结构特点" class="headerlink" title="结构特点"></a>结构特点</h3><p>先进者先出</p>
<p>队列跟栈一样，也是一种操作受限的线性表数据结构</p>
<h3 id="顺序队列和链式队列"><a href="#顺序队列和链式队列" class="headerlink" title="顺序队列和链式队列"></a>顺序队列和链式队列</h3><p>用数组实现的队列叫作<strong><em>顺序队列*</em></strong>，用链表实现的队列叫作<strong>链式队列</strong>。*</p>
<h4 id="顺序队列"><a href="#顺序队列" class="headerlink" title="顺序队列"></a>顺序队列</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueues</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.length = <span class="number">3</span></span><br><span class="line">        self.my_queue = [<span class="number">0</span>] * self.length</span><br><span class="line">        self.head = <span class="number">0</span></span><br><span class="line">        self.tail = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, val)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        入队</span></span><br><span class="line"><span class="string">        :param val:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> self.tail == self.length:</span><br><span class="line">            <span class="keyword">if</span> self.head == <span class="number">0</span>:</span><br><span class="line">                self.my_queue = self.my_queue[self.head:] + self.my_queue[:self.head]</span><br><span class="line">                self.head = <span class="number">0</span></span><br><span class="line">                self.tail -= self.head</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">f"before push, now length is <span class="subst">&#123;self.tail&#125;</span>"</span>)</span><br><span class="line">        self.my_queue[self.tail] = val</span><br><span class="line">        print(<span class="string">f"push <span class="subst">&#123;val&#125;</span>"</span>)</span><br><span class="line">        self.tail += <span class="number">1</span></span><br><span class="line">        print(<span class="string">f"after push, now length is <span class="subst">&#123;self.tail&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        出队</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> self.head == self.tail:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">f"before pop, now head is <span class="subst">&#123;self.head&#125;</span>"</span>)</span><br><span class="line">        val, self.my_queue[self.head] = self.my_queue[self.head], <span class="number">0</span></span><br><span class="line">        print(<span class="string">f"pop <span class="subst">&#123;val&#125;</span>"</span>)</span><br><span class="line">        self.head += <span class="number">1</span></span><br><span class="line">        print(<span class="string">f"after pop, now head is <span class="subst">&#123;self.head&#125;</span>"</span>)</span><br></pre></td></tr></table></figure>

<h4 id="链式队列"><a href="#链式队列" class="headerlink" title="链式队列"></a>链式队列</h4><h4 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h4><p>避免数据搬移，最关键的是，确定好队空和队满的判定条件。</p>
<p>队列为空：head == tail</p>
<p>队列已满：(tail + 1) % length == head</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCircleQueue</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.length = <span class="number">3</span></span><br><span class="line">        self.my_circle_queue = [<span class="number">0</span>] * self.length</span><br><span class="line">        self.head = <span class="number">0</span></span><br><span class="line">        self.tail = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        入队</span></span><br><span class="line"><span class="string">        :param value:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> self.head == self.tail:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">f"before push, queue is <span class="subst">&#123;self.my_circle_queue&#125;</span>"</span>)</span><br><span class="line">        self.my_circle_queue[self.tail] = value</span><br><span class="line">        print(<span class="string">f"push <span class="subst">&#123;value&#125;</span>"</span>)</span><br><span class="line">        self.tail = (self.tail + <span class="number">1</span>) % self.length</span><br><span class="line">        print(<span class="string">f"after push, queue is <span class="subst">&#123;self.my_circle_queue&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        出队</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> (self.tail + <span class="number">1</span>) % self.length == self.head:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">f"before pop, queue is <span class="subst">&#123;self.my_circle_queue&#125;</span>"</span>)</span><br><span class="line">        value, self.my_circle_queue[self.head] = self.my_circle_queue[self.head], <span class="number">0</span></span><br><span class="line">        print(<span class="string">f"pop <span class="subst">&#123;value&#125;</span>"</span>)</span><br><span class="line">        self.head = (self.head + <span class="number">1</span>) % self.length</span><br><span class="line">        print(<span class="string">f"after pop, queue is <span class="subst">&#123;self.my_circle_queue&#125;</span>"</span>)</span><br></pre></td></tr></table></figure>



<h4 id="阻塞队列和并发队列"><a href="#阻塞队列和并发队列" class="headerlink" title="阻塞队列和并发队列"></a>阻塞队列和并发队列</h4><p><strong><em>阻塞队列</em></strong> 其实就是在队列基础上增加了阻塞操作。简单来说，就是在队列为空的时候，从队头取数据会被阻塞。因为此时还没有数据可取，直到队列中有了数据才能返回；如果队列已经满了，那么插入数据的操作就会被阻塞，直到队列中有空闲位置后再插入数据，然后再返回。</p>
<p>可以使用队列实现一个 <strong><em>生产者-&gt;消费者</em></strong> 模型。</p>
<p>线程安全的队列我们叫作<strong><em>并发队列</em></strong>。最简单直接的实现方式是直接在 enqueue()、dequeue() 方法上加锁，但是锁粒度大并发度会比较低，同一时刻仅允许一个存或者取操作。实际上，<strong><em>基于数组的循环队列，利用 CAS 原子操作，可以实现非常高效的并发队列</em></strong>。这也是循环队列比链式队列应用更加广泛的原因。</p>
<h3 id="线程池没有空闲线程时，新的任务请求线程资源时，线程池该如何处理？各种处理策略又是如何实现的呢？"><a href="#线程池没有空闲线程时，新的任务请求线程资源时，线程池该如何处理？各种处理策略又是如何实现的呢？" class="headerlink" title="线程池没有空闲线程时，新的任务请求线程资源时，线程池该如何处理？各种处理策略又是如何实现的呢？"></a>线程池没有空闲线程时，新的任务请求线程资源时，线程池该如何处理？各种处理策略又是如何实现的呢？</h3><p>我们一般有两种处理策略。第一种是非阻塞的处理方式，直接拒绝任务请求；另一种是阻塞的处理方式，将请求排队，等到有空闲线程时，取出排队的请求继续处理。那如何存储排队的请求呢？</p>
<p>我们希望公平地处理每个排队的请求，先进者先服务，所以队列这种数据结构很适合来存储排队请求。我们前面说过，队列有基于链表和基于数组这两种实现方式。这两种实现方式对于排队请求又有什么区别呢？</p>
<p>基于链表的实现方式，可以实现一个支持无限排队的无界队列（unbounded queue），但是可能会导致过多的请求排队等待，请求处理的响应时间过长。所以，针对响应时间比较敏感的系统，基于链表实现的无限排队的线程池是不合适的。</p>
<p>而基于数组实现的有界队列（bounded queue），队列的大小有限，所以线程池中排队的请求超过队列大小时，接下来的请求就会被拒绝，这种方式对响应时间敏感的系统来说，就相对更加合理。</p>
<p>不过，设置一个合理的队列大小，也是非常有讲究的。队列太大导致等待的请求太多，队列太小会导致无法充分利用系统资源、发挥最大性能。除了前面讲到队列应用在线程池请求排队的场景之外，队列可以应用在任何有限资源池中，用于排队请求，比如数据库连接池等。实际上，对于大部分资源有限的场景，当没有空闲资源时，基本上都可以通过“队列”这种数据结构来实现请求排队。</p>
<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><h4 id="除了线程池这种池结构会用到队列排队请求，你还知道有哪些类似的池结构或者场景中会用到队列的排队请求呢？"><a href="#除了线程池这种池结构会用到队列排队请求，你还知道有哪些类似的池结构或者场景中会用到队列的排队请求呢？" class="headerlink" title="除了线程池这种池结构会用到队列排队请求，你还知道有哪些类似的池结构或者场景中会用到队列的排队请求呢？"></a>除了线程池这种池结构会用到队列排队请求，你还知道有哪些类似的池结构或者场景中会用到队列的排队请求呢？</h4><p>分布式应用中的消息队列，也是一种队列结构</p>
<h4 id="今天讲到并发队列，关于如何实现无锁并发队列，网上有非常多的讨论。对这个问题，你怎么看呢？"><a href="#今天讲到并发队列，关于如何实现无锁并发队列，网上有非常多的讨论。对这个问题，你怎么看呢？" class="headerlink" title="今天讲到并发队列，关于如何实现无锁并发队列，网上有非常多的讨论。对这个问题，你怎么看呢？"></a>今天讲到并发队列，关于如何实现无锁并发队列，网上有非常多的讨论。对这个问题，你怎么看呢？</h4><p>考虑使用CAS实现无锁队列，则在入队前，获取tail位置，入队时比较tail是否发生变化，如果否，则允许入队，反之，本次入队失败。出队则是获取head位置，进行cas。</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>递归</title>
    <url>/2020/08/31/article-36/</url>
    <content><![CDATA[<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><h3 id="什么是递归"><a href="#什么是递归" class="headerlink" title="什么是递归"></a>什么是递归</h3><p>去的过程叫“递”，回来的过程叫“归”。基本上，所有的递归问题都可以用递推公式来表示。</p>
<h3 id="递归需要满足的三个条件"><a href="#递归需要满足的三个条件" class="headerlink" title="递归需要满足的三个条件"></a>递归需要满足的三个条件</h3><h4 id="1、一个问题的解可以分解为几个子问题的解"><a href="#1、一个问题的解可以分解为几个子问题的解" class="headerlink" title="1、一个问题的解可以分解为几个子问题的解"></a>1、一个问题的解可以分解为几个子问题的解</h4><p>子问题就是数据规模更小的问题。</p>
<h4 id="2、这个问题与分解之后的子问题，除了数据规模不同，求解思路完全一样"><a href="#2、这个问题与分解之后的子问题，除了数据规模不同，求解思路完全一样" class="headerlink" title="2、这个问题与分解之后的子问题，除了数据规模不同，求解思路完全一样"></a>2、这个问题与分解之后的子问题，除了数据规模不同，求解思路完全一样</h4><h4 id="3、存在递归终止条件"><a href="#3、存在递归终止条件" class="headerlink" title="3、存在递归终止条件"></a>3、存在递归终止条件</h4><p>跳出无限循环的条件</p>
<h3 id="如何编写递归代码？"><a href="#如何编写递归代码？" class="headerlink" title="如何编写递归代码？"></a>如何编写递归代码？</h3><p>关键的是<strong><em>写出递推公式，找到终止条件</em></strong></p>
<p><strong><em>总体思路</em></strong>：找到如何将大问题分解为小问题的规律，并且基于此写出递推公式，然后再推敲终止条件，最后将递推公式和终止条件翻译成代码。</p>
<p>遇到递归，我们就把它抽象成一个递推公式，不用想一层层的调用关系，不要试图用人脑去分解递归的每个步骤。</p>
<h3 id="警惕点"><a href="#警惕点" class="headerlink" title="警惕点"></a>警惕点</h3><h4 id="递归代码要警惕堆栈溢出"><a href="#递归代码要警惕堆栈溢出" class="headerlink" title="递归代码要警惕堆栈溢出"></a>递归代码要警惕堆栈溢出</h4><p>每调用一个函数，都会将临时变量封装为栈帧压入内存栈，等函数执行完成返回时，才出栈。系统栈或者虚拟机栈空间一般都不大。如果递归求解的数据规模很大，调用层次很深，一直压入栈，就会有堆栈溢出的风险。</p>
<h4 id="递归代码要警惕重复计算"><a href="#递归代码要警惕重复计算" class="headerlink" title="递归代码要警惕重复计算"></a>递归代码要警惕重复计算</h4><p>为了避免重复计算，我们可以通过一个数据结构（比如散列表）来保存已经求解过的 f(k)</p>
<h3 id="台阶问题"><a href="#台阶问题" class="headerlink" title="台阶问题"></a>台阶问题</h3><p>假如这里有 n 个台阶，每次你可以跨 1 个台阶或者 2 个台阶，请问走这 n 个台阶有多少种走法？如果有 7 个台阶，你可以 2，2，2，1 这样子上去，也可以 1，2，1，1，2 这样子上去，总之走法有很多，那如何用编程求得总共有多少种走法呢？</p>
<h4 id="递归解法"><a href="#递归解法" class="headerlink" title="递归解法"></a>递归解法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FootstepCountNew</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    优化重复计算</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.mykeys = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> n <span class="keyword">in</span> self.mykeys:</span><br><span class="line">            <span class="keyword">return</span> self.mykeys[n]</span><br><span class="line"></span><br><span class="line">        result = self.run(n<span class="number">-1</span>) + self.run(n<span class="number">-2</span>)</span><br><span class="line">        self.mykeys[n] = result</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>

<h4 id="非递归解法"><a href="#非递归解法" class="headerlink" title="非递归解法"></a>非递归解法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(n)</span>:</span></span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line">    b = <span class="number">1</span></span><br><span class="line">    output = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        b, a = a+b, b</span><br><span class="line">        output.append(b)</span><br><span class="line"></span><br><span class="line">    print(output)</span><br><span class="line">    print(b)</span><br></pre></td></tr></table></figure>



<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><h4 id="我们平时调试代码喜欢使用-IDE-的单步跟踪功能，像规模比较大、递归层次很深的递归代码，几乎无法使用这种调试方式。对于递归代码，你有什么好的调试方法呢？"><a href="#我们平时调试代码喜欢使用-IDE-的单步跟踪功能，像规模比较大、递归层次很深的递归代码，几乎无法使用这种调试方式。对于递归代码，你有什么好的调试方法呢？" class="headerlink" title="我们平时调试代码喜欢使用 IDE 的单步跟踪功能，像规模比较大、递归层次很深的递归代码，几乎无法使用这种调试方式。对于递归代码，你有什么好的调试方法呢？"></a>我们平时调试代码喜欢使用 IDE 的单步跟踪功能，像规模比较大、递归层次很深的递归代码，几乎无法使用这种调试方式。对于递归代码，你有什么好的调试方法呢？</h4><ul>
<li>打印日志发现，递归值。</li>
<li>结合条件断点进行调试。</li>
</ul>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>栈</title>
    <url>/2020/08/31/article-34/</url>
    <content><![CDATA[<h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h3 id="结构特点"><a href="#结构特点" class="headerlink" title="结构特点"></a>结构特点</h3><p>后进先出，先进后出。</p>
<h3 id="如何实现一个“栈”"><a href="#如何实现一个“栈”" class="headerlink" title="如何实现一个“栈”"></a>如何实现一个“栈”</h3><p>用数组实现的栈，我们叫作<strong><em>顺序栈*</em></strong>，用链表实现的栈，我们叫作<strong>链式栈</strong>。*</p>
<h4 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStack</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.my_stack = []</span><br><span class="line">        self.length = <span class="number">10</span></span><br><span class="line">        self.count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        入栈</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 栈空间已满</span></span><br><span class="line">        <span class="keyword">if</span> self.count == self.length:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">f"before push, now length is : <span class="subst">&#123;self.count&#125;</span>"</span>)</span><br><span class="line">        self.my_stack.insert(<span class="number">0</span>, value)</span><br><span class="line">        print(<span class="string">f"push <span class="subst">&#123;value&#125;</span>"</span>)</span><br><span class="line">        self.count += <span class="number">1</span></span><br><span class="line">        print(<span class="string">f"after push, now length is : <span class="subst">&#123;self.count&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        出栈</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># 栈为空</span></span><br><span class="line">        <span class="keyword">if</span> self.count == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">f"before pop, now length is : <span class="subst">&#123;self.count&#125;</span>"</span>)</span><br><span class="line">        value = self.my_stack.pop(<span class="number">0</span>)</span><br><span class="line">        print(<span class="string">f"pop <span class="subst">&#123;value&#125;</span>"</span>)</span><br><span class="line">        self.count -= <span class="number">1</span></span><br><span class="line">        print(<span class="string">f"after pop, now length is : <span class="subst">&#123;self.count&#125;</span>"</span>)</span><br></pre></td></tr></table></figure>

<p>时间复杂度 O(1), 空间复杂度 O(1)</p>
<p><strong><em>对于动态扩容顺序栈，其入栈最好时间复杂度为O(1)， 最坏时间复杂度为O(n)，平均时间复杂度O(1)</em></strong></p>
<h3 id="栈在函数调用中的应用"><a href="#栈在函数调用中的应用" class="headerlink" title="栈在函数调用中的应用"></a>栈在函数调用中的应用</h3><p>比较经典的一个应用场景就是<strong><em>函数调用栈</em></strong></p>
<p>我们知道，操作系统给每个线程分配了一块独立的内存空间，这块内存被组织成“栈”这种结构, 用来存储函数调用时的临时变量。每进入一个函数，就会将临时变量作为一个栈帧入栈，当被调用函数执行完成，返回之后，将这个函数对应的栈帧出栈。</p>
<h3 id="栈在表达式求值中的应用"><a href="#栈在表达式求值中的应用" class="headerlink" title="栈在表达式求值中的应用"></a>栈在表达式求值中的应用</h3><p>编译器就是通过两个栈来实现的。其中一个保存操作数的栈，另一个是保存运算符的栈。</p>
<p>我们从左向右遍历表达式，当遇到数字，我们就直接压入操作数栈；当遇到运算符，就与运算符栈的栈顶元素进行比较。如果比运算符栈顶元素的优先级高，就将当前运算符压入栈；如果比运算符栈顶元素的优先级低或者相同，从运算符栈中取栈顶运算符，从操作数栈的栈顶取 2 个操作数，然后进行计算，再把计算完的结果压入操作数栈，继续比较。</p>
<h3 id="栈在括号匹配中的应用"><a href="#栈在括号匹配中的应用" class="headerlink" title="栈在括号匹配中的应用"></a>栈在括号匹配中的应用</h3><p>我们用栈来保存未匹配的左括号，从左到右依次扫描字符串。当扫描到左括号时，则将其压入栈中；当扫描到右括号时，从栈顶取出一个左括号。如果能够匹配，比如“(”跟“)”匹配，“[”跟“]”匹配，“{”跟“}”匹配，则继续扫描剩下的字符串。如果扫描的过程中，遇到不能配对的右括号，或者栈中没有数据，则说明为非法格式。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LegalBracket</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.bracket_map = &#123;</span><br><span class="line">            <span class="string">")"</span>: <span class="string">"("</span>,</span><br><span class="line">            <span class="string">"]"</span>: <span class="string">"["</span>,</span><br><span class="line">            <span class="string">"&#125;"</span>: <span class="string">"&#123;"</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_legal_bracket</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self.my_stack = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> val <span class="keyword">in</span> value:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.my_stack <span class="keyword">or</span> val <span class="keyword">in</span> <span class="string">"([&#123;"</span>:</span><br><span class="line">                self.my_stack.insert(<span class="number">0</span>, val)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> self.bracket_map[val] == self.my_stack[<span class="number">0</span>]:</span><br><span class="line">                self.my_stack.pop(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> bool(self.my_stack)</span><br></pre></td></tr></table></figure>



<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><h4 id="为什么函数调用要用“栈”来保存临时变量呢？用其他数据结构不行吗？"><a href="#为什么函数调用要用“栈”来保存临时变量呢？用其他数据结构不行吗？" class="headerlink" title="为什么函数调用要用“栈”来保存临时变量呢？用其他数据结构不行吗？"></a>为什么函数调用要用“栈”来保存临时变量呢？用其他数据结构不行吗？</h4><p>其实，我们不一定非要用栈来保存临时变量，只不过如果这个函数调用符合后进先出的特性，用栈这种数据结构来实现，是最顺理成章的选择。</p>
<p>从调用函数进入被调用函数，对于数据来说，变化的是什么呢？是作用域。所以根本上，只要能保证每进入一个新的函数，都是一个新的作用域就可以。而要实现这个，用栈就非常方便。在进入被调用函数的时候，分配一段栈空间给这个函数的变量，在函数结束的时候，将栈顶复位，正好回到调用函数的作用域内。</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>排序（上）- 冒泡、插入和选择</title>
    <url>/2020/09/01/article-37/</url>
    <content><![CDATA[<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>最经典的、最常用的：冒泡排序、插入排序、选择排序、归并排序、快速排序、计数排序、基数排序、桶排序。</p>
<h3 id="分为三类"><a href="#分为三类" class="headerlink" title="分为三类"></a>分为三类</h3><h4 id="冒泡排序、插入排序、选择排序"><a href="#冒泡排序、插入排序、选择排序" class="headerlink" title="冒泡排序、插入排序、选择排序"></a>冒泡排序、插入排序、选择排序</h4><p>时间复杂度O(n^2), 基于比较</p>
<h4 id="归并排序、快速排序"><a href="#归并排序、快速排序" class="headerlink" title="归并排序、快速排序"></a>归并排序、快速排序</h4><p>时间复杂度O(nlogn), 基于比较</p>
<h4 id="计数排序、基数排序、桶排序"><a href="#计数排序、基数排序、桶排序" class="headerlink" title="计数排序、基数排序、桶排序"></a>计数排序、基数排序、桶排序</h4><p>时间复杂度O(n), 不基于比较</p>
<h3 id="如何分析一个“排序算法”？"><a href="#如何分析一个“排序算法”？" class="headerlink" title="如何分析一个“排序算法”？"></a>如何分析一个“排序算法”？</h3><h4 id="排序算法的执行效率"><a href="#排序算法的执行效率" class="headerlink" title="排序算法的执行效率"></a>排序算法的执行效率</h4><h6 id="最好情况、最坏情况、平均情况时间复杂度"><a href="#最好情况、最坏情况、平均情况时间复杂度" class="headerlink" title="最好情况、最坏情况、平均情况时间复杂度"></a>最好情况、最坏情况、平均情况时间复杂度</h6><h6 id="时间复杂度的系数、常数-、低阶"><a href="#时间复杂度的系数、常数-、低阶" class="headerlink" title="时间复杂度的系数、常数 、低阶"></a>时间复杂度的系数、常数 、低阶</h6><h6 id="比较次数和交换（或移动）次数"><a href="#比较次数和交换（或移动）次数" class="headerlink" title="比较次数和交换（或移动）次数"></a>比较次数和交换（或移动）次数</h6><h4 id="排序算法的内存消耗"><a href="#排序算法的内存消耗" class="headerlink" title="排序算法的内存消耗"></a>排序算法的内存消耗</h4><p>我们前面讲过，算法的内存消耗可以通过空间复杂度来衡量，排序算法也不例外。不过，针对排序算法的空间复杂度，我们还引入了一个新的概念，原地排序（Sorted in place）。原地排序算法，就是特指空间复杂度是 O(1) 的排序算法。</p>
<h4 id="排序算法的稳定性"><a href="#排序算法的稳定性" class="headerlink" title="排序算法的稳定性"></a>排序算法的稳定性</h4><p>这个概念是说，如果待排序的序列中存在值相等的元素，经过排序之后，相等元素之间原有的先后顺序不变。</p>
<h3 id="冒泡排序（Bubble-Sort）"><a href="#冒泡排序（Bubble-Sort）" class="headerlink" title="冒泡排序（Bubble Sort）"></a>冒泡排序（Bubble Sort）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arrays = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(arrays)</span>:</span></span><br><span class="line">    length = len(arrays)</span><br><span class="line">    <span class="keyword">if</span> length &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> arrays</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(length-i<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> arrays[j+<span class="number">1</span>] &lt; arrays[j]:</span><br><span class="line">                arrays[j+<span class="number">1</span>], arrays[j] = arrays[j], arrays[j+<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    print(arrays)</span><br></pre></td></tr></table></figure>

<h6 id="冒泡排序是原地排序，空间复杂度为O-1"><a href="#冒泡排序是原地排序，空间复杂度为O-1" class="headerlink" title="冒泡排序是原地排序，空间复杂度为O(1)"></a>冒泡排序是原地排序，空间复杂度为O(1)</h6><h6 id="当相邻两元素相等时不做交换时为稳定排序"><a href="#当相邻两元素相等时不做交换时为稳定排序" class="headerlink" title="当相邻两元素相等时不做交换时为稳定排序"></a>当相邻两元素相等时不做交换时为稳定排序</h6><h4 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h4><p>最好时间复杂度为O(n), 最坏时间复杂度为O(n^2)</p>
<h5 id="平均时间复杂度"><a href="#平均时间复杂度" class="headerlink" title="平均时间复杂度"></a>平均时间复杂度</h5><p>又称加权平均期望复杂度。</p>
<p>如果用概率论方法定量分析平均时间复杂度，涉及的数学推理和计算就会很复杂。我这里还有一种思路，通过“<strong><em>有序度</em></strong>”和“<strong><em>逆序度</em></strong>”这两个概念来进行分析。</p>
<p><strong><em>有序度</em></strong>是数组中具有有序关系的元素对的个数。其数学表达式为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有序元素对：a[i] &lt;&#x3D; a[j], 如果i &lt; j。</span><br></pre></td></tr></table></figure>

<p>完全有序的数组，其有序度为:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">n(n-1) &#x2F; 2</span><br></pre></td></tr></table></figure>

<p>完全有序的数组的有序度叫作<strong><em>满有序度</em></strong></p>
<p>逆序度的定义正好跟有序度相反。</p>
<p>三者的关系</p>
<p><strong><em>满有序度 = 有序度 + 逆序度</em></strong></p>
<p>我们排序的过程就是一种增加有序度，减少逆序度的过程，最后达到满有序度，就说明排序完成了。</p>
<p>所以冒泡排序的平均时间复杂度为O(n^2)</p>
<h3 id="插入排序（Insertion-Sort）"><a href="#插入排序（Insertion-Sort）" class="headerlink" title="插入排序（Insertion Sort）"></a>插入排序（Insertion Sort）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">arrays = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insertionsort</span><span class="params">(arrays)</span>:</span></span><br><span class="line">    length = len(arrays)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> length &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> arrays</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, length):</span><br><span class="line">        j = i - <span class="number">1</span></span><br><span class="line">        val = arrays[i]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> j &gt;= <span class="number">0</span> <span class="keyword">and</span> arrays[j] &gt; val:</span><br><span class="line">            arrays[j+<span class="number">1</span>] = arrays[j]</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        arrays[j+<span class="number">1</span>] = val</span><br><span class="line"></span><br><span class="line">    print(arrays)</span><br></pre></td></tr></table></figure>

<h6 id="冒泡排序是原地排序，空间复杂度为O-1-1"><a href="#冒泡排序是原地排序，空间复杂度为O-1-1" class="headerlink" title="冒泡排序是原地排序，空间复杂度为O(1)"></a>冒泡排序是原地排序，空间复杂度为O(1)</h6><h6 id="当相邻两元素相等时不做交换时为稳定排序-1"><a href="#当相邻两元素相等时不做交换时为稳定排序-1" class="headerlink" title="当相邻两元素相等时不做交换时为稳定排序"></a>当相邻两元素相等时不做交换时为稳定排序</h6><h6 id="最好时间复杂度O-n-最坏时间复杂度O-n-2-平均时间复杂度O-n-2"><a href="#最好时间复杂度O-n-最坏时间复杂度O-n-2-平均时间复杂度O-n-2" class="headerlink" title="最好时间复杂度O(n), 最坏时间复杂度O(n^2), 平均时间复杂度O(n^2)"></a>最好时间复杂度O(n), 最坏时间复杂度O(n^2), 平均时间复杂度O(n^2)</h6><h3 id="选择排序（Selection-Sort）"><a href="#选择排序（Selection-Sort）" class="headerlink" title="选择排序（Selection Sort）"></a>选择排序（Selection Sort）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 选择排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">selectionsort</span><span class="params">(arrays)</span>:</span></span><br><span class="line">    length = len(arrays)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(arrays) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> arrays</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line">        min_val = arrays[i]</span><br><span class="line">        min_idx = i</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, length):</span><br><span class="line">            <span class="keyword">if</span> arrays[j] &lt; min_val:</span><br><span class="line">                min_val = arrays[j]</span><br><span class="line">                min_idx = j</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> min_idx != i:</span><br><span class="line">            arrays[i], arrays[min_idx] = arrays[min_idx], arrays[i]</span><br><span class="line"></span><br><span class="line">    print(arrays)</span><br></pre></td></tr></table></figure>

<h6 id="空间复杂度-O-1"><a href="#空间复杂度-O-1" class="headerlink" title="空间复杂度 O(1)"></a>空间复杂度 O(1)</h6><h6 id="不稳定排序"><a href="#不稳定排序" class="headerlink" title="不稳定排序"></a>不稳定排序</h6><h6 id="最好时间复杂度O-n-2-最坏时间复杂度O-n-2-，平均时间复杂度O-n-2"><a href="#最好时间复杂度O-n-2-最坏时间复杂度O-n-2-，平均时间复杂度O-n-2" class="headerlink" title="最好时间复杂度O(n^2), 最坏时间复杂度O(n^2)，平均时间复杂度O(n^2)"></a>最好时间复杂度O(n^2), 最坏时间复杂度O(n^2)，平均时间复杂度O(n^2)</h6><h3 id="为什么插入排序要比冒泡排序更受欢迎呢"><a href="#为什么插入排序要比冒泡排序更受欢迎呢" class="headerlink" title="为什么插入排序要比冒泡排序更受欢迎呢"></a>为什么插入排序要比冒泡排序更受欢迎呢</h3><p>因为冒泡排序需要两个位置进行数据交换，对于C语言这种就需要三个变量进行操作；但插入排序，只需要将数据后移，可以省略交换的操作。假设赋值语句时时间是K，那么冒泡排序需要的就是3K，而插入排序就是K，差距显而易见。</p>
<p>另外，<strong><em>希尔排序</em></strong> 是对插入排序的优化。</p>
<h3 id="内容小结"><a href="#内容小结" class="headerlink" title="内容小结"></a>内容小结</h3><p>冒泡、插入和选择对于小规模数据非常高效，但当数据规模很大时，就不再适用了。</p>
<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><h4 id="数据存储在链表中，这三种排序算法还能工作吗？如果能，那相应的时间、空间复杂度又是多少呢？"><a href="#数据存储在链表中，这三种排序算法还能工作吗？如果能，那相应的时间、空间复杂度又是多少呢？" class="headerlink" title="数据存储在链表中，这三种排序算法还能工作吗？如果能，那相应的时间、空间复杂度又是多少呢？"></a>数据存储在链表中，这三种排序算法还能工作吗？如果能，那相应的时间、空间复杂度又是多少呢？</h4><p>考虑只能改变节点位置，冒泡排序相比于数组实现，比较次数一致，但交换时操作更复杂；插入排序，比较次数一致，不需要再有后移操作，找到位置后可以直接插入，但排序完毕后可能需要倒置链表；选择排序比较次数一致，交换操作同样比较麻烦。综上，时间复杂度和空间复杂度并无明显变化，若追求极致性能，冒泡排序的时间复杂度系数会变大，插入排序系数会减小，选择排序无明显变化。</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>二分查找（上）</title>
    <url>/2020/09/02/article-41/</url>
    <content><![CDATA[<h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>二分查找针对的是一个有序的数据集合，查找思想有点类似分治思想。每次都通过跟区间的中间元素对比，将待查找的区间缩小为之前的一半，直到找到要查找的元素，或者区间被缩小为 0。</p>
<h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><p>时间复杂度O(logn)</p>
<h3 id="代码实现（有序数组无重复数据）"><a href="#代码实现（有序数组无重复数据）" class="headerlink" title="代码实现（有序数组无重复数据）"></a>代码实现（有序数组无重复数据）</h3><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search2</span><span class="params">(arrays, l, r, val)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> l &lt;= r:</span><br><span class="line">        mid = l + ((r - l) &gt;&gt; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> arrays[mid] == val:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> arrays[mid] &gt; val:</span><br><span class="line">            <span class="keyword">return</span> binary_search2(arrays, l, mid<span class="number">-1</span>, val)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> binary_search2(arrays, mid+<span class="number">1</span>, r, val)</span><br></pre></td></tr></table></figure>



<h4 id="非递归"><a href="#非递归" class="headerlink" title="非递归"></a>非递归</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(arrays, val)</span>:</span></span><br><span class="line">    l = <span class="number">0</span></span><br><span class="line">    r = len(arrays)<span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> l &lt;= r:</span><br><span class="line">        mid = l + ((r - l) &gt;&gt; <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> arrays[mid] == val:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">        <span class="keyword">if</span> arrays[mid] &lt; val:</span><br><span class="line">            l = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            r = mid</span><br></pre></td></tr></table></figure>



<h3 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h3><h4 id="二分查找依赖的是顺序表结构，简单点说就是数组"><a href="#二分查找依赖的是顺序表结构，简单点说就是数组" class="headerlink" title="二分查找依赖的是顺序表结构，简单点说就是数组"></a>二分查找依赖的是顺序表结构，简单点说就是数组</h4><p>主要原因是二分查找算法需要按照下标随机访问元素</p>
<h4 id="二分查找针对的是有序数据"><a href="#二分查找针对的是有序数据" class="headerlink" title="二分查找针对的是有序数据"></a>二分查找针对的是有序数据</h4><p>二分查找只能用在插入、删除操作不频繁，一次排序多次查找的场景中。针对动态变化的数据集合，二分查找将不再适用。</p>
<h4 id="数据量太小不适合二分查找"><a href="#数据量太小不适合二分查找" class="headerlink" title="数据量太小不适合二分查找"></a>数据量太小不适合二分查找</h4><p>有一个例外，如果数据之间的比较操作非常耗时，不管数据量大小，我都推荐使用二分查找。</p>
<h4 id="数据量太大也不适合二分查找"><a href="#数据量太大也不适合二分查找" class="headerlink" title="数据量太大也不适合二分查找"></a>数据量太大也不适合二分查找</h4><p>二分查找基于数组，而数组需要在连续的内存的空间。</p>
<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><h4 id="实现“求一个数的平方根”？要求精确到小数点后-6-位。"><a href="#实现“求一个数的平方根”？要求精确到小数点后-6-位。" class="headerlink" title="实现“求一个数的平方根”？要求精确到小数点后 6 位。"></a>实现“求一个数的平方根”？要求精确到小数点后 6 位。</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_sqrt</span><span class="params">(num, s)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> num &gt; <span class="number">1</span>:</span><br><span class="line">        low = <span class="number">1</span></span><br><span class="line">        hight = num</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        low = num</span><br><span class="line">        hight = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    line = <span class="number">1</span>/pow(<span class="number">10</span>, s)</span><br><span class="line">    <span class="keyword">while</span> low &lt; hight:</span><br><span class="line">        mid = (low + hight) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        val = mid * mid</span><br><span class="line">        <span class="keyword">if</span> abs(val - num) &lt;= line:</span><br><span class="line">            <span class="keyword">return</span> round(mid, s)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> val &gt; num:</span><br><span class="line">            hight = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            low = mid</span><br></pre></td></tr></table></figure>

<h4 id="如果数据使用链表存储，二分查找的时间复杂就会变得很高，那查找的时间复杂度究竟是多少呢？"><a href="#如果数据使用链表存储，二分查找的时间复杂就会变得很高，那查找的时间复杂度究竟是多少呢？" class="headerlink" title="如果数据使用链表存储，二分查找的时间复杂就会变得很高，那查找的时间复杂度究竟是多少呢？"></a>如果数据使用链表存储，二分查找的时间复杂就会变得很高，那查找的时间复杂度究竟是多少呢？</h4><p>假设链表长度为n，二分查找每次都要找到中间点(计算中忽略奇偶数差异):<br>第一次查找中间点，需要移动指针n/2次；<br>第二次，需要移动指针n/4次；<br>第三次需要移动指针n/8次；<br>……<br>以此类推，一直到1次为值</p>
<p>总共指针移动次数(查找次数) = n/2 + n/4 + n/8 + …+ 1，这显然是个等比数列，根据等比数列求和公式：Sum = n - 1.</p>
<p>最后算法时间复杂度是：O(n-1)，忽略常数，记为O(n)，时间复杂度和顺序查找时间复杂度相同</p>
<p>但是稍微思考下，在二分查找的时候，由于要进行多余的运算，严格来说，会比顺序查找时间慢</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>二分查找（下）</title>
    <url>/2020/09/02/article-42/</url>
    <content><![CDATA[<h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><h3 id="查找第一个值等于给定值的元素-有序有重复数据"><a href="#查找第一个值等于给定值的元素-有序有重复数据" class="headerlink" title="查找第一个值等于给定值的元素(有序有重复数据)"></a>查找第一个值等于给定值的元素(有序有重复数据)</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一种</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(arrays, val)</span>:</span></span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    high = len(arrays) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">        mid = low + ((high - low) &gt;&gt; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> arrays[mid] &gt;= val:</span><br><span class="line">            high = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (low &lt; len(arrays)) <span class="keyword">and</span> arrays[low] == val:</span><br><span class="line">        <span class="keyword">return</span> low</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第二种</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(arrays, val)</span>:</span></span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    high = len(arrays) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> low &lt; high:</span><br><span class="line">        mid = low + ((high - low) &gt;&gt; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> arrays[mid] &gt; val:</span><br><span class="line">            high = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> arrays[mid] &lt; val:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> mid == <span class="number">0</span> <span class="keyword">or</span> arrays[mid<span class="number">-1</span>] != val:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            high = mid - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>

<h3 id="查找最后一个值等于给定值的元素"><a href="#查找最后一个值等于给定值的元素" class="headerlink" title="查找最后一个值等于给定值的元素"></a>查找最后一个值等于给定值的元素</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一种</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(arrays, val)</span>:</span></span><br><span class="line">    length = len(arrays)</span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    high = length - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">        mid = low + ((high - low) &gt;&gt; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> arrays[mid] &lt;= val:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high = mid - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> high &lt; length <span class="keyword">and</span> arrays[high] == val:</span><br><span class="line">        <span class="keyword">return</span> high</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第二种</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(arrays, val)</span>:</span></span><br><span class="line">    length = len(arrays)</span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    high = length - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">        mid = low + ((high - low) &gt;&gt; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> arrays[mid] &gt; val:</span><br><span class="line">            high = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> arrays[mid] &lt; val:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> (mid == (length<span class="number">-1</span>)) <span class="keyword">or</span> arrays[mid + <span class="number">1</span>] != val:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>

<h3 id="查找第一个大于等于给定值的元素"><a href="#查找第一个大于等于给定值的元素" class="headerlink" title="查找第一个大于等于给定值的元素"></a>查找第一个大于等于给定值的元素</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(arrays, val)</span>:</span></span><br><span class="line">    length = len(arrays)</span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    high = length - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">        mid = low + ((high - low) &gt;&gt; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> arrays[mid] &gt;= val:</span><br><span class="line">            <span class="keyword">if</span> mid == <span class="number">0</span> <span class="keyword">or</span> arrays[mid<span class="number">-1</span>] &lt; val:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            high = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>

<h3 id="查找最后一个小于等于给定值的元素"><a href="#查找最后一个小于等于给定值的元素" class="headerlink" title="查找最后一个小于等于给定值的元素"></a>查找最后一个小于等于给定值的元素</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(arrays, val)</span>:</span></span><br><span class="line">    length = len(arrays)</span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    high = length - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">        mid = low + ((high - low) &gt;&gt; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> arrays[mid] &lt;= val:</span><br><span class="line">            <span class="keyword">if</span> mid == (length<span class="number">-1</span>) <span class="keyword">or</span> arrays[mid+<span class="number">1</span>] &gt; val:</span><br><span class="line">                <span class="keyword">return</span> mid</span><br><span class="line">            low = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            high = mid - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>

<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><h4 id="如果有序数组是一个循环有序数组，比如-4，5，6，1，2，3。针对这种情况，如何实现一个求“值等于给定值”的二分查找算法呢？"><a href="#如果有序数组是一个循环有序数组，比如-4，5，6，1，2，3。针对这种情况，如何实现一个求“值等于给定值”的二分查找算法呢？" class="headerlink" title="如果有序数组是一个循环有序数组，比如 4，5，6，1，2，3。针对这种情况，如何实现一个求“值等于给定值”的二分查找算法呢？"></a>如果有序数组是一个循环有序数组，比如 4，5，6，1，2，3。针对这种情况，如何实现一个求“值等于给定值”的二分查找算法呢？</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">binary_search</span><span class="params">(arrays, val)</span>:</span></span><br><span class="line">    length = len(arrays)</span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    high = length - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">        mid = low + ((high - low) &gt;&gt; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> arrays[mid] == val:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> arrays[mid] &gt; val:</span><br><span class="line">            <span class="comment"># 左半序列</span></span><br><span class="line">            <span class="keyword">if</span> arrays[low] &gt; val:</span><br><span class="line">                low = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                high = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> arrays[high] &lt; val:</span><br><span class="line">                high = mid <span class="number">-1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                low = mid + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>排序优化</title>
    <url>/2020/09/01/article-40/</url>
    <content><![CDATA[<h2 id="排序优化"><a href="#排序优化" class="headerlink" title="排序优化"></a>排序优化</h2><h3 id="如何选择合适的排序算法？"><a href="#如何选择合适的排序算法？" class="headerlink" title="如何选择合适的排序算法？"></a>如何选择合适的排序算法？</h3><p><img src="/2020/09/01/article-40/1f6ef7e0a5365d6e9d68f0ccc71755fd.jpg" alt></p>
<p>线性排序算法的时间复杂度比较低，适用场景比较特殊。所以如果要写一个通用的排序函数，不能选择线性排序算法。</p>
<p>如果对小规模数据进行排序，可以选择时间复杂度是 O(n^2) 的算法；如果对大规模数据进行排序，时间复杂度是 O(nlogn) 的算法更加高效。所以，为了兼顾任意规模数据的排序，一般都会首选时间复杂度是 O(nlogn) 的排序算法来实现排序函数。</p>
<p>归并排序虽然时间复杂度是 O(nlogn) ，但并不是原地排序，需要消耗掉额外的空间，所以一般用快排来实现通用排序。</p>
<h3 id="如何优化快速排序？"><a href="#如何优化快速排序？" class="headerlink" title="如何优化快速排序？"></a>如何优化快速排序？</h3><p>当序列本身就是有序的，然后依然每次选择最后一个数据进行分区，此时时间复杂度就会退化为O(n^2)。所以快排的优化关键在于分区点选择的合理性。</p>
<p>最理想的分区点是：<strong><em>被分区点分开的两个分区中，数据的数量差不多</em></strong>。</p>
<p>下面介绍两个分区方法。</p>
<h4 id="三数取中法"><a href="#三数取中法" class="headerlink" title="三数取中法"></a>三数取中法</h4><p>我们从区间的首、尾、中间，分别取出一个数，然后对比大小，取这 3 个数的中间值作为分区点。这样每间隔某个固定的长度，取数据出来比较，将中间值作为分区点的分区算法，肯定要比单纯取某一个数据更好。但是，如果要排序的数组比较大，那“三数取中”可能就不够了，可能要“五数取中”或者“十数取中”。</p>
<h4 id="随机法"><a href="#随机法" class="headerlink" title="随机法"></a>随机法</h4><p>随机法就是每次从要排序的区间中，随机选择一个元素作为分区点。这种方法并不能保证每次分区点都选的比较好，但是从概率的角度来看，也不大可能会出现每次分区点都选得很差的情况，所以平均情况下，这样选的分区点是比较好的。时间复杂度退化为最糟糕的 O(n2) 的情况，出现的可能性不大。</p>
<h3 id="快排如何避免栈溢出"><a href="#快排如何避免栈溢出" class="headerlink" title="快排如何避免栈溢出"></a>快排如何避免栈溢出</h3><ul>
<li>第一种是限制递归深度。一旦递归过深，超过了我们事先设定的阈值，就停止递归。</li>
<li>第二种是通过在堆上模拟实现一个函数调用栈，手动模拟递归压栈、出栈的过程，这样就没有了系统栈大小的限制。</li>
</ul>
<h3 id="快排一定是最优解吗？"><a href="#快排一定是最优解吗？" class="headerlink" title="快排一定是最优解吗？"></a>快排一定是最优解吗？</h3><p>排序算法需要根据使用场景选择，比如数据量小于4时，插入排序的效率就比快排更高，所以在小规模数据面前，O(n2) 时间复杂度的算法并不一定比 O(nlogn) 的算法执行时间长。</p>
<p>而当数据占用空间比较小时，归并排序也优于快排。</p>
<h3 id="Python的sorted排序使用什么方式实现"><a href="#Python的sorted排序使用什么方式实现" class="headerlink" title="Python的sorted排序使用什么方式实现"></a>Python的sorted排序使用什么方式实现</h3><p>Python的sorted使用了timsort排序。</p>
<p>timsort结合了归并排序和插入排序（二分插入算法）。</p>
<h4 id="Timsort核心过程"><a href="#Timsort核心过程" class="headerlink" title="Timsort核心过程"></a>Timsort核心过程</h4><p>TimSort 算法为了减少对升序部分的回溯和对降序部分的性能倒退，将输入按其升序和降序特点进行了分区。排序的输入的单位不是一个个单独的数字，而是一个个的块-分区。其中每一个分区叫一个run。针对这些 run 序列，每次拿一个 run 出来按规则进行合并。每次合并会将两个 run合并成一个 run。合并的结果保存到栈中。合并直到消耗掉所有的 run，这时将栈上剩余的 run合并到只剩一个 run 为止。这时这个仅剩的 run 便是排好序的结果。</p>
<ul>
<li>如何数组长度小于某个值，直接用二分插入排序算法</li>
<li>找到各个run，并入栈</li>
<li>按规则合并ru</li>
</ul>
<h4 id="Timsort性能"><a href="#Timsort性能" class="headerlink" title="Timsort性能"></a>Timsort性能</h4><p>在平均情况下，比较排序不会比O(n log n)更快。由于Timsort算法利用了现实中大多数数据中会有一些排好序的区，所以Timsort会比O(n log n)快些。对于随机数没有可以利用的排好序的区，Timsort时间复杂度会是log(n!)。</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>散列表（中）</title>
    <url>/2020/09/02/article-44/</url>
    <content><![CDATA[<h2 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h2><h3 id="如何设计散列函数？"><a href="#如何设计散列函数？" class="headerlink" title="如何设计散列函数？"></a>如何设计散列函数？</h3><p>散列函数的设计不能太复杂，且散列函数生成的值要尽可能随机并且均匀分布。</p>
<p>常用方法：</p>
<p>数据分析法、直接寻址法、平方取中法、折叠法、随机数法等</p>
<h3 id="装载因子过大了怎么办？"><a href="#装载因子过大了怎么办？" class="headerlink" title="装载因子过大了怎么办？"></a>装载因子过大了怎么办？</h3><p>对装载因子设置阈值，来对散列表进行动态扩容与动态缩容。</p>
<p>装载因子阈值的设置要权衡时间、空间复杂度。如果内存空间不紧张，对执行效率要求很高，可以降低负载因子的阈值；相反，如果内存空间紧张，对执行效率要求又不高，可以增加负载因子的值，甚至可以大于 1。</p>
<h3 id="如何避免低效的扩容？"><a href="#如何避免低效的扩容？" class="headerlink" title="如何避免低效的扩容？"></a>如何避免低效的扩容？</h3><p>为了解决一次性扩容耗时过多的情况，我们可以将扩容操作穿插在插入操作的过程中，分批完成。当装载因子触达阈值之后，我们只申请新空间，但并不将老的数据搬移到新散列表中。</p>
<h3 id="如何选择冲突解决方法？"><a href="#如何选择冲突解决方法？" class="headerlink" title="如何选择冲突解决方法？"></a>如何选择冲突解决方法？</h3><h4 id="开放寻址法"><a href="#开放寻址法" class="headerlink" title="开放寻址法"></a>开放寻址法</h4><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><ul>
<li>散列表中的数据都存储在数组中，可以有效地利用 CPU 缓存加快查询速度。</li>
<li>这种方法实现的散列表，序列化起来比较简单。</li>
</ul>
<h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><ul>
<li>删除数据的时候比较麻烦，需要特殊标记已经删除掉的数据。</li>
<li>所有的数据都存储在一个数组中，比起链表法来说，冲突的代价更高。</li>
</ul>
<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>当数据量比较小、装载因子小的时候，适合采用开放寻址法。这也是 Java 中的ThreadLocalMap使用开放寻址法解决散列冲突的原因。</p>
<h4 id="链表法（拉链法）"><a href="#链表法（拉链法）" class="headerlink" title="链表法（拉链法）"></a>链表法（拉链法）</h4><h5 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h5><ul>
<li>内存的利用率比开放寻址法要高</li>
<li>对大装载因子的容忍度更高</li>
</ul>
<h5 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h5><ul>
<li>因为要存储指针，所以对于比较小的对象的存储，是比较消耗内存的，还有可能会让内存的消耗翻倍。</li>
<li>因为链表中的结点是零散分布在内存中的，不是连续的，所以对 CPU 缓存是不友好的，这方面对于执行效率也有一定的影响。</li>
</ul>
<h5 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h5><p>基于链表的散列冲突处理方法比较适合存储大对象、大数据量的散列表，而且，比起开放寻址法，它更加灵活，支持更多的优化策略，比如用红黑树代替链表。</p>
<h5 id="改造"><a href="#改造" class="headerlink" title="改造"></a>改造</h5><p>我们对链表法稍加改造，可以实现一个更加高效的散列表。那就是，我们将链表法中的链表改造为其他高效的动态数据结构，比如跳表、红黑树。这样，即便出现散列冲突，极端情况下，所有的数据都散列到同一个桶内，那最终退化成的散列表的查找时间也只不过是 O(logn)。这样也就有效避免了前面讲到的散列碰撞攻击。</p>
<h3 id="工业级散列表举例分析"><a href="#工业级散列表举例分析" class="headerlink" title="工业级散列表举例分析"></a>工业级散列表举例分析</h3><p>Java 中的 HashMap</p>
<h4 id="初始大小"><a href="#初始大小" class="headerlink" title="初始大小"></a>初始大小</h4><p>HashMap 默认的初始大小是 16，当然这个默认值是可以设置的。</p>
<h4 id="装载因子和动态扩容"><a href="#装载因子和动态扩容" class="headerlink" title="装载因子和动态扩容"></a>装载因子和动态扩容</h4><p>最大装载因子默认是 0.75，当 HashMap 中元素个数超过 0.75*capacity（capacity 表示散列表的容量）的时候，就会启动扩容，每次扩容都会扩容为原来的两倍大小。</p>
<h4 id="散列冲突解决方法"><a href="#散列冲突解决方法" class="headerlink" title="散列冲突解决方法"></a>散列冲突解决方法</h4><p>HashMap 底层采用链表法来解决冲突。即使负载因子和散列函数设计得再合理，也免不了会出现拉链过长的情况，一旦出现拉链过长，则会严重影响 HashMap 的性能。</p>
<p>于是，在 JDK1.8 版本中，为了对 HashMap 做进一步优化，我们引入了<strong><em>红黑树</em></strong>。而当链表长度太长（<strong><em>默认超过 8</em></strong>）时，链表就转换为红黑树。我们可以利用红黑树快速增删改查的特点，提高 HashMap 的性能。<strong><em>当红黑树结点个数少于 8 个的时候，又会将红黑树转化为链表</em></strong>。因为在数据量较小的情况下，红黑树要维护平衡，比起链表来，性能上的优势并不明显。</p>
<h4 id="散列函数"><a href="#散列函数" class="headerlink" title="散列函数"></a>散列函数</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h = key.hashCode()；</span><br><span class="line">    <span class="keyword">return</span> (h ^ (h &gt;&gt;&gt; <span class="number">16</span>)) &amp; (capicity -<span class="number">1</span>); <span class="comment">//capicity表示散列表的大小</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中，hashCode() 返回的是 Java 对象的 hash code。比如 String 类型的对象的 hashCode() 就是下面这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> var1 = <span class="keyword">this</span>.hash;</span><br><span class="line">  <span class="keyword">if</span>(var1 == <span class="number">0</span> &amp;&amp; <span class="keyword">this</span>.value.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">char</span>[] var2 = <span class="keyword">this</span>.value;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> var3 = <span class="number">0</span>; var3 &lt; <span class="keyword">this</span>.value.length; ++var3) &#123;</span><br><span class="line">      var1 = <span class="number">31</span> * var1 + var2[var3];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.hash = var1;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> var1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="在你熟悉的编程语言中，哪些数据类型底层是基于散列表实现的？散列函数是如何设计的？散列冲突是通过哪种方法解决的？是否支持动态扩容呢？"><a href="#在你熟悉的编程语言中，哪些数据类型底层是基于散列表实现的？散列函数是如何设计的？散列冲突是通过哪种方法解决的？是否支持动态扩容呢？" class="headerlink" title="在你熟悉的编程语言中，哪些数据类型底层是基于散列表实现的？散列函数是如何设计的？散列冲突是通过哪种方法解决的？是否支持动态扩容呢？"></a>在你熟悉的编程语言中，哪些数据类型底层是基于散列表实现的？散列函数是如何设计的？散列冲突是通过哪种方法解决的？是否支持动态扩容呢？</h3><p>比如Redis中的hash,set,hset,都是散列表实现，他们的动态扩容策略是同时维护两个散列表，然后一点点搬移数据</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>散列表（上）</title>
    <url>/2020/09/02/article-43/</url>
    <content><![CDATA[<h1 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h1><h3 id="散列思想"><a href="#散列思想" class="headerlink" title="散列思想"></a>散列思想</h3><p>散列表用的是数组支持按照下标随机访问数据的特性，所以散列表其实就是数组的一种扩展，由数组演化而来。可以说，如果没有数组，就没有散列表。</p>
<p>当我们按照键值查询元素时，我们用同样的散列函数，将键值转化数组下标，从对应的数组下标的位置取数据。</p>
<h3 id="散列函数"><a href="#散列函数" class="headerlink" title="散列函数"></a>散列函数</h3><h4 id="基本要求"><a href="#基本要求" class="headerlink" title="基本要求"></a>基本要求</h4><ul>
<li>散列函数计算得到的散列值是一个非负整数</li>
<li>如果 key1 = key2，那 hash(key1) == hash(key2)</li>
<li>如果 key1 ≠ key2，那 hash(key1) ≠ hash(key2)</li>
</ul>
<h3 id="散列冲突"><a href="#散列冲突" class="headerlink" title="散列冲突"></a>散列冲突</h3><p>解决方法有两类，开放寻址法（open addressing）和链表法（chaining）。</p>
<h4 id="开放寻址法"><a href="#开放寻址法" class="headerlink" title="开放寻址法"></a>开放寻址法</h4><p>当我们往散列表中插入数据时，如果某个数据经过散列函数散列之后，存储位置已经被占用了，我们就从当前位置开始，依次往后查找，看是否有空闲位置，直到找到为止。</p>
<p>我们通过散列函数求出要查找元素的键值对应的散列值，然后比较数组中下标为散列值的元素和要查找的元素。如果相等，则说明就是我们要找的元素；否则就顺序往后依次查找。</p>
<p>对于开放寻址冲突解决方法，除了线性探测方法之外，还有另外两种比较经典的探测方法，<strong><em>二次探测</em></strong>（Quadratic probing）和<strong><em>双重散列</em></strong>（Double hashing）。</p>
<p>为了尽可能保证散列表的操作效率，一般情况下，我们会尽可能保证散列表中有一定比例的空闲槽位。我们用装载因子（load factor）来表示空位的多少。</p>
<p>装载因子的计算公式是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">散列表的装载因子&#x3D;填入表中的元素个数&#x2F;散列表的长度</span><br></pre></td></tr></table></figure>

<p><strong><em>装载因子越大，说明空闲位置越少，冲突越多，散列表的性能会下降。</em></strong></p>
<h4 id="链表法（拉链法）"><a href="#链表法（拉链法）" class="headerlink" title="链表法（拉链法）"></a>链表法（拉链法）</h4><p>链表法是一种更加常用的散列冲突解决办法，相比开放寻址法，它要简单很多。我们来看这个图，在散列表中，每个“桶（bucket）”或者“槽（slot）”会对应一条链表，所有散列值相同的元素我们都放到相同槽位对应的链表中。</p>
<p>对于散列比较均匀的散列函数来说，理论上讲，k=n/m，其中 n 表示散列中数据的个数，m 表示散列表中“槽”的个数。</p>
<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><h4 id="假设我们有-10-万条-URL-访问日志，如何按照访问次数给-URL-排序？"><a href="#假设我们有-10-万条-URL-访问日志，如何按照访问次数给-URL-排序？" class="headerlink" title="假设我们有 10 万条 URL 访问日志，如何按照访问次数给 URL 排序？"></a>假设我们有 10 万条 URL 访问日志，如何按照访问次数给 URL 排序？</h4><p>遍历 10 万条数据，以 URL 为 key，访问次数为 value，存入散列表，同时记录下访问次数的最大值 K，时间复杂度 O(N)。</p>
<p>如果 K 不是很大，可以使用桶排序，时间复杂度 O(N)。如果 K 非常大（比如大于 10 万），就使用快速排序，复杂度 O(NlogN)。</p>
<h4 id="有两个字符串数组，每个数组大约有-10-万条字符串，如何快速找出两个数组中相同的字符串？"><a href="#有两个字符串数组，每个数组大约有-10-万条字符串，如何快速找出两个数组中相同的字符串？" class="headerlink" title="有两个字符串数组，每个数组大约有 10 万条字符串，如何快速找出两个数组中相同的字符串？"></a>有两个字符串数组，每个数组大约有 10 万条字符串，如何快速找出两个数组中相同的字符串？</h4><p>以第一个字符串数组构建散列表，key 为字符串，value 为出现次数。再遍历第二个字符串数组，以字符串为 key 在散列表中查找，如果 value 大于零，说明存在相同字符串。时间复杂度 O(N)。</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>散列表（下）</title>
    <url>/2020/09/02/article-45/</url>
    <content><![CDATA[<h2 id="散列表和链表一起使用"><a href="#散列表和链表一起使用" class="headerlink" title="散列表和链表一起使用"></a>散列表和链表一起使用</h2><h3 id="LRU-缓存淘汰算法"><a href="#LRU-缓存淘汰算法" class="headerlink" title="LRU 缓存淘汰算法"></a>LRU 缓存淘汰算法</h3>]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>排序（下）- 归并和快排</title>
    <url>/2020/09/01/article-38/</url>
    <content><![CDATA[<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="归并排序（Merge-Sort）"><a href="#归并排序（Merge-Sort）" class="headerlink" title="归并排序（Merge Sort）"></a>归并排序（Merge Sort）</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>把数组从中间分成前后两部分，然后对前后两部分分别排序，再将排好序的两部分合并在一起，这样整个数组就都有序了。利用分治法的思想，和递归的编程技巧。</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法一</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(arrays, l, mid, r)</span>:</span></span><br><span class="line">    output = []</span><br><span class="line">    i = l</span><br><span class="line">    j = mid + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> i &lt;= mid <span class="keyword">and</span> j &lt;= r:</span><br><span class="line">        <span class="keyword">if</span> arrays[i] &lt;= arrays[j]:</span><br><span class="line">            output.append(arrays[i])</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            output.append(arrays[j])</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> arrays[i:mid+<span class="number">1</span>] + arrays[j:r+<span class="number">1</span>]:</span><br><span class="line">        output.append(k)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> range(len(output)):</span><br><span class="line">        arrays[l+idx] = output[idx]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mergesort</span><span class="params">(arrays, l, r)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> l &lt; r:</span><br><span class="line">        mid = l + ((r - l) &gt;&gt; <span class="number">1</span>)</span><br><span class="line">        mergesort(arrays, l, mid)</span><br><span class="line">        mergesort(arrays, mid + <span class="number">1</span>, r)</span><br><span class="line">        merge(arrays, l, mid, r)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法二</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(arrays, arr1, arr2)</span>:</span></span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    length = len(arrays)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> i+j&lt;length:</span><br><span class="line">        <span class="keyword">if</span> j == len(arr2) <span class="keyword">or</span> (i &lt; len(arr1) <span class="keyword">and</span> arr1[i] &lt;= arr2[j]):</span><br><span class="line">            arrays[i+j] = arr1[i]</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            arrays[i+j] = arr2[j]</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(arrays)</span>:</span></span><br><span class="line">    length = len(arrays)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> length &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> arrays</span><br><span class="line"></span><br><span class="line">    mid = length // <span class="number">2</span></span><br><span class="line">    arr1 = arrays[:mid]</span><br><span class="line">    arr2 = arrays[mid:]</span><br><span class="line"></span><br><span class="line">    merge_sort(arr1)</span><br><span class="line">    merge_sort(arr2)</span><br><span class="line"></span><br><span class="line">    merge(arrays, arr1, arr2)</span><br></pre></td></tr></table></figure>

<h4 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h4><h6 id="构造合理的merge函数，可以使得归并排序成为稳定排序"><a href="#构造合理的merge函数，可以使得归并排序成为稳定排序" class="headerlink" title="构造合理的merge函数，可以使得归并排序成为稳定排序"></a>构造合理的merge函数，可以使得归并排序成为稳定排序</h6><h6 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h6><p>设b，c是a的子问题，由此可得到一下公式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">T(a) &#x3D; T(b) + T(c) + K</span><br><span class="line"># 其中 K 等于将两个子问题 b、c 的结果合并成问题 a 的结果所消耗的时间</span><br></pre></td></tr></table></figure>

<p>可以得到一个重要的结论：<strong><em>不仅递归求解的问题可以写成递推公式，递归代码的时间复杂度也可以写成递推公式</em></strong>。</p>
<p>最终递推公式为：<strong><em>T(n) = 2^kT(n/2^k)+kn</em></strong></p>
<p>所以，<strong><em>归并排序的时间复杂度为nlogn</em></strong></p>
<h6 id="空间复杂度O-n"><a href="#空间复杂度O-n" class="headerlink" title="空间复杂度O(n)"></a>空间复杂度O(n)</h6><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>如果要排序数组中下标从 p 到 r 之间的一组数据，我们选择 p 到 r 之间的任意一个数据作为 pivot（分区点）。我们遍历 p 到 r 之间的数据，将小于 pivot 的放到左边，将大于 pivot 的放到右边，将 pivot 放到中间。经过这一步骤之后，数组 p 到 r 之间的数据就被分成了三个部分，前面 p 到 q-1 之间都是小于 pivot 的，中间是 pivot，后面的 q+1 到 r 之间是大于 pivot 的。</p>
<p>根据分治、递归的处理思想，我们可以用递归排序下标从 p 到 q-1 之间的数据和下标从 q+1 到 r 之间的数据，直到区间缩小为 1，就说明所有的数据都有序了。</p>
<h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 快速排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span><span class="params">(arrays, l, r)</span>:</span></span><br><span class="line">    val = arrays[r]</span><br><span class="line">    idx = l - <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(l, r):</span><br><span class="line">        <span class="keyword">if</span> arrays[i] &lt;= val:</span><br><span class="line">            idx += <span class="number">1</span></span><br><span class="line">            arrays[idx], arrays[i] = arrays[i], arrays[idx]</span><br><span class="line"></span><br><span class="line">    arrays[idx+<span class="number">1</span>], arrays[r] = arrays[r], arrays[idx+<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> idx+<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(arrays, l, r)</span>:</span></span><br><span class="line">    <span class="comment"># 分区区间小于1时退出</span></span><br><span class="line">    <span class="keyword">if</span> l&lt;r:</span><br><span class="line">        idx = partition(arrays, l, r)</span><br><span class="line">        quick_sort(arrays, l, idx<span class="number">-1</span>)</span><br><span class="line">        quick_sort(arrays, idx+<span class="number">1</span>, r)</span><br></pre></td></tr></table></figure>

<h4 id="与归并排序区别"><a href="#与归并排序区别" class="headerlink" title="与归并排序区别"></a>与归并排序区别</h4><p>归并排序的处理过程是<strong><em>由下到上</em></strong>的，先处理子问题，然后再合并。而快排正好相反，它的处理过程是<strong><em>由上到下</em></strong>的，先分区，然后再处理子问题。</p>
<h4 id="性能分析-1"><a href="#性能分析-1" class="headerlink" title="性能分析"></a>性能分析</h4><p>最坏时间复杂度O(n^2)，平均复杂度O(nlogn)</p>
<h3 id="内容小结"><a href="#内容小结" class="headerlink" title="内容小结"></a>内容小结</h3><p>归并排序算法是一种在任何情况下时间复杂度都比较稳定的排序算法，这也使它存在致命的缺点，即归并排序不是原地排序算法，空间复杂度比较高，是 O(n)。</p>
<p>快速排序算法虽然最坏情况下的时间复杂度是 O(n2)，但是平均情况下时间复杂度都是 O(nlogn)。不仅如此，快速排序算法时间复杂度退化到 O(n2) 的概率非常小，我们可以通过合理地选择 pivot 来避免这种情况。</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>线性排序</title>
    <url>/2020/09/01/article-39/</url>
    <content><![CDATA[<h2 id="线性排序"><a href="#线性排序" class="headerlink" title="线性排序"></a>线性排序</h2><p>桶排序、计数排序、基数排序。因为这些排序算法的时间复杂度是线性的，所以我们把这类排序算法叫作线性排序。</p>
<h3 id="桶排序（Bucket-sort）"><a href="#桶排序（Bucket-sort）" class="headerlink" title="桶排序（Bucket sort）"></a>桶排序（Bucket sort）</h3><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bucket_sort</span><span class="params">(arrays)</span>:</span></span><br><span class="line">    length = len(arrays)</span><br><span class="line">    bucket_num = <span class="number">5</span></span><br><span class="line">    min_num = arrays[<span class="number">0</span>]</span><br><span class="line">    max_num = arrays[<span class="number">0</span>]</span><br><span class="line">    output = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, length):</span><br><span class="line">        <span class="keyword">if</span> arrays[i] &lt; min_num:</span><br><span class="line">            min_num = arrays[i]</span><br><span class="line">        <span class="keyword">elif</span> arrays[i] &gt; max_num:</span><br><span class="line">            max_num = arrays[i]</span><br><span class="line"></span><br><span class="line">    buckets_size = (max_num - min_num + <span class="number">1</span>) // bucket_num</span><br><span class="line">    bucket_lists = [[] <span class="keyword">for</span> i <span class="keyword">in</span> range(buckets_size)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> num <span class="keyword">in</span> arrays:</span><br><span class="line">        idx = (num-min_num) // buckets_size</span><br><span class="line">        bucket_lists[idx].append(num)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> bucket <span class="keyword">in</span> bucket_lists:</span><br><span class="line">      	<span class="comment"># 使用快排对桶内数组进行排序</span></span><br><span class="line">        quick_sort(bucket, <span class="number">0</span>, len(bucket)<span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> bucket_lists:</span><br><span class="line">        output.extend(i)</span><br><span class="line"></span><br><span class="line">    print(output)</span><br></pre></td></tr></table></figure>

<h4 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h4><p>要排序的数据需要很容易就能划分成 m 个桶，并且，桶与桶之间有着天然的大小顺序。在极端情况下，如果数据都被划分到一个桶里，那就退化为 O(nlogn) 的排序算法了。</p>
<h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><p>桶排序比较<strong><em>适合用在外部排序中</em></strong>。所谓的外部排序就是数据存储在外部磁盘中，数据量比较大，内存有限，无法将数据全部加载到内存中。</p>
<h3 id="计数排序（Counting-sort）"><a href="#计数排序（Counting-sort）" class="headerlink" title="计数排序（Counting sort）"></a>计数排序（Counting sort）</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>一种特殊的桶排序。当要排序的 n 个数据，所处的范围并不大的时候，比如最大值是 k，我们就可以把数据划分成 k 个桶。</p>
<h4 id="“计数”的含义"><a href="#“计数”的含义" class="headerlink" title="“计数”的含义"></a>“计数”的含义</h4><p>利用另一个数组C记录小于等于当前桶值的数量，然后倒序遍历待排序数组A，然后根据数组C中对应的值确定当前值的位置，最后数组C对应数量减一，直至为零，往复循环。</p>
<h4 id="局限性-1"><a href="#局限性-1" class="headerlink" title="局限性"></a>局限性</h4><p>计数排序只能用在数据范围不大的场景中，如果数据范围 k 比要排序的数据 n 大很多，就不适合用计数排序了。而且，计数排序只能给非负整数排序，如果要排序的数据是其他类型的，要将其在不改变相对大小的情况下，转化为非负整数。</p>
<h3 id="基数排序（Radix-sort）"><a href="#基数排序（Radix-sort）" class="headerlink" title="基数排序（Radix sort）"></a>基数排序（Radix sort）</h3><p>以手机号排序为例（长度一致），需从末尾开始遍历然后递进排序。</p>
<h4 id="局限性-2"><a href="#局限性-2" class="headerlink" title="局限性"></a>局限性</h4><p>基数排序对要排序的数据是有要求的，需要可以分割出独立的“位”来比较，而且位之间有递进的关系，如果 a 数据的高位比 b 数据大，那剩下的低位就不用比较了。除此之外，每一位的数据范围不能太大，要可以用线性排序算法来排序，否则，基数排序的时间复杂度就无法做到 O(n) 了</p>
<h3 id="内容小结"><a href="#内容小结" class="headerlink" title="内容小结"></a>内容小结</h3><p>桶排序和计数排序的排序思想是非常相似的，都是针对范围不大的数据，将数据划分成不同的桶来实现排序。基数排序要求数据可以划分成高低位，位之间有递进关系。比较两个数，我们只需要比较高位，高位相同的再比较低位。而且每一位的数据范围不能太大，因为基数排序算法需要借助桶排序或者计数排序来完成每一个位的排序工作。</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
</search>
