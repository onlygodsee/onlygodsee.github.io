<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Git Pages + Hexo 搭建个人博客记录</title>
    <url>/2020/04/26/article-1/</url>
    <content><![CDATA[<p>首先交代一下为什么使用Hexo而不是Jekyll。因为电脑环境有问题导致第一次安装Ruby失败了，然后懒得弄了。</p>
<p>开发环境：Mac</p>
<p>感谢 <strong><a href="https://blog.csdn.net/muzilanlan/article/details/81542917" target="_blank" rel="noopener">muzilan</a></strong> 兄台的分享</p>
<a id="more"></a>

<h3 id="设置Git-Pages"><a href="#设置Git-Pages" class="headerlink" title="设置Git Pages"></a>设置Git Pages</h3><p> 创建一个新仓库，命名规则为 <strong>{*username*}.github.io</strong></p>
<p> 注意这里的 <strong>“*username*”</strong> 是 Github 的用户名</p>
<p> 创建成功后创建 <strong><em>index.html\</em></strong> 文件，内容随意</p>
<p> 之后使用浏览器打开pages页面查看是否创建成功</p>
<h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p> <a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo模版地址</a></p>
<p> <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo中文文档</a></p>
<p> <a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">Next主题文档</a></p>
<p> Hexo 依赖 Node.js 环境，我这里已经安装过了便不再叙述。</p>
<h4 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h4><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">npm install -g hexo-cli<br></code></pre></td></tr></table></figure>

<p> 初始化 Hexo 目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">mkdir hexofolder<br>hexo init hexofolder<br>cd hexofolder<br>npm install<br></code></pre></td></tr></table></figure>

<h4 id="Hexo-常用命令"><a href="#Hexo-常用命令" class="headerlink" title="Hexo 常用命令"></a>Hexo 常用命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">hexo g # 生成模版<br>hexo s # 启动本地服务 http://localhost:4000<br>hexo d # 部署<br>hexo new post [postname] # 创建指定名称的文章文件,md格式<br>hexo new page [pagename] # 创建新的页面，eg：tags， categories<br>hexo d -g # 生成部署<br>hexo s -g # 生成预览<br></code></pre></td></tr></table></figure>

<h4 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h4><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">hexo clean<br>cd hexofolder/themes<br>git clone [theme地址] [themename] # 将theme模版以自定义name保存到本地<br></code></pre></td></tr></table></figure>

<h4 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h4><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cd hexofolder/themes/[themename] # 进入主题目录<br>git pull<br>hexo g<br>hexo s<br></code></pre></td></tr></table></figure>

<h4 id="部署至-Git-Pages"><a href="#部署至-Git-Pages" class="headerlink" title="部署至 Git Pages"></a>部署至 Git Pages</h4><p> 安装插件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure>

<p> 修改 <strong><em>站点配置文件\</em></strong> <strong><em>_config.yml\</em></strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">deploy:<br>  type: git<br>  repo: [Git Pages 地址]<br>  branch: master<br></code></pre></td></tr></table></figure>

<p> 在 Hexo 中执行部署命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">hexo d<br></code></pre></td></tr></table></figure>

<p>至此 模版部署完成</p>
<h3 id="Hexo-添加分类、标签"><a href="#Hexo-添加分类、标签" class="headerlink" title="Hexo 添加分类、标签"></a>Hexo 添加分类、标签</h3><h4 id="新建分类页面"><a href="#新建分类页面" class="headerlink" title="新建分类页面"></a>新建分类页面</h4><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">hexo new page categories<br></code></pre></td></tr></table></figure>

<p>此时会在 <strong><em>source/categories\</em></strong> 下生成一个 <strong><em>index.md\</em></strong> 文件,对他进行编辑</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">---<br>title: 分类<br>date: 2020-04-26 12:11:21<br>type: "categories"<br>comments: false<br>---<br></code></pre></td></tr></table></figure>

<p><strong><em>comments\</em></strong> 为评论开关</p>
<p>修改 <strong><em>主题配置文件 _config.yml\</em></strong> ，将分类与标签的注释打开</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">menu:<br>  home: / || fa fa-home<br><span class="hljs-meta">  #</span><span class="bash">about: /about/ || fa fa-user</span><br>  tags: /tags/ || fa fa-tags<br>  categories: /categories/ || fa fa-th<br>  archives: /archives/ || fa fa-archive<br><span class="hljs-meta">  #</span><span class="bash">schedule: /schedule/ || fa fa-calendar</span><br><span class="hljs-meta">  #</span><span class="bash">sitemap: /sitemap.xml || fa fa-sitemap</span><br><span class="hljs-meta">  #</span><span class="bash">commonweal: /404/ || fa fa-heartbeat</span><br></code></pre></td></tr></table></figure>

<p>标签的设置方式同分类</p>
<h4 id="文章中添加标签和分类等"><a href="#文章中添加标签和分类等" class="headerlink" title="文章中添加标签和分类等"></a>文章中添加标签和分类等</h4><p>新建文章</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">hexo new post [articlename]<br></code></pre></td></tr></table></figure>

<p>修改文章头部信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">---<br>title: [标题名称]<br>catalog: true<br>date: 2018-09-29 14:23:53<br>subtitle: "[子标题]"<br>header-img: "[imgpath]"<br>tags:<br>- [tag1]<br>- [tag2]<br>categories:<br>- [categorie1]<br>- [categorie2]<br>---<br></code></pre></td></tr></table></figure>

<h3 id="装饰博客"><a href="#装饰博客" class="headerlink" title="装饰博客"></a>装饰博客</h3><h4 id="配置网站"><a href="#配置网站" class="headerlink" title="配置网站"></a>配置网站</h4><p>打开 <strong><em>站点配置文件 _config.yml\</em></strong>, 修改参数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> Site</span><br>title: 太液池 # 网站标题<br>subtitle: ‘’ # 网站副标题<br>description: ''<br>keywords:<br>author: 青桑 # 您的名字<br>language: zh-CN # 网站使用的语言。参考你的主题的文档自行设置，常见的有 zh-Hans和 zh-CN<br>timezone: ''<br></code></pre></td></tr></table></figure>

<h4 id="设置网站的图标Favicon-ico和头像"><a href="#设置网站的图标Favicon-ico和头像" class="headerlink" title="设置网站的图标Favicon.ico和头像"></a>设置网站的图标Favicon.ico和头像</h4><p>在 <strong>source</strong> 下创建文件夹 <strong>images</strong>， 将图片文件保存在 <strong>images</strong> 目录下，然后修改 <strong><em>主题配置文件 _config.yml\</em></strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">favicon:<br>  small: /images/favicon-16x16-next.png<br>  medium: /images/favicon.ico # 这里修改要生效的图标<br>  apple_touch_icon: /images/apple-touch-icon-next.png<br>  safari_pinned_tab: /images/logo.svg<br><span class="hljs-meta">  #</span><span class="bash">android_manifest: /images/manifest.json</span><br><span class="hljs-meta">  #</span><span class="bash">ms_browserconfig: /images/browserconfig.xml</span><br>avatar:<br><span class="hljs-meta">  #</span><span class="bash"> Replace the default image and <span class="hljs-built_in">set</span> the url here.</span><br>  url: /images/blog_head.png # 这里修改为要生效的头像<br><span class="hljs-meta">  #</span><span class="bash"> If <span class="hljs-literal">true</span>, the avatar will be dispalyed <span class="hljs-keyword">in</span> circle.</span><br>  rounded: false<br><span class="hljs-meta">  #</span><span class="bash"> If <span class="hljs-literal">true</span>, the avatar will be rotated with the cursor.</span><br>  rotated: false<br></code></pre></td></tr></table></figure>

<h4 id="配置站内搜索"><a href="#配置站内搜索" class="headerlink" title="配置站内搜索"></a>配置站内搜索</h4><p>采用 <strong>Local Search</strong> 方式，添加百度/谷歌/本地 自定义站点内容搜索</p>
<p>安装 <code>hexo-generator-searchdb</code> ，在站点的根目录下执行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">npm install hexo-generator-searchdb --save<br></code></pre></td></tr></table></figure>

<p>在 <strong><em>站点配置文件\</em></strong> <strong><em>_config.yml\</em></strong> 末尾添加如下信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">search:<br>  path: search.xml<br>  field: post<br>  format: html<br>  limit: 10000<br></code></pre></td></tr></table></figure>

<p>在 <strong><em>主题配置文件\</em></strong> <strong><em>_config.yml\</em></strong> 中启用本地搜索：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> Local search</span><br>local_search:<br>  enable: true<br></code></pre></td></tr></table></figure>

<h4 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h4><p><strong>不蒜子统计</strong></p>
<p>修改 <strong><em>主题配置文件\</em></strong> <strong><em>_config.yml\</em></strong> 中 <strong><em>busuanzi_count\</em></strong> 配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">busuanzi_count:<br>  enable: true # true 为启用状态<br>  total_visitors: true # 统计访客数<br>  total_visitors_icon: fa fa-user<br>  total_views: true # 统计访问量<br>  total_views_icon: fa fa-eye<br>  post_views: true # 统计阅读数<br>  post_views_icon: fa fa-eye<br></code></pre></td></tr></table></figure>

<h3 id="利用Shell脚本按序号递增创建文章"><a href="#利用Shell脚本按序号递增创建文章" class="headerlink" title="利用Shell脚本按序号递增创建文章"></a>利用Shell脚本按序号递增创建文章</h3><p>创建shell脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">vim crt_hexo_article.sh<br><span class="hljs-meta">#</span><span class="bash"> 文件名命名示例 article-1.md<span class="hljs-string">"</span></span><br>NEW_FILE=`ls Hexo文章目录 | sed '/sh/d' | tail -n1`<br>echo $NEW_FILE<br>var=`echo $&#123;NEW_FILE&#125;|awk -F '-' '&#123;print $2&#125;'|awk -F '.' '&#123;print $1&#125;'`<br>echo "max index now -&gt; $var"<br><br>let var+=1<br>echo "create article index -&gt; $var"<br>hexo new post article-$&#123;var&#125;<br><span class="hljs-meta">#</span><span class="bash"> 使用 typora 打开刚刚创建的md文件</span><br>open -a typora Hexo文章路径<br></code></pre></td></tr></table></figure>

<p>在 <strong><em>.bash_profile\</em></strong> 中添加别名</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> shell 脚本别名</span><br>alias crtart="/bin/bash /Users/woo/crt_hexo_article.sh" <br><br><span class="hljs-meta">#</span><span class="bash"> typora 打开文件别名</span><br>alias typora="open -a typora"<br></code></pre></td></tr></table></figure>

<p>保存退出后执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">source .bash_profile<br></code></pre></td></tr></table></figure>

<p>进入站点目录输入别名 <strong><em>crtart\</em></strong></p>
<h3 id="文章图片"><a href="#文章图片" class="headerlink" title="文章图片"></a>文章图片</h3><h3 id="Github-图床"><a href="#Github-图床" class="headerlink" title="Github 图床"></a>Github 图床</h3><p>在Github中新建了一个图床仓库，将图片push到仓库中，然后在文本中引用图片的地址就可以</p>
<h4 id="本地图片"><a href="#本地图片" class="headerlink" title="本地图片"></a>本地图片</h4><p>将图片保存至站点目录下的 <strong>source/images/[articlename]</strong> 中，然后在文本中引用如下链接：</p>
<p><strong><a href="http://onlygodsee.top/images/[articlename]/img.png" target="_blank" rel="noopener">http://onlygodsee.top/images/[articlename]/img.png</a></strong></p>
<h4 id="hexo-asset-image-插件"><a href="#hexo-asset-image-插件" class="headerlink" title="hexo-asset-image 插件"></a>hexo-asset-image 插件</h4><p>安装 hexo-asset-image</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">npm install hexo-asset-image --save<br></code></pre></td></tr></table></figure>

<p>修改 <strong><em>站点配置文件\</em></strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">post_asset_folder: true<br></code></pre></td></tr></table></figure>

<p>之后每次new命令创建文章的时候就会生成同名的资源文件夹，部署的时候就会把资源文件同步上传到文章目录下</p>
<p>在发布文章时，先把我们要用到的图片放到文章目录下面的同名目录中</p>
<p>然后markdown中的图片链接直接填入图片名称即可</p>
<h4 id="图片预览"><a href="#图片预览" class="headerlink" title="图片预览"></a>图片预览</h4><p>想要让博文中的图片有放大预览功能需要借助插件 <strong>fancybox</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cd theme/next/source/lib<br><br>git clone https://github.com/theme-next/theme-next-fancybox3 fancybox<br></code></pre></td></tr></table></figure>

<p>修改 <strong><em>主题配置文件\</em></strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">fancybox: true<br></code></pre></td></tr></table></figure>

<p>重新部署后就可以看到效果了</p>
<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><h4 id="部署后没有更新"><a href="#部署后没有更新" class="headerlink" title="部署后没有更新"></a>部署后没有更新</h4><p>解决方案：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">hexo clean<br>hexo d -g<br></code></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/nzjdsds/article/details/81194116" target="_blank" rel="noopener">参考地址</a></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>Hexo</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>JS逆向学习-某8登陆参数</title>
    <url>/2020/06/04/article-10/</url>
    <content><![CDATA[<p>某8登陆参数</p>
<a id="more"></a>

<p>aHR0cHM6Ly9wYXNzcG9ydC41OC5jb20vbG9naW4vP3BhdGg9aHR0cHMlM0EvL2Z6LjU4LmNvbS8mUEdUSUQ9MGQxMDAwMDAtMDAxMy0wMjk0LTFjZWItYjU3NTBiZDIwNmU5JkNsaWNrSUQ9Mg</p>
<h3 id="分析请求"><a href="#分析请求" class="headerlink" title="分析请求"></a>分析请求</h3><p><img src="WX20200604-142559.png" srcset="/img/loading.gif" alt=""></p>
<p>登陆请求操作中需要对上述标记的四个参数进行分析</p>
<p>首先看 <strong><em>token</em></strong>，全局搜索一下发现是一个请求返回的</p>
<p><img src="WX20200604-142857.png" srcset="/img/loading.gif" alt=""></p>
<p><img src="WX20200604-143121.png" srcset="/img/loading.gif" alt=""></p>
<p>该请求的参数貌似是定值，再全局搜索，发现是登陆页返回的</p>
<p><img src="WX20200604-143415.png" srcset="/img/loading.gif" alt=""></p>
<p>接下来定位 <strong><em>password</em></strong> ，继续全局搜索</p>
<p><img src="WX20200604-143742.png" srcset="/img/loading.gif" alt=""></p>
<p>在这里打断点，然后进行调试，发现了加密位置</p>
<p><img src="WX20200604-143933.png" srcset="/img/loading.gif" alt=""></p>
<p><img src="WX20200604-144158.png" srcset="/img/loading.gif" alt=""></p>
<p>还需要两个参数，然后万能的全局查询安排</p>
<p><img src="WX20200604-144432.png" srcset="/img/loading.gif" alt=""></p>
<p>好了，这个也搞定了，然后找其他的</p>
<p>全局搜索 <strong><em>fingerprint</em></strong> ，发现是在cookie中获取的</p>
<p><img src="WX20200604-165705.png" srcset="/img/loading.gif" alt=""></p>
<p><img src="WX20200604-165848.png" srcset="/img/loading.gif" alt=""></p>
<p>顺势定位 <strong><em>finger2</em></strong> 参数</p>
<p><img src="WX20200604-170312.png" srcset="/img/loading.gif" alt=""></p>
<p><img src="WX20200604-170435.png" srcset="/img/loading.gif" alt=""></p>
<p>这里就是指纹加密的地方</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>需要注意的是浏览器指纹信息的构建，但总体来说不难</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>JS逆向</category>
      </categories>
      <tags>
        <tag>JS逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>JS逆向学习-某某之星登陆</title>
    <url>/2020/06/05/article-11/</url>
    <content><![CDATA[<p>某某之星登陆</p>
<a id="more"></a>

<p>aHR0cHM6Ly9ob3RlbC5iZXN0d2Vob3RlbC5jb20vTmV3TG9naW4vP2dvPWh0dHBzJTNBJTJGJTJGaG90ZWwuYmVzdHdlaG90ZWwuY29tJTJG</p>
<h3 id="分析请求"><a href="#分析请求" class="headerlink" title="分析请求"></a>分析请求</h3><p><img src="WX20200605-163518.png" srcset="/img/loading.gif" alt=""></p>
<p>需要解决的是这两个参数</p>
<p>先来看 <strong><em>password</em></strong>， 通过全局搜索定位到如下位置</p>
<p><img src="WX20200605-164302.png" srcset="/img/loading.gif" alt=""></p>
<p>追进去查看这个加密方法</p>
<p><img src="WX20200605-164501.png" srcset="/img/loading.gif" alt=""></p>
<p>这里就是最终的aes加密方法</p>
<p>接下来重点看 <strong><em>black_box</em></strong>，全局搜索一下</p>
<p><img src="WX20200605-164713.png" srcset="/img/loading.gif" alt=""></p>
<p>发现是通过 <strong><em>_fmOpt.getinfo()</em></strong> 获取的，再来看下 <strong><em>_fmOpt</em></strong> 定义位置</p>
<p><img src="WX20200605-165922.png" srcset="/img/loading.gif" alt=""></p>
<p>我们找到了定义的位置，但是发现这并不是我们需要的结果，接下来我们直接在控制台输出这个函数</p>
<p><img src="WX20200605-170642.png" srcset="/img/loading.gif" alt=""></p>
<p>最后发现这段函数是在一个文件中定义的，然后通过 <strong><em>reres</em></strong> 工具替换这个文件并打上断点便于调试</p>
<p><img src="WX20200605-171024.png" srcset="/img/loading.gif" alt=""></p>
<p><img src="WX20200605-171115.png" srcset="/img/loading.gif" alt=""></p>
<p>最后发现是对一个对象进行了base64操作，看下这个对象</p>
<p><img src="WX20200605-171319.png" srcset="/img/loading.gif" alt=""></p>
<p>其中 <strong><em>it</em></strong> 是两个时间戳的差值，<strong><em>v</em></strong> 是版本信息，属于定值，<strong><em>t</em></strong>是浏览器信息</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>注意 <strong><em>eval</em></strong> 和混淆代码的处理及调试</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>JS逆向</category>
      </categories>
      <tags>
        <tag>JS逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>JS逆向学习-某某猫企业信息查询参数分析</title>
    <url>/2020/06/10/article-12/</url>
    <content><![CDATA[<p>某某猫企业信息查询参数分析</p>
<a id="more"></a>

<p>aHR0cHM6Ly93d3cucWljaGFtYW8uY29tLw==</p>
<h3 id="分析请求"><a href="#分析请求" class="headerlink" title="分析请求"></a>分析请求</h3><p><img src="WX20200610-153511.png" srcset="/img/loading.gif" alt=""></p>
<p>这个就是结果的响应页面，其中只有一个参数 <strong><em>mfccode</em></strong> ,全局搜索定位到了这里</p>
<p><img src="WX20200610-153913.png" srcset="/img/loading.gif" alt=""></p>
<p>在这里打上断点，继续调试</p>
<p><img src="WX20200610-154318.png" srcset="/img/loading.gif" alt=""></p>
<p>发现成功断上了，然后继续跟进调试</p>
<p><img src="WX20200610-154503.png" srcset="/img/loading.gif" alt=""></p>
<p><strong><em>window.__qzmcf</em></strong> 是 <strong><em>dc</em></strong> 函数，另外是否发现标注的这个url很眼熟，我们回头看下第一张图片</p>
<p><img src="WX20200610-154839.png" srcset="/img/loading.gif" alt=""></p>
<p>chrome无法显示内容，新建窗口打开看下</p>
<p><img src="WX20200610-155001.png" srcset="/img/loading.gif" alt=""></p>
<p>格式化后查看</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">w</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> s = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a</span>) </span>&#123;<br>            <span class="hljs-keyword">if</span> (!a) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">''</span>;<br>            &#125;<br>            <span class="hljs-keyword">var</span> al = a.length,<br>                ret = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(al),<br>                i = <span class="hljs-number">0</span>,<br>                j = i;<br>            <span class="hljs-keyword">while</span> (al--) &#123;<br>                ret[j++] = <span class="hljs-built_in">String</span>.fromCharCode(a[i++])<br>            &#125;<br>            <span class="hljs-keyword">return</span> ret.join(<span class="hljs-string">''</span>);<br>        &#125;,<br>        ex = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">x, y</span>) </span>&#123;<br>            <span class="hljs-keyword">for</span> (n <span class="hljs-keyword">in</span> y) &#123;<br>                x[n] = y[n]<br>            &#125;<br>        &#125;,<br>        ck = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">sn</span>) </span>&#123;<br>            <span class="hljs-keyword">var</span> ac = w.document[s([<span class="hljs-number">99</span>, <span class="hljs-number">111</span>, <span class="hljs-number">111</span>, <span class="hljs-number">107</span>, <span class="hljs-number">105</span>, <span class="hljs-number">101</span>])].split(<span class="hljs-string">'; '</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; ac.length; i++) &#123;<br>                <span class="hljs-keyword">var</span> aCrumb = ac[i].split(<span class="hljs-string">'='</span>);<br>                <span class="hljs-keyword">if</span> (sn == aCrumb[<span class="hljs-number">0</span>]) &#123;<br>                    <span class="hljs-keyword">if</span> (aCrumb[<span class="hljs-number">1</span>] != <span class="hljs-literal">null</span> &amp;&amp; aCrumb[<span class="hljs-number">1</span>] != <span class="hljs-keyword">typeof</span> <span class="hljs-literal">undefined</span>) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-built_in">unescape</span>(aCrumb[<span class="hljs-number">1</span>]);<br>                    &#125;;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-string">''</span>;<br>                &#125;<br>            &#125;;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">typeof</span> <span class="hljs-literal">undefined</span>;<br>        &#125;,<br>        le = s([<span class="hljs-number">108</span>, <span class="hljs-number">101</span>, <span class="hljs-number">110</span>, <span class="hljs-number">103</span>, <span class="hljs-number">116</span>, <span class="hljs-number">104</span>]),<br>        pc = s([<span class="hljs-number">99</span>, <span class="hljs-number">104</span>, <span class="hljs-number">97</span>, <span class="hljs-number">114</span>, <span class="hljs-number">67</span>, <span class="hljs-number">111</span>, <span class="hljs-number">100</span>, <span class="hljs-number">101</span>, <span class="hljs-number">65</span>, <span class="hljs-number">116</span>]),<br>        id = ck(s([<span class="hljs-number">113</span>, <span class="hljs-number">122</span>, <span class="hljs-number">110</span>, <span class="hljs-number">101</span>, <span class="hljs-number">119</span>, <span class="hljs-number">115</span>, <span class="hljs-number">105</span>, <span class="hljs-number">116</span>, <span class="hljs-number">101</span>, <span class="hljs-number">46</span>, <span class="hljs-number">117</span>, <span class="hljs-number">105</span>, <span class="hljs-number">100</span>])),<br>        mov = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">var</span> dyt1 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">d5, y4</span>) </span>&#123;<br>                    <span class="hljs-keyword">return</span> d5 &gt;&gt; y4<br>                &#125;,<br>                kac5 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">k7, a4</span>) </span>&#123;<br>                    <span class="hljs-keyword">return</span> k7 &lt;&lt; a4<br>                &#125;,<br>                vau2 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">v8, a6</span>) </span>&#123;<br>                    <span class="hljs-keyword">return</span> v8 - a6<br>                &#125;,<br>                fwc3 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">f4, w0</span>) </span>&#123;<br>                    <span class="hljs-keyword">return</span> f4 + w0<br>                &#125;,<br>                ymx2 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">y1, m8</span>) </span>&#123;<br>                    <span class="hljs-keyword">return</span> y1 | m8<br>                &#125;,<br>                kdf8 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">k0, d0</span>) </span>&#123;<br>                    <span class="hljs-keyword">return</span> k0 &amp; d0<br>                &#125;,<br>                moh1 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">m4, o2</span>) </span>&#123;<br>                    <span class="hljs-keyword">return</span> m4 * o2<br>                &#125;,<br>                __x = <span class="hljs-number">178</span>;<br>            <span class="hljs-keyword">return</span> kac5(fwc3(moh1(vau2(kac5(fwc3(ymx2(kac5(kdf8(vau2(vau2(kac5(kac5(fwc3(fwc3(kac5(kdf8(dyt1(kdf8(kac5(fwc3(kac5(moh1(dyt1(moh1(dyt1(fwc3(kac5(dyt1(fwc3(vau2(vau2(kac5(dyt1(kdf8(moh1(kdf8(moh1(kac5(moh1(dyt1(kac5(dyt1(kdf8(kdf8(fwc3(dyt1(ymx2(kdf8(ymx2(moh1(dyt1(kdf8(kac5(kac5(kac5(ymx2(kac5(kac5(kac5(kdf8(vau2(ymx2(kac5(kac5(dyt1(kac5(fwc3(fwc3(vau2(ymx2(kdf8(ymx2(kac5(kac5(vau2(dyt1(dyt1(kdf8(fwc3(moh1(ymx2(moh1(vau2(dyt1(moh1(vau2(moh1(kac5(fwc3(dyt1(vau2(kac5(ymx2(ymx2(ymx2(kac5(kdf8(moh1(moh1(dyt1(fwc3(fwc3(kdf8(dyt1(dyt1(kdf8(kac5(ymx2(kac5(ymx2(moh1(kac5(vau2(moh1(kac5(dyt1(kac5(fwc3(dyt1(dyt1(vau2(vau2(fwc3(kac5(moh1(fwc3(ymx2(kdf8(dyt1(kac5(dyt1(ymx2(dyt1(fwc3(dyt1(kdf8(dyt1(dyt1(kdf8(dyt1(kac5(fwc3(ymx2(kdf8(dyt1(kac5(vau2(ymx2(kac5(kdf8(vau2(vau2(kac5(dyt1(vau2(kdf8(ymx2(vau2(dyt1(ymx2(ymx2(dyt1(kac5(vau2(ymx2(fwc3(dyt1(fwc3(kdf8(fwc3(kac5(ymx2(kac5(vau2(moh1(dyt1(ymx2(moh1(vau2(dyt1(fwc3(kdf8(kac5(kac5(kdf8(ymx2(kac5(ymx2(dyt1(kdf8(kac5(moh1(dyt1(kdf8(vau2(ymx2(dyt1(ymx2(moh1(ymx2(kac5(dyt1(kdf8(ymx2(vau2(fwc3(kac5(kdf8(moh1(moh1(dyt1(dyt1(moh1(moh1(kdf8(dyt1(ymx2(kdf8(moh1(vau2(vau2(ymx2(vau2(kdf8(kac5(moh1(kdf8(kac5(kdf8(dyt1(kac5(ymx2(ymx2(dyt1(dyt1(fwc3(vau2(vau2(moh1(kdf8(dyt1(kdf8(kdf8(fwc3(vau2(kac5(ymx2(vau2(fwc3(moh1(fwc3(moh1(moh1(ymx2(kac5(kac5(dyt1(kac5(kac5(dyt1(dyt1(kac5(kac5(dyt1(ymx2(dyt1(dyt1(ymx2(moh1(vau2(moh1(ymx2(ymx2(fwc3(vau2(fwc3(moh1(dyt1(fwc3(kac5(moh1(kac5(vau2(moh1(kac5(kac5(kac5(moh1(vau2(vau2(vau2(dyt1(ymx2(kac5(moh1(vau2(ymx2(dyt1(ymx2(moh1(dyt1(ymx2(kdf8(vau2(kdf8(kdf8(fwc3(kdf8(dyt1(moh1(kdf8(moh1(fwc3(vau2(dyt1(dyt1(ymx2(moh1(moh1(moh1(kdf8(moh1(fwc3(kac5(fwc3(ymx2(moh1(moh1(kac5(dyt1(vau2(vau2(kac5(ymx2(moh1(dyt1(fwc3(kdf8(moh1(ymx2(kdf8(ymx2(kac5(kdf8(ymx2(moh1(moh1(kac5(ymx2(vau2(moh1(vau2(kdf8(moh1(moh1(vau2(vau2(kdf8(ymx2(dyt1(dyt1(dyt1(ymx2(fwc3(dyt1(vau2(dyt1(fwc3(moh1(ymx2(dyt1(fwc3(fwc3(kdf8(fwc3(vau2(fwc3(dyt1(ymx2(fwc3(moh1(moh1(ymx2(ymx2(dyt1(vau2(kdf8(vau2(kdf8(kac5(dyt1(dyt1(ymx2(dyt1(ymx2(kac5(fwc3(dyt1(kac5(vau2(vau2(fwc3(vau2(kdf8(kdf8(ymx2(kac5(kdf8(vau2(ymx2(kdf8(vau2(kac5(ymx2(vau2(vau2(vau2(kdf8(dyt1(kdf8(kdf8(moh1(vau2(ymx2(fwc3(moh1(fwc3(vau2(ymx2(vau2(fwc3(moh1(fwc3(kdf8(moh1(vau2(moh1(dyt1(kdf8(vau2(dyt1(kac5(moh1(fwc3(kdf8(vau2(kdf8(fwc3(kac5(ymx2(kac5(dyt1(kdf8(moh1(ymx2(dyt1(kac5(ymx2(moh1(dyt1(vau2(vau2(vau2(kdf8(moh1(fwc3(ymx2(kdf8(moh1(vau2(vau2(kac5(moh1(ymx2(kac5(dyt1(moh1(fwc3(kac5(ymx2(vau2(dyt1(fwc3(vau2(kdf8(fwc3(dyt1(fwc3(dyt1(ymx2(kdf8(moh1(vau2(ymx2(dyt1(fwc3(ymx2(moh1(kdf8(ymx2(vau2(ymx2(dyt1(dyt1(vau2(kdf8(kac5(ymx2(kac5(kdf8(fwc3(__x, <span class="hljs-number">1406</span>), <span class="hljs-number">21212</span>), <span class="hljs-number">1</span>), <span class="hljs-number">1185</span>), <span class="hljs-number">2</span>), <span class="hljs-number">42417</span>), <span class="hljs-number">1564</span>), <span class="hljs-number">3</span>), <span class="hljs-number">2</span>), <span class="hljs-number">1683</span>), <span class="hljs-number">1406</span>), <span class="hljs-number">3335</span>), <span class="hljs-number">21459</span>), <span class="hljs-number">3</span>), <span class="hljs-number">3846</span>), <span class="hljs-number">598</span>), <span class="hljs-number">4</span>), <span class="hljs-number">882</span>), <span class="hljs-number">-102</span>), <span class="hljs-number">1</span>), <span class="hljs-number">55540</span>), <span class="hljs-number">2275</span>), <span class="hljs-number">2</span>), <span class="hljs-number">153</span>), <span class="hljs-number">2</span>), <span class="hljs-number">-3991</span>), <span class="hljs-number">61019</span>), <span class="hljs-number">-258</span>), <span class="hljs-number">-3883</span>), <span class="hljs-number">1</span>), <span class="hljs-number">3411</span>), <span class="hljs-number">1614</span>), <span class="hljs-number">1</span>), <span class="hljs-number">-1238</span>), <span class="hljs-number">2</span>), <span class="hljs-number">4</span>), <span class="hljs-number">3</span>), <span class="hljs-number">1895</span>), <span class="hljs-number">1</span>), <span class="hljs-number">2</span>), <span class="hljs-number">-643</span>), <span class="hljs-number">-2185</span>), <span class="hljs-number">1</span>), <span class="hljs-number">42090</span>), <span class="hljs-number">1191</span>), <span class="hljs-number">-2914</span>), <span class="hljs-number">4</span>), <span class="hljs-number">58000</span>), <span class="hljs-number">-1195</span>), <span class="hljs-number">-1979</span>), <span class="hljs-number">2367</span>), <span class="hljs-number">1</span>), <span class="hljs-number">1</span>), <span class="hljs-number">710</span>), <span class="hljs-number">4</span>), <span class="hljs-number">1</span>), <span class="hljs-number">951</span>), <span class="hljs-number">3</span>), <span class="hljs-number">27051</span>), <span class="hljs-number">1</span>), <span class="hljs-number">2</span>), <span class="hljs-number">3079</span>), <span class="hljs-number">2</span>), <span class="hljs-number">948</span>), <span class="hljs-number">47143</span>), <span class="hljs-number">898</span>), <span class="hljs-number">10855</span>), <span class="hljs-number">-1182</span>), <span class="hljs-number">1</span>), <span class="hljs-number">3</span>), <span class="hljs-number">3</span>), <span class="hljs-number">2618</span>), <span class="hljs-number">4782</span>), <span class="hljs-number">3</span>), <span class="hljs-number">1</span>), <span class="hljs-number">2922</span>), <span class="hljs-number">1</span>), <span class="hljs-number">53151</span>), <span class="hljs-number">2494</span>), <span class="hljs-number">3</span>), <span class="hljs-number">4017</span>), <span class="hljs-number">1211</span>), <span class="hljs-number">3693</span>), <span class="hljs-number">389</span>), <span class="hljs-number">592</span>), <span class="hljs-number">3</span>), <span class="hljs-number">2065</span>), <span class="hljs-number">3200</span>), <span class="hljs-number">3039</span>), <span class="hljs-number">2</span>), <span class="hljs-number">21493</span>), <span class="hljs-number">49244</span>), <span class="hljs-number">2</span>), <span class="hljs-number">51499</span>), <span class="hljs-number">-1454</span>), <span class="hljs-number">-3464</span>), <span class="hljs-number">1221</span>), <span class="hljs-number">2217</span>), <span class="hljs-number">3</span>), <span class="hljs-number">2815</span>), <span class="hljs-number">61805</span>), <span class="hljs-number">1372</span>), <span class="hljs-number">-156</span>), <span class="hljs-number">10772</span>), <span class="hljs-number">1</span>), <span class="hljs-number">1128</span>), <span class="hljs-number">39679</span>), <span class="hljs-number">53694</span>), <span class="hljs-number">328</span>), <span class="hljs-number">-1620</span>), <span class="hljs-number">-282</span>), <span class="hljs-number">1944</span>), <span class="hljs-number">4</span>), <span class="hljs-number">2</span>), <span class="hljs-number">-2659</span>), <span class="hljs-number">3</span>), <span class="hljs-number">842</span>), <span class="hljs-number">4</span>), <span class="hljs-number">2030</span>), <span class="hljs-number">1</span>), <span class="hljs-number">3</span>), <span class="hljs-number">1</span>), <span class="hljs-number">5956</span>), <span class="hljs-number">690</span>), <span class="hljs-number">55923</span>), <span class="hljs-number">2700</span>), <span class="hljs-number">4</span>), <span class="hljs-number">1440</span>), <span class="hljs-number">3897</span>), <span class="hljs-number">2</span>), <span class="hljs-number">2</span>), <span class="hljs-number">-2604</span>), <span class="hljs-number">407</span>), <span class="hljs-number">3</span>), <span class="hljs-number">3520</span>), <span class="hljs-number">2257</span>), <span class="hljs-number">-3658</span>), <span class="hljs-number">35189</span>), <span class="hljs-number">-3268</span>), <span class="hljs-number">-1766</span>), <span class="hljs-number">4</span>), <span class="hljs-number">1245</span>), <span class="hljs-number">3</span>), <span class="hljs-number">2606</span>), <span class="hljs-number">1</span>), <span class="hljs-number">1221</span>), <span class="hljs-number">1</span>), <span class="hljs-number">-2134</span>), <span class="hljs-number">1145</span>), <span class="hljs-number">3</span>), <span class="hljs-number">3</span>), <span class="hljs-number">4</span>), <span class="hljs-number">2166</span>), <span class="hljs-number">32254</span>), <span class="hljs-number">-2529</span>), <span class="hljs-number">440</span>), <span class="hljs-number">3</span>), <span class="hljs-number">1</span>), <span class="hljs-number">50152</span>), <span class="hljs-number">-3151</span>), <span class="hljs-number">3</span>), <span class="hljs-number">2917</span>), <span class="hljs-number">2408</span>), <span class="hljs-number">1</span>), <span class="hljs-number">2</span>), <span class="hljs-number">4</span>), <span class="hljs-number">1589</span>), <span class="hljs-number">59244</span>), <span class="hljs-number">3</span>), <span class="hljs-number">1810</span>), <span class="hljs-number">40854</span>), <span class="hljs-number">1269</span>), <span class="hljs-number">3</span>), <span class="hljs-number">52930</span>), <span class="hljs-number">-3553</span>), <span class="hljs-number">4</span>), <span class="hljs-number">2</span>), <span class="hljs-number">3255</span>), <span class="hljs-number">3</span>), <span class="hljs-number">-3498</span>), <span class="hljs-number">1891</span>), <span class="hljs-number">3</span>), <span class="hljs-number">2</span>), <span class="hljs-number">3</span>), <span class="hljs-number">1</span>), <span class="hljs-number">372</span>), <span class="hljs-number">3071</span>), <span class="hljs-number">2</span>), <span class="hljs-number">3572</span>), <span class="hljs-number">1</span>), <span class="hljs-number">34481</span>), <span class="hljs-number">4</span>), <span class="hljs-number">4</span>), <span class="hljs-number">1</span>), <span class="hljs-number">282</span>), <span class="hljs-number">3</span>), <span class="hljs-number">3</span>), <span class="hljs-number">-3580</span>), <span class="hljs-number">-3905</span>), <span class="hljs-number">3</span>), <span class="hljs-number">13000</span>), <span class="hljs-number">4</span>), <span class="hljs-number">2</span>), <span class="hljs-number">8826</span>), <span class="hljs-number">-1575</span>), <span class="hljs-number">33443</span>), <span class="hljs-number">15121</span>), <span class="hljs-number">1749</span>), <span class="hljs-number">41336</span>), <span class="hljs-number">1515</span>), <span class="hljs-number">3</span>), <span class="hljs-number">4</span>), <span class="hljs-number">3580</span>), <span class="hljs-number">3</span>), <span class="hljs-number">1248</span>), <span class="hljs-number">-3954</span>), <span class="hljs-number">2</span>), <span class="hljs-number">3</span>), <span class="hljs-number">4076</span>), <span class="hljs-number">2</span>), <span class="hljs-number">2384</span>), <span class="hljs-number">-1252</span>), <span class="hljs-number">-4046</span>), <span class="hljs-number">2</span>), <span class="hljs-number">2</span>), <span class="hljs-number">2</span>), <span class="hljs-number">3</span>), <span class="hljs-number">4</span>), <span class="hljs-number">4054</span>), <span class="hljs-number">3</span>), <span class="hljs-number">1</span>), <span class="hljs-number">4</span>), <span class="hljs-number">1826</span>), <span class="hljs-number">2</span>), <span class="hljs-number">3</span>), <span class="hljs-number">2031</span>), <span class="hljs-number">-2693</span>), <span class="hljs-number">2272</span>), <span class="hljs-number">2468</span>), <span class="hljs-number">2450</span>), <span class="hljs-number">1</span>), <span class="hljs-number">-2497</span>), <span class="hljs-number">4</span>), <span class="hljs-number">1686</span>), <span class="hljs-number">2</span>), <span class="hljs-number">3</span>), <span class="hljs-number">3539</span>), <span class="hljs-number">1</span>), <span class="hljs-number">2</span>), <span class="hljs-number">3</span>), <span class="hljs-number">3</span>), <span class="hljs-number">4</span>), <span class="hljs-number">3</span>), <span class="hljs-number">1</span>), <span class="hljs-number">1</span>), <span class="hljs-number">3</span>), <span class="hljs-number">4</span>), <span class="hljs-number">3016</span>), <span class="hljs-number">1</span>), <span class="hljs-number">1</span>), <span class="hljs-number">-3156</span>), <span class="hljs-number">3</span>), <span class="hljs-number">18</span>), <span class="hljs-number">-1557</span>), <span class="hljs-number">432</span>), <span class="hljs-number">1</span>), <span class="hljs-number">-3388</span>), <span class="hljs-number">-2011</span>), <span class="hljs-number">34081</span>), <span class="hljs-number">26569</span>), <span class="hljs-number">2</span>), <span class="hljs-number">21141</span>), <span class="hljs-number">4</span>), <span class="hljs-number">1925</span>), <span class="hljs-number">2762</span>), <span class="hljs-number">-2549</span>), <span class="hljs-number">1</span>), <span class="hljs-number">2</span>), <span class="hljs-number">3628</span>), <span class="hljs-number">3597</span>), <span class="hljs-number">1</span>), <span class="hljs-number">2</span>), <span class="hljs-number">14065</span>), <span class="hljs-number">2</span>), <span class="hljs-number">32077</span>), <span class="hljs-number">2</span>), <span class="hljs-number">3</span>), <span class="hljs-number">39399</span>), <span class="hljs-number">1187</span>), <span class="hljs-number">1204</span>), <span class="hljs-number">-544</span>), <span class="hljs-number">2278</span>), <span class="hljs-number">1</span>), <span class="hljs-number">13726</span>), <span class="hljs-number">2747</span>), <span class="hljs-number">4</span>), <span class="hljs-number">62605</span>), <span class="hljs-number">2</span>), <span class="hljs-number">2</span>), <span class="hljs-number">4</span>), <span class="hljs-number">4</span>), <span class="hljs-number">3</span>), <span class="hljs-number">3</span>), <span class="hljs-number">64237</span>), <span class="hljs-number">4</span>), <span class="hljs-number">-3653</span>), <span class="hljs-number">-392</span>), <span class="hljs-number">3980</span>), <span class="hljs-number">52493</span>), <span class="hljs-number">3</span>), <span class="hljs-number">1</span>), <span class="hljs-number">804</span>), <span class="hljs-number">1</span>), <span class="hljs-number">1901</span>), <span class="hljs-number">2</span>), <span class="hljs-number">3674</span>), <span class="hljs-number">3154</span>), <span class="hljs-number">22167</span>), <span class="hljs-number">2</span>), <span class="hljs-number">1</span>), <span class="hljs-number">4</span>), <span class="hljs-number">46515</span>), <span class="hljs-number">3</span>), <span class="hljs-number">1549</span>), <span class="hljs-number">4</span>), <span class="hljs-number">755</span>), <span class="hljs-number">59834</span>), <span class="hljs-number">1</span>), <span class="hljs-number">4</span>), <span class="hljs-number">58435</span>), <span class="hljs-number">-989</span>), <span class="hljs-number">1</span>), <span class="hljs-number">-2055</span>), <span class="hljs-number">2</span>), <span class="hljs-number">1473</span>), <span class="hljs-number">2</span>), <span class="hljs-number">2</span>), <span class="hljs-number">1029</span>), <span class="hljs-number">4</span>), <span class="hljs-number">1786</span>), <span class="hljs-number">2</span>), <span class="hljs-number">385</span>), <span class="hljs-number">36470</span>), <span class="hljs-number">-2102</span>), <span class="hljs-number">3</span>), <span class="hljs-number">1551</span>), <span class="hljs-number">4048</span>), <span class="hljs-number">-4024</span>), <span class="hljs-number">4</span>), <span class="hljs-number">2</span>), <span class="hljs-number">1481</span>), <span class="hljs-number">347</span>), <span class="hljs-number">1</span>), <span class="hljs-number">-95</span>), <span class="hljs-number">3041</span>), <span class="hljs-number">22582</span>), <span class="hljs-number">-894</span>), <span class="hljs-number">3</span>), <span class="hljs-number">4</span>), <span class="hljs-number">1858</span>), <span class="hljs-number">1310</span>), <span class="hljs-number">5151</span>), <span class="hljs-number">4</span>), <span class="hljs-number">3819</span>), <span class="hljs-number">-2540</span>), <span class="hljs-number">3</span>), <span class="hljs-number">2</span>), <span class="hljs-number">5996</span>), <span class="hljs-number">500</span>), <span class="hljs-number">85</span>), <span class="hljs-number">3</span>), <span class="hljs-number">4</span>), <span class="hljs-number">47445</span>), <span class="hljs-number">2</span>), <span class="hljs-number">2</span>), <span class="hljs-number">31521</span>), <span class="hljs-number">3</span>), <span class="hljs-number">3587</span>), <span class="hljs-number">3</span>), <span class="hljs-number">3026</span>), <span class="hljs-number">2</span>), <span class="hljs-number">3</span>), <span class="hljs-number">1</span>), <span class="hljs-number">52848</span>), <span class="hljs-number">2189</span>), <span class="hljs-number">-2227</span>), <span class="hljs-number">4</span>), <span class="hljs-number">3</span>), <span class="hljs-number">-4016</span>), <span class="hljs-number">861</span>), <span class="hljs-number">-852</span>), <span class="hljs-number">3</span>), <span class="hljs-number">4</span>), <span class="hljs-number">2789</span>), <span class="hljs-number">4</span>), <span class="hljs-number">4</span>), <span class="hljs-number">2</span>), <span class="hljs-number">1</span>), <span class="hljs-number">-3959</span>), <span class="hljs-number">3</span>), <span class="hljs-number">3</span>), <span class="hljs-number">3902</span>), <span class="hljs-number">2</span>), <span class="hljs-number">3190</span>), <span class="hljs-number">2</span>), <span class="hljs-number">34242</span>), <span class="hljs-number">1</span>), <span class="hljs-number">1</span>), <span class="hljs-number">43598</span>), <span class="hljs-number">808</span>), <span class="hljs-number">3359</span>), <span class="hljs-number">3</span>), <span class="hljs-number">1</span>), <span class="hljs-number">3</span>), <span class="hljs-number">27918</span>), <span class="hljs-number">1</span>), <span class="hljs-number">2346</span>), <span class="hljs-number">2327</span>), <span class="hljs-number">2272</span>), <span class="hljs-number">4</span>), <span class="hljs-number">-1725</span>), <span class="hljs-number">4</span>), <span class="hljs-number">-3771</span>), <span class="hljs-number">1</span>), <span class="hljs-number">4</span>), <span class="hljs-number">812</span>), <span class="hljs-number">4</span>), <span class="hljs-number">1</span>), <span class="hljs-number">3909</span>), <span class="hljs-number">1</span>), <span class="hljs-number">425</span>), <span class="hljs-number">4</span>), <span class="hljs-number">1680</span>), <span class="hljs-number">62779</span>), <span class="hljs-number">4</span>), <span class="hljs-number">2</span>), <span class="hljs-number">-3592</span>), <span class="hljs-number">4</span>), <span class="hljs-number">3</span>), <span class="hljs-number">3840</span>), <span class="hljs-number">43141</span>), <span class="hljs-number">3825</span>), <span class="hljs-number">2051</span>), <span class="hljs-number">3021</span>), <span class="hljs-number">864</span>), <span class="hljs-number">3</span>), <span class="hljs-number">2</span>), <span class="hljs-number">1</span>), <span class="hljs-number">3</span>), <span class="hljs-number">1578</span>), <span class="hljs-number">-222</span>), <span class="hljs-number">62225</span>), <span class="hljs-number">4</span>), <span class="hljs-number">4</span>), <span class="hljs-number">3</span>), <span class="hljs-number">2247</span>), <span class="hljs-number">1</span>), <span class="hljs-number">4</span>), <span class="hljs-number">1</span>), <span class="hljs-number">28192</span>), <span class="hljs-number">4</span>), <span class="hljs-number">4</span>), <span class="hljs-number">3034</span>), <span class="hljs-number">4560</span>), <span class="hljs-number">792</span>), <span class="hljs-number">3</span>), <span class="hljs-number">-1362</span>), <span class="hljs-number">22378</span>), <span class="hljs-number">49452</span>), <span class="hljs-number">1</span>), <span class="hljs-number">1</span>), <span class="hljs-number">2</span>), <span class="hljs-number">4</span>), <span class="hljs-number">3</span>), <span class="hljs-number">2</span>), <span class="hljs-number">20282</span>), <span class="hljs-number">2</span>), <span class="hljs-number">16828</span>), <span class="hljs-number">4</span>), <span class="hljs-number">3</span>), <span class="hljs-number">-1414</span>), <span class="hljs-number">-1766</span>), <span class="hljs-number">3703</span>), <span class="hljs-number">4</span>), <span class="hljs-number">1</span>), <span class="hljs-number">996</span>), <span class="hljs-number">2</span>), <span class="hljs-number">2</span>), <span class="hljs-number">3</span>), <span class="hljs-number">4</span>), <span class="hljs-number">1</span>), <span class="hljs-number">-1706</span>), <span class="hljs-number">2</span>), <span class="hljs-number">52552</span>), <span class="hljs-number">3</span>), <span class="hljs-number">60561</span>), <span class="hljs-number">4</span>), <span class="hljs-number">-3376</span>), <span class="hljs-number">-2784</span>), <span class="hljs-number">4</span>), <span class="hljs-number">2</span>), <span class="hljs-number">2875</span>), <span class="hljs-number">-2245</span>), <span class="hljs-number">29289</span>), <span class="hljs-number">2</span>), <span class="hljs-number">487</span>), <span class="hljs-number">347</span>), <span class="hljs-number">4</span>), <span class="hljs-number">3513</span>), <span class="hljs-number">4</span>), <span class="hljs-number">1463</span>), <span class="hljs-number">4</span>);<br>        &#125;,<br>        sk = [<span class="hljs-number">-34</span>, <span class="hljs-number">-82</span>, <span class="hljs-number">-80</span>, <span class="hljs-number">79</span>, <span class="hljs-number">-23</span>, <span class="hljs-number">100</span>, <span class="hljs-number">77</span>, <span class="hljs-number">-39</span>, <span class="hljs-number">76</span>, <span class="hljs-number">-45</span>, <span class="hljs-number">89</span>, <span class="hljs-number">93</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-59</span>, <span class="hljs-number">85</span>, <span class="hljs-number">-35</span>, <span class="hljs-number">65</span>, <span class="hljs-number">120</span>, <span class="hljs-number">-89</span>, <span class="hljs-number">110</span>, <span class="hljs-number">83</span>, <span class="hljs-number">-12</span>, <span class="hljs-number">-7</span>, <span class="hljs-number">-42</span>, <span class="hljs-number">63</span>, <span class="hljs-number">52</span>, <span class="hljs-number">120</span>, <span class="hljs-number">-72</span>, <span class="hljs-number">41</span>, <span class="hljs-number">-52</span>, <span class="hljs-number">103</span>, <span class="hljs-number">-16</span>, <span class="hljs-number">-18</span>, <span class="hljs-number">-17</span>, <span class="hljs-number">70</span>, <span class="hljs-number">-76</span>, <span class="hljs-number">-101</span>, <span class="hljs-number">-17</span>, <span class="hljs-number">-114</span>, <span class="hljs-number">-36</span>, <span class="hljs-number">91</span>, <span class="hljs-number">66</span>, <span class="hljs-number">24</span>, <span class="hljs-number">76</span>, <span class="hljs-number">-68</span>, <span class="hljs-number">123</span>, <span class="hljs-number">85</span>, <span class="hljs-number">94</span>, <span class="hljs-number">61</span>, <span class="hljs-number">-28</span>, <span class="hljs-number">46</span>, <span class="hljs-number">-76</span>, <span class="hljs-number">16</span>, <span class="hljs-number">31</span>, <span class="hljs-number">100</span>, <span class="hljs-number">-37</span>, <span class="hljs-number">70</span>, <span class="hljs-number">130</span>, <span class="hljs-number">124</span>, <span class="hljs-number">114</span>, <span class="hljs-number">-12</span>, <span class="hljs-number">-63</span>, <span class="hljs-number">-69</span>, <span class="hljs-number">-106</span>, <span class="hljs-number">-92</span>, <span class="hljs-number">-42</span>, <span class="hljs-number">14</span>, <span class="hljs-number">29</span>, <span class="hljs-number">-68</span>, <span class="hljs-number">72</span>, <span class="hljs-number">127</span>, <span class="hljs-number">-32</span>, <span class="hljs-number">62</span>, <span class="hljs-number">16</span>, <span class="hljs-number">-34</span>, <span class="hljs-number">15</span>, <span class="hljs-number">-48</span>, <span class="hljs-number">-58</span>, <span class="hljs-number">91</span>, <span class="hljs-number">-115</span>, <span class="hljs-number">54</span>, <span class="hljs-number">11</span>, <span class="hljs-number">123</span>, <span class="hljs-number">68</span>, <span class="hljs-number">58</span>, <span class="hljs-number">85</span>, <span class="hljs-number">65</span>, <span class="hljs-number">-41</span>, <span class="hljs-number">44</span>, <span class="hljs-number">-61</span>, <span class="hljs-number">91</span>, <span class="hljs-number">-90</span>, <span class="hljs-number">33</span>, <span class="hljs-number">-98</span>, <span class="hljs-number">48</span>, <span class="hljs-number">60</span>, <span class="hljs-number">73</span>, <span class="hljs-number">106</span>, <span class="hljs-number">-93</span>, <span class="hljs-number">-86</span>, <span class="hljs-number">-7</span>, <span class="hljs-number">61</span>, <span class="hljs-number">88</span>, <span class="hljs-number">-44</span>, <span class="hljs-number">76</span>, <span class="hljs-number">2</span>, <span class="hljs-number">-56</span>, <span class="hljs-number">116</span>, <span class="hljs-number">28</span>, <span class="hljs-number">149</span>, <span class="hljs-number">-6</span>, <span class="hljs-number">110</span>, <span class="hljs-number">110</span>, <span class="hljs-number">142</span>, <span class="hljs-number">-14</span>, <span class="hljs-number">-54</span>, <span class="hljs-number">-108</span>, <span class="hljs-number">122</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-44</span>, <span class="hljs-number">32</span>, <span class="hljs-number">119</span>, <span class="hljs-number">28</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-63</span>, <span class="hljs-number">52</span>, <span class="hljs-number">-63</span>, <span class="hljs-number">-95</span>, <span class="hljs-number">121</span>, <span class="hljs-number">-104</span>, <span class="hljs-number">-32</span>, <span class="hljs-number">-64</span>, <span class="hljs-number">-93</span>, <span class="hljs-number">41</span>, <span class="hljs-number">10</span>, <span class="hljs-number">-34</span>, <span class="hljs-number">77</span>, <span class="hljs-number">-50</span>, <span class="hljs-number">151</span>, <span class="hljs-number">-81</span>, <span class="hljs-number">44</span>, <span class="hljs-number">-76</span>, <span class="hljs-number">-57</span>, <span class="hljs-number">91</span>, <span class="hljs-number">37</span>, <span class="hljs-number">23</span>, <span class="hljs-number">47</span>, <span class="hljs-number">-106</span>, <span class="hljs-number">7</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-16</span>, <span class="hljs-number">-43</span>, <span class="hljs-number">31</span>, <span class="hljs-number">68</span>, <span class="hljs-number">12</span>, <span class="hljs-number">-41</span>, <span class="hljs-number">79</span>, <span class="hljs-number">-11</span>, <span class="hljs-number">-97</span>, <span class="hljs-number">-76</span>, <span class="hljs-number">87</span>, <span class="hljs-number">59</span>, <span class="hljs-number">50</span>, <span class="hljs-number">-55</span>, <span class="hljs-number">3</span>, <span class="hljs-number">114</span>, <span class="hljs-number">-100</span>, <span class="hljs-number">-37</span>, <span class="hljs-number">93</span>, <span class="hljs-number">16</span>, <span class="hljs-number">19</span>, <span class="hljs-number">-62</span>, <span class="hljs-number">108</span>, <span class="hljs-number">101</span>, <span class="hljs-number">16</span>, <span class="hljs-number">106</span>, <span class="hljs-number">106</span>, <span class="hljs-number">69</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-86</span>, <span class="hljs-number">-108</span>, <span class="hljs-number">4</span>, <span class="hljs-number">101</span>, <span class="hljs-number">-32</span>, <span class="hljs-number">59</span>, <span class="hljs-number">127</span>, <span class="hljs-number">-62</span>, <span class="hljs-number">25</span>, <span class="hljs-number">-23</span>, <span class="hljs-number">104</span>, <span class="hljs-number">-96</span>, <span class="hljs-number">93</span>, <span class="hljs-number">-8</span>, <span class="hljs-number">133</span>, <span class="hljs-number">145</span>, <span class="hljs-number">-43</span>, <span class="hljs-number">83</span>, <span class="hljs-number">17</span>, <span class="hljs-number">64</span>, <span class="hljs-number">-39</span>, <span class="hljs-number">43</span>, <span class="hljs-number">2</span>, <span class="hljs-number">-64</span>, <span class="hljs-number">40</span>, <span class="hljs-number">64</span>, <span class="hljs-number">9</span>, <span class="hljs-number">-40</span>, <span class="hljs-number">-17</span>, <span class="hljs-number">107</span>, <span class="hljs-number">-83</span>, <span class="hljs-number">22</span>, <span class="hljs-number">55</span>, <span class="hljs-number">77</span>, <span class="hljs-number">110</span>, <span class="hljs-number">29</span>, <span class="hljs-number">-44</span>, <span class="hljs-number">87</span>, <span class="hljs-number">-16</span>, <span class="hljs-number">55</span>, <span class="hljs-number">-42</span>, <span class="hljs-number">28</span>, <span class="hljs-number">87</span>, <span class="hljs-number">-31</span>, <span class="hljs-number">14</span>, <span class="hljs-number">63</span>, <span class="hljs-number">14</span>, <span class="hljs-number">-39</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">41</span>, <span class="hljs-number">-86</span>, <span class="hljs-number">-83</span>, <span class="hljs-number">-38</span>, <span class="hljs-number">40</span>, <span class="hljs-number">52</span>, <span class="hljs-number">135</span>, <span class="hljs-number">23</span>, <span class="hljs-number">-86</span>, <span class="hljs-number">127</span>, <span class="hljs-number">111</span>, <span class="hljs-number">-107</span>, <span class="hljs-number">112</span>, <span class="hljs-number">85</span>, <span class="hljs-number">122</span>, <span class="hljs-number">145</span>, <span class="hljs-number">118</span>, <span class="hljs-number">132</span>, <span class="hljs-number">-9</span>, <span class="hljs-number">-37</span>, <span class="hljs-number">47</span>, <span class="hljs-number">-106</span>, <span class="hljs-number">92</span>, <span class="hljs-number">-77</span>, <span class="hljs-number">137</span>, <span class="hljs-number">13</span>, <span class="hljs-number">22</span>, <span class="hljs-number">5</span>, <span class="hljs-number">60</span>, <span class="hljs-number">74</span>, <span class="hljs-number">-100</span>, <span class="hljs-number">107</span>, <span class="hljs-number">56</span>, <span class="hljs-number">37</span>, <span class="hljs-number">67</span>, <span class="hljs-number">-31</span>, <span class="hljs-number">94</span>, <span class="hljs-number">-21</span>, <span class="hljs-number">-66</span>, <span class="hljs-number">-14</span>, <span class="hljs-number">-45</span>, <span class="hljs-number">114</span>, <span class="hljs-number">-72</span>, <span class="hljs-number">56</span>, <span class="hljs-number">54</span>, <span class="hljs-number">34</span>, <span class="hljs-number">72</span>, <span class="hljs-number">-44</span>, <span class="hljs-number">118</span>, <span class="hljs-number">131</span>, <span class="hljs-number">-96</span>, <span class="hljs-number">-46</span>, <span class="hljs-number">36</span>, <span class="hljs-number">114</span>, <span class="hljs-number">0</span>, <span class="hljs-number">86</span>, <span class="hljs-number">-45</span>, <span class="hljs-number">113</span>, <span class="hljs-number">138</span>, <span class="hljs-number">20</span>, <span class="hljs-number">93</span>, <span class="hljs-number">25</span>, <span class="hljs-number">-73</span>, <span class="hljs-number">-30</span>, <span class="hljs-number">-26</span>, <span class="hljs-number">-48</span>, <span class="hljs-number">97</span>, <span class="hljs-number">-35</span>, <span class="hljs-number">73</span>, <span class="hljs-number">11</span>, <span class="hljs-number">-55</span>, <span class="hljs-number">-94</span>, <span class="hljs-number">11</span>, <span class="hljs-number">135</span>, <span class="hljs-number">104</span>, <span class="hljs-number">91</span>, <span class="hljs-number">-96</span>, <span class="hljs-number">-84</span>, <span class="hljs-number">137</span>, <span class="hljs-number">142</span>, <span class="hljs-number">-65</span>, <span class="hljs-number">66</span>, <span class="hljs-number">-115</span>, <span class="hljs-number">-35</span>, <span class="hljs-number">40</span>, <span class="hljs-number">-75</span>, <span class="hljs-number">-8</span>, <span class="hljs-number">24</span>, <span class="hljs-number">39</span>, <span class="hljs-number">-39</span>, <span class="hljs-number">69</span>, <span class="hljs-number">40</span>, <span class="hljs-number">29</span>, <span class="hljs-number">25</span>, <span class="hljs-number">32</span>, <span class="hljs-number">-19</span>, <span class="hljs-number">114</span>, <span class="hljs-number">119</span>, <span class="hljs-number">-16</span>, <span class="hljs-number">-43</span>, <span class="hljs-number">52</span>, <span class="hljs-number">85</span>, <span class="hljs-number">112</span>, <span class="hljs-number">50</span>, <span class="hljs-number">52</span>, <span class="hljs-number">87</span>, <span class="hljs-number">106</span>, <span class="hljs-number">17</span>, <span class="hljs-number">96</span>, <span class="hljs-number">64</span>, <span class="hljs-number">-10</span>, <span class="hljs-number">100</span>, <span class="hljs-number">21</span>, <span class="hljs-number">84</span>, <span class="hljs-number">-93</span>, <span class="hljs-number">-35</span>, <span class="hljs-number">85</span>, <span class="hljs-number">8</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-27</span>, <span class="hljs-number">19</span>, <span class="hljs-number">144</span>, <span class="hljs-number">62</span>, <span class="hljs-number">-29</span>, <span class="hljs-number">85</span>, <span class="hljs-number">64</span>, <span class="hljs-number">-39</span>, <span class="hljs-number">-74</span>, <span class="hljs-number">101</span>, <span class="hljs-number">121</span>, <span class="hljs-number">108</span>, <span class="hljs-number">-31</span>, <span class="hljs-number">70</span>, <span class="hljs-number">-73</span>, <span class="hljs-number">109</span>, <span class="hljs-number">111</span>, <span class="hljs-number">111</span>, <span class="hljs-number">109</span>, <span class="hljs-number">63</span>, <span class="hljs-number">35</span>, <span class="hljs-number">105</span>, <span class="hljs-number">29</span>, <span class="hljs-number">-25</span>, <span class="hljs-number">84</span>, <span class="hljs-number">89</span>, <span class="hljs-number">-21</span>, <span class="hljs-number">-20</span>, <span class="hljs-number">-46</span>, <span class="hljs-number">77</span>, <span class="hljs-number">-67</span>, <span class="hljs-number">-23</span>, <span class="hljs-number">35</span>, <span class="hljs-number">-11</span>, <span class="hljs-number">-80</span>, <span class="hljs-number">-82</span>, <span class="hljs-number">-82</span>, <span class="hljs-number">10</span>, <span class="hljs-number">-70</span>, <span class="hljs-number">-108</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-46</span>, <span class="hljs-number">145</span>, <span class="hljs-number">-23</span>, <span class="hljs-number">-33</span>, <span class="hljs-number">73</span>, <span class="hljs-number">-94</span>, <span class="hljs-number">-60</span>, <span class="hljs-number">-25</span>, <span class="hljs-number">118</span>, <span class="hljs-number">-42</span>, <span class="hljs-number">76</span>, <span class="hljs-number">-65</span>, <span class="hljs-number">98</span>, <span class="hljs-number">-17</span>, <span class="hljs-number">93</span>, <span class="hljs-number">98</span>, <span class="hljs-number">40</span>, <span class="hljs-number">130</span>, <span class="hljs-number">114</span>, <span class="hljs-number">-41</span>, <span class="hljs-number">49</span>, <span class="hljs-number">17</span>, <span class="hljs-number">4</span>, <span class="hljs-number">-38</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-58</span>, <span class="hljs-number">-48</span>, <span class="hljs-number">132</span>, <span class="hljs-number">57</span>, <span class="hljs-number">0</span>, <span class="hljs-number">96</span>, <span class="hljs-number">-38</span>, <span class="hljs-number">122</span>, <span class="hljs-number">-89</span>, <span class="hljs-number">51</span>, <span class="hljs-number">-45</span>, <span class="hljs-number">60</span>, <span class="hljs-number">-11</span>, <span class="hljs-number">-63</span>, <span class="hljs-number">-75</span>, <span class="hljs-number">74</span>, <span class="hljs-number">13</span>, <span class="hljs-number">128</span>, <span class="hljs-number">-9</span>, <span class="hljs-number">26</span>, <span class="hljs-number">-34</span>, <span class="hljs-number">-71</span>, <span class="hljs-number">38</span>, <span class="hljs-number">81</span>, <span class="hljs-number">-108</span>, <span class="hljs-number">135</span>, <span class="hljs-number">-46</span>, <span class="hljs-number">60</span>, <span class="hljs-number">63</span>, <span class="hljs-number">-37</span>, <span class="hljs-number">-13</span>, <span class="hljs-number">-43</span>, <span class="hljs-number">-9</span>, <span class="hljs-number">91</span>, <span class="hljs-number">-11</span>, <span class="hljs-number">-74</span>, <span class="hljs-number">83</span>, <span class="hljs-number">47</span>, <span class="hljs-number">36</span>, <span class="hljs-number">104</span>, <span class="hljs-number">-81</span>, <span class="hljs-number">92</span>, <span class="hljs-number">-35</span>, <span class="hljs-number">41</span>, <span class="hljs-number">91</span>, <span class="hljs-number">112</span>, <span class="hljs-number">-104</span>, <span class="hljs-number">-45</span>, <span class="hljs-number">-46</span>, <span class="hljs-number">-106</span>, <span class="hljs-number">-65</span>, <span class="hljs-number">68</span>, <span class="hljs-number">70</span>, <span class="hljs-number">-66</span>, <span class="hljs-number">-79</span>, <span class="hljs-number">-57</span>, <span class="hljs-number">134</span>, <span class="hljs-number">-115</span>, <span class="hljs-number">-43</span>, <span class="hljs-number">41</span>, <span class="hljs-number">-111</span>, <span class="hljs-number">118</span>, <span class="hljs-number">-90</span>, <span class="hljs-number">-56</span>, <span class="hljs-number">-34</span>, <span class="hljs-number">133</span>, <span class="hljs-number">-104</span>, <span class="hljs-number">141</span>, <span class="hljs-number">42</span>, <span class="hljs-number">6</span>, <span class="hljs-number">96</span>, <span class="hljs-number">36</span>, <span class="hljs-number">56</span>, <span class="hljs-number">123</span>, <span class="hljs-number">-31</span>, <span class="hljs-number">77</span>, <span class="hljs-number">80</span>, <span class="hljs-number">37</span>, <span class="hljs-number">8</span>, <span class="hljs-number">59</span>, <span class="hljs-number">-54</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">104</span>, <span class="hljs-number">126</span>, <span class="hljs-number">-12</span>, <span class="hljs-number">113</span>, <span class="hljs-number">-14</span>, <span class="hljs-number">-97</span>, <span class="hljs-number">-107</span>, <span class="hljs-number">-18</span>, <span class="hljs-number">-46</span>, <span class="hljs-number">81</span>, <span class="hljs-number">55</span>, <span class="hljs-number">153</span>, <span class="hljs-number">-84</span>, <span class="hljs-number">19</span>, <span class="hljs-number">100</span>, <span class="hljs-number">-104</span>, <span class="hljs-number">124</span>, <span class="hljs-number">19</span>],<br>        m = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, k, i</span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> (a + k[pc](k[le] % i))<br>        &#125;,<br>        dc = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">var</span> sl = sk[le] - <span class="hljs-number">1</span>,<br>                av = sk[sl],<br>                i = <span class="hljs-number">0</span>,<br>                j = i,<br>                ret = i,<br>                a, b;<br>            <span class="hljs-keyword">while</span> (sl--) &#123;<br>                i = j;<br>                b = m(sk[j++], id, (j &gt; <span class="hljs-number">0</span> &amp;&amp; j % <span class="hljs-number">0x10</span> == <span class="hljs-number">0</span>) ? <span class="hljs-number">0x10</span> : j % <span class="hljs-number">0x10</span>);<br>                <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>                    ret -= (b * (i % <span class="hljs-number">3</span>) - av)<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    ret += (b + <span class="hljs-number">87</span>)<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">return</span> ret | mov(<span class="hljs-number">1</span>)<br>        &#125;;<br>    w[s([<span class="hljs-number">95</span>, <span class="hljs-number">95</span>, <span class="hljs-number">113</span>, <span class="hljs-number">122</span>, <span class="hljs-number">109</span>, <span class="hljs-number">99</span>, <span class="hljs-number">102</span>])] = dc<br>&#125;)(<span class="hljs-built_in">window</span>);<br></code></pre></td></tr></table></figure>

<p><img src="WX20200610-160618.png" srcset="/img/loading.gif" alt=""></p>
<p>现在已经确定这就是加密的代码块了，扣下来在webstorm中执行老样子缺什么补什么，最后发现了这样一个错误</p>
<p><img src="WX20200610-160918@2x.png" srcset="/img/loading.gif" alt=""></p>
<p>提示我们 <strong><em>cookie</em></strong> 没有定义，在控制台看下</p>
<p><img src="WX20200610-161200.png" srcset="/img/loading.gif" alt=""></p>
<p>再结合代码得知这里是将 <strong><em>qznewsite.uid</em></strong> 做了处理</p>
<p>所以我们在js中增加如下定义，再执行代码就发现成功了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-built_in">window</span> = &#123;<span class="hljs-attr">document</span>: &#123;<span class="hljs-attr">cookie</span>: <span class="hljs-string">"qznewsite.uid=nzaxo1a4zrhqc34sn214bbyz"</span>&#125;&#125;<br></code></pre></td></tr></table></figure>

<h3 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h3><p>前面已经修改好了js代码，然后使用python调用并请求后发现会跳到登陆页，这是因为该js是动态返回的，对比下两次得到的js</p>
<p><img src="WX20200610-161952.png" srcset="/img/loading.gif" alt=""></p>
<p>所以就需要动态获取了，上代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> execjs<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> quote<br><br>headers = &#123;&#125;<br>headers[<span class="hljs-string">"User-Agent"</span>] = <span class="hljs-string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36"</span><br>headers[<span class="hljs-string">"Referer"</span>] = <span class="hljs-string">"https://www.qichamao.com/"</span><br><br>js_url = <span class="hljs-string">f"https://www.qichamao.com/home/GetJsVerfyCode?t=<span class="hljs-subst">&#123;random.random()&#125;</span>&amp;_=<span class="hljs-subst">&#123;int(time.time())&#125;</span>"</span><br><br>js_result = requests.get(js_url, verify=<span class="hljs-literal">False</span>, proxies=proxies, headers=headers)<br><br><span class="hljs-comment"># 获取</span><br>uid = js_result.headers.get(<span class="hljs-string">"Set-Cookie"</span>, <span class="hljs-string">""</span>).split(<span class="hljs-string">";"</span>)[<span class="hljs-number">0</span>]<br><span class="hljs-comment"># 设置uid</span><br>cookies = uid<br><br><span class="hljs-comment"># 更新cookie</span><br>headers[<span class="hljs-string">"Cookie"</span>] = cookies<br><br>js_code = js_result.text<br><br><span class="hljs-comment"># 构建可执行的 js</span><br>_js_code = <span class="hljs-string">'var window = &#123;document: &#123;cookie: "%s"&#125;&#125;;!'</span> %cookies + js_code<br><br>ctx = execjs.compile(_js_code)<br>mfccode = ctx.eval(<span class="hljs-string">"window.__qzmcf()"</span>)<br><br>url = <span class="hljs-string">f'https://www.qichamao.com/search/all/<span class="hljs-subst">&#123;quote(<span class="hljs-string">"小米"</span>)&#125;</span>?mfccode=<span class="hljs-subst">&#123;mfccode&#125;</span>'</span><br><br>result = requests.get(url, headers=headers, proxies=proxies, verify=<span class="hljs-literal">False</span>)<br>print(result.text)<br></code></pre></td></tr></table></figure>

<p><img src="WX20200610-162446@2x.png" srcset="/img/loading.gif" alt=""></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>一个很好的使用动态js调试案例，没什么难度，之前没接触过这类情况，需要耐心。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>JS逆向</category>
      </categories>
      <tags>
        <tag>JS逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>JS逆向学习-某汽车交易网站数据抓取</title>
    <url>/2020/06/10/article-13/</url>
    <content><![CDATA[<p>某汽车交易网站数据抓取</p>
<a id="more"></a>

<p>aHR0cHM6Ly93d3cuZ3VhemkuY29tLw==</p>
<h3 id="分析请求"><a href="#分析请求" class="headerlink" title="分析请求"></a>分析请求</h3><p>打开首页，查看获取 <strong><em>热卖车型</em></strong> 的请求</p>
<p><img src="WX20200610-183244.png" srcset="/img/loading.gif" alt=""></p>
<p>发现就是一个很简单的 <strong><em>get</em></strong> 请求，也没有什么加密参数，但是当直接访问时就发现并没有返回想要的结果，而是跳转到了首页，说明需要对header做分析了，调了一圈发现是 <strong><em>antipas</em></strong> 这个cookie 的问题</p>
<p><img src="WX20200610-183845.png" srcset="/img/loading.gif" alt=""></p>
<p>全局搜索后也没有发现设置的请求，那就从第一个请求找起，结果发现从第二个请求就开始有这个cookie了，但是第一个203请求在chrome中看不到响应内容，所以使用fiddler抓包分析，果然看到了内容</p>
<p><img src="WX20200610-184701.png" srcset="/img/loading.gif" alt=""></p>
<p>发现这是一段eval执行的js代码，在浏览器新建一个窗口，把粘贴到控制台</p>
<p><img src="WX20200610-185028.png" srcset="/img/loading.gif" alt=""></p>
<p>发现 <strong><em>value</em></strong> 就是我们要找的结果，是通过 <strong><em>anti</em></strong> 这个函数调用返回的，看下这个函数</p>
<p><img src="WX20200610-185202.png" srcset="/img/loading.gif" alt=""></p>
<p>好了，把还原后的代码在本地执行，缺什么补什么，最后结果是这样的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">window</span> = &#123;<span class="hljs-attr">location</span>: &#123;&#125;&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">safeAdd</span>(<span class="hljs-params">x, y</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> lsw = (x &amp; <span class="hljs-number">0xFFFF</span>) + (y &amp; <span class="hljs-number">0xFFFF</span>);<br>    <span class="hljs-keyword">var</span> msw = (x &gt;&gt; <span class="hljs-number">16</span>) + (y &gt;&gt; <span class="hljs-number">16</span>) + (lsw &gt;&gt; <span class="hljs-number">16</span>);<br>    <span class="hljs-keyword">return</span> (msw &lt;&lt; <span class="hljs-number">16</span>) | (lsw &amp; <span class="hljs-number">0xFFFF</span>)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bitRotateLeft</span>(<span class="hljs-params">num, cnt</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> (num &lt;&lt; cnt) | (num &gt;&gt;&gt; (<span class="hljs-number">32</span> - cnt))<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cmn</span>(<span class="hljs-params">q, a, b, x, s, t</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ff</span>(<span class="hljs-params">a, b, c, d, x, s, t</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> cmn((b &amp; c) | ((~b) &amp; d), a, b, x, s, t)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">gg</span>(<span class="hljs-params">a, b, c, d, x, s, t</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> cmn((b &amp; d) | (c &amp; (~d)), a, b, x, s, t)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hh</span>(<span class="hljs-params">a, b, c, d, x, s, t</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> cmn(b ^ c ^ d, a, b, x, s, t)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ii</span>(<span class="hljs-params">a, b, c, d, x, s, t</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> cmn(c ^ (b | (~d)), a, b, x, s, t)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">binl</span>(<span class="hljs-params">x, len</span>) </span>&#123;<br>    x[len &gt;&gt; <span class="hljs-number">5</span>] |= <span class="hljs-number">0x80</span> &lt;&lt; (len % <span class="hljs-number">32</span>);<br>    x[(((len + <span class="hljs-number">64</span>) &gt;&gt;&gt; <span class="hljs-number">9</span>) &lt;&lt; <span class="hljs-number">4</span>) + <span class="hljs-number">14</span>] = len;<br>    <span class="hljs-keyword">var</span> i;<br>    <span class="hljs-keyword">var</span> olda;<br>    <span class="hljs-keyword">var</span> oldb;<br>    <span class="hljs-keyword">var</span> oldc;<br>    <span class="hljs-keyword">var</span> oldd;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">1732584193</span>;<br>    <span class="hljs-keyword">var</span> b = <span class="hljs-number">-271733879</span>;<br>    <span class="hljs-keyword">var</span> c = <span class="hljs-number">-1732584194</span>;<br>    <span class="hljs-keyword">var</span> d = <span class="hljs-number">271733878</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; x.length; i += <span class="hljs-number">16</span>) &#123;<br>        olda = a;<br>        oldb = b;<br>        oldc = c;<br>        oldd = d;<br>        a = ff(a, b, c, d, x[i], <span class="hljs-number">7</span>, <span class="hljs-number">-680876936</span>);<br>        d = ff(d, a, b, c, x[i + <span class="hljs-number">1</span>], <span class="hljs-number">12</span>, <span class="hljs-number">-389564586</span>);<br>        c = ff(c, d, a, b, x[i + <span class="hljs-number">2</span>], <span class="hljs-number">17</span>, <span class="hljs-number">606105819</span>);<br>        b = ff(b, c, d, a, x[i + <span class="hljs-number">3</span>], <span class="hljs-number">22</span>, <span class="hljs-number">-1044525330</span>);<br>        a = ff(a, b, c, d, x[i + <span class="hljs-number">4</span>], <span class="hljs-number">7</span>, <span class="hljs-number">-176418897</span>);<br>        d = ff(d, a, b, c, x[i + <span class="hljs-number">5</span>], <span class="hljs-number">12</span>, <span class="hljs-number">1200080426</span>);<br>        c = ff(c, d, a, b, x[i + <span class="hljs-number">6</span>], <span class="hljs-number">17</span>, <span class="hljs-number">-1473231341</span>);<br>        b = ff(b, c, d, a, x[i + <span class="hljs-number">7</span>], <span class="hljs-number">22</span>, <span class="hljs-number">-45705983</span>);<br>        a = ff(a, b, c, d, x[i + <span class="hljs-number">8</span>], <span class="hljs-number">7</span>, <span class="hljs-number">1770035416</span>);<br>        d = ff(d, a, b, c, x[i + <span class="hljs-number">9</span>], <span class="hljs-number">12</span>, <span class="hljs-number">-1958414417</span>);<br>        c = ff(c, d, a, b, x[i + <span class="hljs-number">10</span>], <span class="hljs-number">17</span>, <span class="hljs-number">-42063</span>);<br>        b = ff(b, c, d, a, x[i + <span class="hljs-number">11</span>], <span class="hljs-number">22</span>, <span class="hljs-number">-1990404162</span>);<br>        a = ff(a, b, c, d, x[i + <span class="hljs-number">12</span>], <span class="hljs-number">7</span>, <span class="hljs-number">1804603682</span>);<br>        d = ff(d, a, b, c, x[i + <span class="hljs-number">13</span>], <span class="hljs-number">12</span>, <span class="hljs-number">-40341101</span>);<br>        c = ff(c, d, a, b, x[i + <span class="hljs-number">14</span>], <span class="hljs-number">17</span>, <span class="hljs-number">-1502002290</span>);<br>        b = ff(b, c, d, a, x[i + <span class="hljs-number">15</span>], <span class="hljs-number">22</span>, <span class="hljs-number">1236535329</span>);<br>        a = gg(a, b, c, d, x[i + <span class="hljs-number">1</span>], <span class="hljs-number">5</span>, <span class="hljs-number">-165796510</span>);<br>        d = gg(d, a, b, c, x[i + <span class="hljs-number">6</span>], <span class="hljs-number">9</span>, <span class="hljs-number">-1069501632</span>);<br>        c = gg(c, d, a, b, x[i + <span class="hljs-number">11</span>], <span class="hljs-number">14</span>, <span class="hljs-number">643717713</span>);<br>        b = gg(b, c, d, a, x[i], <span class="hljs-number">20</span>, <span class="hljs-number">-373897302</span>);<br>        a = gg(a, b, c, d, x[i + <span class="hljs-number">5</span>], <span class="hljs-number">5</span>, <span class="hljs-number">-701558691</span>);<br>        d = gg(d, a, b, c, x[i + <span class="hljs-number">10</span>], <span class="hljs-number">9</span>, <span class="hljs-number">38016083</span>);<br>        c = gg(c, d, a, b, x[i + <span class="hljs-number">15</span>], <span class="hljs-number">14</span>, <span class="hljs-number">-660478335</span>);<br>        b = gg(b, c, d, a, x[i + <span class="hljs-number">4</span>], <span class="hljs-number">20</span>, <span class="hljs-number">-405537848</span>);<br>        a = gg(a, b, c, d, x[i + <span class="hljs-number">9</span>], <span class="hljs-number">5</span>, <span class="hljs-number">568446438</span>);<br>        d = gg(d, a, b, c, x[i + <span class="hljs-number">14</span>], <span class="hljs-number">9</span>, <span class="hljs-number">-1019803690</span>);<br>        c = gg(c, d, a, b, x[i + <span class="hljs-number">3</span>], <span class="hljs-number">14</span>, <span class="hljs-number">-187363961</span>);<br>        b = gg(b, c, d, a, x[i + <span class="hljs-number">8</span>], <span class="hljs-number">20</span>, <span class="hljs-number">1163531501</span>);<br>        a = gg(a, b, c, d, x[i + <span class="hljs-number">13</span>], <span class="hljs-number">5</span>, <span class="hljs-number">-1444681467</span>);<br>        d = gg(d, a, b, c, x[i + <span class="hljs-number">2</span>], <span class="hljs-number">9</span>, <span class="hljs-number">-51403784</span>);<br>        c = gg(c, d, a, b, x[i + <span class="hljs-number">7</span>], <span class="hljs-number">14</span>, <span class="hljs-number">1735328473</span>);<br>        b = gg(b, c, d, a, x[i + <span class="hljs-number">12</span>], <span class="hljs-number">20</span>, <span class="hljs-number">-1926607734</span>);<br>        a = hh(a, b, c, d, x[i + <span class="hljs-number">5</span>], <span class="hljs-number">4</span>, <span class="hljs-number">-378558</span>);<br>        d = hh(d, a, b, c, x[i + <span class="hljs-number">8</span>], <span class="hljs-number">11</span>, <span class="hljs-number">-2022574463</span>);<br>        c = hh(c, d, a, b, x[i + <span class="hljs-number">11</span>], <span class="hljs-number">16</span>, <span class="hljs-number">1839030562</span>);<br>        b = hh(b, c, d, a, x[i + <span class="hljs-number">14</span>], <span class="hljs-number">23</span>, <span class="hljs-number">-35309556</span>);<br>        a = hh(a, b, c, d, x[i + <span class="hljs-number">1</span>], <span class="hljs-number">4</span>, <span class="hljs-number">-1530992060</span>);<br>        d = hh(d, a, b, c, x[i + <span class="hljs-number">4</span>], <span class="hljs-number">11</span>, <span class="hljs-number">1272893353</span>);<br>        c = hh(c, d, a, b, x[i + <span class="hljs-number">7</span>], <span class="hljs-number">16</span>, <span class="hljs-number">-155497632</span>);<br>        b = hh(b, c, d, a, x[i + <span class="hljs-number">10</span>], <span class="hljs-number">23</span>, <span class="hljs-number">-1094730640</span>);<br>        a = hh(a, b, c, d, x[i + <span class="hljs-number">13</span>], <span class="hljs-number">4</span>, <span class="hljs-number">681279174</span>);<br>        d = hh(d, a, b, c, x[i], <span class="hljs-number">11</span>, <span class="hljs-number">-358537222</span>);<br>        c = hh(c, d, a, b, x[i + <span class="hljs-number">3</span>], <span class="hljs-number">16</span>, <span class="hljs-number">-722521979</span>);<br>        b = hh(b, c, d, a, x[i + <span class="hljs-number">6</span>], <span class="hljs-number">23</span>, <span class="hljs-number">76029189</span>);<br>        a = hh(a, b, c, d, x[i + <span class="hljs-number">9</span>], <span class="hljs-number">4</span>, <span class="hljs-number">-640364487</span>);<br>        d = hh(d, a, b, c, x[i + <span class="hljs-number">12</span>], <span class="hljs-number">11</span>, <span class="hljs-number">-421815835</span>);<br>        c = hh(c, d, a, b, x[i + <span class="hljs-number">15</span>], <span class="hljs-number">16</span>, <span class="hljs-number">530742520</span>);<br>        b = hh(b, c, d, a, x[i + <span class="hljs-number">2</span>], <span class="hljs-number">23</span>, <span class="hljs-number">-995338651</span>);<br>        a = ii(a, b, c, d, x[i], <span class="hljs-number">6</span>, <span class="hljs-number">-198630844</span>);<br>        d = ii(d, a, b, c, x[i + <span class="hljs-number">7</span>], <span class="hljs-number">10</span>, <span class="hljs-number">1126891415</span>);<br>        c = ii(c, d, a, b, x[i + <span class="hljs-number">14</span>], <span class="hljs-number">15</span>, <span class="hljs-number">-1416354905</span>);<br>        b = ii(b, c, d, a, x[i + <span class="hljs-number">5</span>], <span class="hljs-number">21</span>, <span class="hljs-number">-57434055</span>);<br>        a = ii(a, b, c, d, x[i + <span class="hljs-number">12</span>], <span class="hljs-number">6</span>, <span class="hljs-number">1700485571</span>);<br>        d = ii(d, a, b, c, x[i + <span class="hljs-number">3</span>], <span class="hljs-number">10</span>, <span class="hljs-number">-1894986606</span>);<br>        c = ii(c, d, a, b, x[i + <span class="hljs-number">10</span>], <span class="hljs-number">15</span>, <span class="hljs-number">-1051523</span>);<br>        b = ii(b, c, d, a, x[i + <span class="hljs-number">1</span>], <span class="hljs-number">21</span>, <span class="hljs-number">-2054922799</span>);<br>        a = ii(a, b, c, d, x[i + <span class="hljs-number">8</span>], <span class="hljs-number">6</span>, <span class="hljs-number">1873313359</span>);<br>        d = ii(d, a, b, c, x[i + <span class="hljs-number">15</span>], <span class="hljs-number">10</span>, <span class="hljs-number">-30611744</span>);<br>        c = ii(c, d, a, b, x[i + <span class="hljs-number">6</span>], <span class="hljs-number">15</span>, <span class="hljs-number">-1560198380</span>);<br>        b = ii(b, c, d, a, x[i + <span class="hljs-number">13</span>], <span class="hljs-number">21</span>, <span class="hljs-number">1309151649</span>);<br>        a = ii(a, b, c, d, x[i + <span class="hljs-number">4</span>], <span class="hljs-number">6</span>, <span class="hljs-number">-145523070</span>);<br>        d = ii(d, a, b, c, x[i + <span class="hljs-number">11</span>], <span class="hljs-number">10</span>, <span class="hljs-number">-1120210379</span>);<br>        c = ii(c, d, a, b, x[i + <span class="hljs-number">2</span>], <span class="hljs-number">15</span>, <span class="hljs-number">718787259</span>);<br>        b = ii(b, c, d, a, x[i + <span class="hljs-number">9</span>], <span class="hljs-number">21</span>, <span class="hljs-number">-343485551</span>);<br>        a = safeAdd(a, olda);<br>        b = safeAdd(b, oldb);<br>        c = safeAdd(c, oldc);<br>        d = safeAdd(d, oldd)<br>    &#125;<br>    <span class="hljs-keyword">return</span> [a, b, c, d]<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">binl2rstr</span>(<span class="hljs-params">input</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> i;<br>    <span class="hljs-keyword">var</span> output = <span class="hljs-string">''</span>;<br>    <span class="hljs-keyword">var</span> length32 = input.length * <span class="hljs-number">32</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; length32; i += <span class="hljs-number">8</span>) &#123;<br>        output += <span class="hljs-built_in">String</span>.fromCharCode((input[i &gt;&gt; <span class="hljs-number">5</span>] &gt;&gt;&gt; (i % <span class="hljs-number">32</span>)) &amp; <span class="hljs-number">0xFF</span>)<br>    &#125;<br>    <span class="hljs-keyword">return</span> output<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rstr2binl</span>(<span class="hljs-params">input</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> i;<br>    <span class="hljs-keyword">var</span> output = [];<br>    output[(input.length &gt;&gt; <span class="hljs-number">2</span>) - <span class="hljs-number">1</span>] = <span class="hljs-literal">undefined</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; output.length; i += <span class="hljs-number">1</span>) &#123;<br>        output[i] = <span class="hljs-number">0</span><br>    &#125;<br>    <span class="hljs-keyword">var</span> length8 = input.length * <span class="hljs-number">8</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; length8; i += <span class="hljs-number">8</span>) &#123;<br>        output[i &gt;&gt; <span class="hljs-number">5</span>] |= (input.charCodeAt(i / <span class="hljs-number">8</span>) &amp; <span class="hljs-number">0xFF</span>) &lt;&lt; (i % <span class="hljs-number">32</span>)<br>    &#125;<br>    <span class="hljs-keyword">return</span> output<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rstr</span>(<span class="hljs-params">s</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> binl2rstr(binl(rstr2binl(s), s.length * <span class="hljs-number">8</span>))<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rstrHMAC</span>(<span class="hljs-params">key, data</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> i;<br>    <span class="hljs-keyword">var</span> bkey = rstr2binl(key);<br>    <span class="hljs-keyword">var</span> ipad = [];<br>    <span class="hljs-keyword">var</span> opad = [];<br>    <span class="hljs-keyword">var</span> hash;<br>    ipad[<span class="hljs-number">15</span>] = opad[<span class="hljs-number">15</span>] = <span class="hljs-literal">undefined</span>;<br>    <span class="hljs-keyword">if</span> (bkey.length &gt; <span class="hljs-number">16</span>) &#123;<br>        bkey = binl(bkey, key.length * <span class="hljs-number">8</span>)<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; i += <span class="hljs-number">1</span>) &#123;<br>        ipad[i] = bkey[i] ^ <span class="hljs-number">0x36363636</span>;<br>        opad[i] = bkey[i] ^ <span class="hljs-number">0x5C5C5C5C</span><br>    &#125;<br>    hash = binl(ipad.concat(rstr2binl(data)), <span class="hljs-number">512</span> + data.length * <span class="hljs-number">8</span>);<br>    <span class="hljs-keyword">return</span> binl2rstr(binl(opad.concat(hash), <span class="hljs-number">512</span> + <span class="hljs-number">128</span>))<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rstr2hex</span>(<span class="hljs-params">input</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> hexTab = <span class="hljs-string">'0123456789abcdef'</span>;<br>    <span class="hljs-keyword">var</span> output = <span class="hljs-string">''</span>;<br>    <span class="hljs-keyword">var</span> x;<br>    <span class="hljs-keyword">var</span> i;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; input.length; i += <span class="hljs-number">1</span>) &#123;<br>        x = input.charCodeAt(i);<br>        output += hexTab.charAt((x &gt;&gt;&gt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0x0F</span>) + hexTab.charAt(x &amp; <span class="hljs-number">0x0F</span>)<br>    &#125;<br>    <span class="hljs-keyword">return</span> output<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">str2rstrUTF8</span>(<span class="hljs-params">input</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">unescape</span>(<span class="hljs-built_in">encodeURIComponent</span>(input))<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">raw</span>(<span class="hljs-params">s</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> rstr(str2rstrUTF8(s))<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hex</span>(<span class="hljs-params">s</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> rstr2hex(raw(s))<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">uid</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> text = <span class="hljs-string">""</span>;<br>    <span class="hljs-keyword">var</span> possible = <span class="hljs-string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"</span>;<br>    <span class="hljs-keyword">var</span> len = <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>        text += possible.charAt(<span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * possible.length))<br>    &#125;<br>    <span class="hljs-keyword">return</span> text<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">charRun</span>(<span class="hljs-params">s</span>) </span>&#123;<br>    s = s.replace(<span class="hljs-regexp">/[a-zA-Z]/g</span>, <span class="hljs-string">'#'</span>);<br>    <span class="hljs-keyword">var</span> arr = s.split(<span class="hljs-string">''</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (arr[i] == <span class="hljs-string">'#'</span>) &#123;<br>            arr[i] = uid()<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr.join(<span class="hljs-string">''</span>)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">anti</span>(<span class="hljs-params">string, key</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> estring = hex(string);<br>    <span class="hljs-keyword">return</span> charRun(estring)<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">xredirect</span>(<span class="hljs-params">name, value, url</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br>    date.setTime(date.getTime() + <span class="hljs-number">2592000000</span>);<br>    <span class="hljs-keyword">var</span> expires = <span class="hljs-string">"; expires="</span> + date.toUTCString();<br>    <span class="hljs-built_in">document</span>.cookie = name + <span class="hljs-string">"="</span> + value + expires + <span class="hljs-string">"; path=/"</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">document</span>.cookie.indexOf(name) === <span class="hljs-number">-1</span> &amp;&amp; navigator.cookieEnabled) &#123;<br>        alert(<span class="hljs-string">'请修改浏览器设置,允许cookie缓存'</span>)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (url == <span class="hljs-string">''</span>) &#123;<br>            <span class="hljs-keyword">var</span> url = location.href;<br>            <span class="hljs-keyword">if</span> (location.protocol != <span class="hljs-string">'https:'</span>) &#123;<br>                url = <span class="hljs-string">'https:'</span> + <span class="hljs-built_in">window</span>.location.href.substring(<span class="hljs-built_in">window</span>.location.protocol.length)<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (location.protocol != <span class="hljs-string">'https:'</span>) &#123;<br>                url = <span class="hljs-string">'https:'</span> + url<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">var</span> ulen = url.indexOf(<span class="hljs-string">'#'</span>);<br>        <span class="hljs-keyword">if</span> (ulen !== <span class="hljs-number">-1</span>) &#123;<br>            url = url.substring(<span class="hljs-number">0</span>, ulen)<br>        &#125;<br>        location.replace(url)<br>    &#125;<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(anti(<span class="hljs-string">'1AFJO04hvED0DuQk0vfc9VPPITrFcbOJ7EOP9opjc4k='</span>, <span class="hljs-string">'691898463814653675'</span>))<br></code></pre></td></tr></table></figure>

<p>至此，<strong><em>antipas</em></strong> 的值我们就获取到了</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>没什么难度，就是要对eval还原，另外chrome看不到响应时就试着用其他抓包工具或者接口测试工具调试下</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>JS逆向</category>
      </categories>
      <tags>
        <tag>JS逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>JS逆向学习-某游戏网站登陆</title>
    <url>/2020/06/11/article-14/</url>
    <content><![CDATA[<p>某游戏网站登陆参数逆向</p>
<a id="more"></a>

<p>aHR0cDovLzk5NzE4aC5jb20vY24vcmVnaXN0ZXI=</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><img src="WX20200611-181630.png" srcset="/img/loading.gif" alt=""></p>
<p>登陆时对密码进行了加密处理，打一个xhr断点，定位到了这里</p>
<p><img src="WX20200611-181835.png" srcset="/img/loading.gif" alt=""></p>
<p>跟进 <strong><em>cryptStr</em></strong> 这个函数查看</p>
<p><img src="WX20200611-182047.png" srcset="/img/loading.gif" alt=""></p>
<p>这里的处理是在DOM中增加了一个button，触发click后再将其删掉，通过事件监听发现了加密代码</p>
<p><img src="WX20200611-182300.png" srcset="/img/loading.gif" alt=""></p>
<p><img src="WX20200611-182430.png" srcset="/img/loading.gif" alt=""></p>
<p><img src="WX20200611-182544.png" srcset="/img/loading.gif" alt=""></p>
<p>到这里就已经明确加密流程了，最外层是一个 <strong><em>AES</em></strong> 加密模式使用 <strong><em>ECB</em></strong> ，加密的 <strong><em>key</em></strong> 是 <strong><em>cookie</em></strong> 中的 <strong><em>web</em></strong> 和 <strong><em>randomYes</em></strong> 字符串拼接后使用 <strong><em>sdc</em></strong> 函数处理后的结果，经分析其实就是个 <strong><em>MD5</em></strong> 操作，最后将 <strong><em>AES</em></strong> 和结果和 <strong><em>randomYes</em></strong> 拼接返回。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>yysy很简单，值得注意的点是dom的事件监听。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>JS逆向</category>
      </categories>
      <tags>
        <tag>JS逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>AST学习资料收集</title>
    <url>/2020/06/16/article-15/</url>
    <content><![CDATA[<p>本系列为AST个人学习笔记，完整知识内容请关注知识星球 <a href="https://wx.zsxq.com/" target="_blank" rel="noopener">AST入门与实战</a> 和公众号 <a href="">菜鸟学Python编程</a></p>
<a id="more"></a>

<p>1、AST在线解析网站</p>
<p><a href="https://astexplorer.net/" target="_blank" rel="noopener">原版</a>  <a href="https://blogz.gitee.io/ast/" target="_blank" rel="noopener">国内镜像</a></p>
<p>2、babel库官方文档</p>
<p><a href="https://babeljs.io/docs/en/" target="_blank" rel="noopener">官方学习文档</a></p>
<p>3、babel库 github地址</p>
<p><a href="https://github.com/babel/babel" target="_blank" rel="noopener">babel</a></p>
<p>4、babel库插件开发手册</p>
<p><a href="https://blog.csdn.net/weixin_33826609/article/details/93164633#toc-visitors" target="_blank" rel="noopener">插件手册</a></p>
<p>5、JavaScript在线学习网站</p>
<p><a href="https://wangdoc.com/javascript/index.html" target="_blank" rel="noopener">入门</a></p>
<p><a href="https://es6.ruanyifeng.com/" target="_blank" rel="noopener">es6教程</a></p>
<p><strong>JavaScript高级程序设计（第3版）</strong></p>
<p>6、查看JavaStript代码流程</p>
<p><a href="https://bogdan-lyashenko.github.io/js-code-to-svg-flowchart/docs/live-editor/index.html" target="_blank" rel="noopener">代码流程</a></p>
<p><a href="https://github.com/Bogdan-Lyashenko/js-code-to-svg-flowchart" target="_blank" rel="noopener">Github地址</a></p>
<p>7、AST入门网站</p>
<p><a href="https://github.com/yacan8/blog/blob/master/posts/JavaScript抽象语法树AST.md" target="_blank" rel="noopener">JavaScript抽象语法树AST</a></p>
<p>8、其他的干货文章</p>
<p><a href="https://github.com/babel/babylon/blob/master/ast/spec.md" target="_blank" rel="noopener"><strong>AS各个节点解释</strong></a></p>
<p><a href="http://www.alloyteam.com/2017/04/analysis-of-babel-babel-overview/" target="_blank" rel="noopener"><strong>简单剖析babel</strong></a></p>
<p><a href="https://fed.taobao.org/blog/taofed/do71ct/babel-plugins/" target="_blank" rel="noopener"><strong>淘系前端团队写的babel库相关</strong></a></p>
<p><a href="http://www.alloyteam.com/2016/05/babel-code-into-a-bird-like/" target="_blank" rel="noopener"><strong>babel到底将代码转换成了什么鸟样</strong></a></p>
<p>9、将代码转换成图片的网站</p>
<p><a href="https://carbon.now.sh/" target="_blank" rel="noopener">漂亮代码图片在线生成</a></p>
<p>10、查看AST结构图</p>
<p><a href="https://resources.jointjs.com/demos/rappid/apps/Ast/index.html" target="_blank" rel="noopener">AST结构图</a></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>AST</category>
      </categories>
      <tags>
        <tag>AST</tag>
        <tag>资料</tag>
      </tags>
  </entry>
  <entry>
    <title>AST学习-认识AST结构</title>
    <url>/2020/06/16/article-16/</url>
    <content><![CDATA[<p>环境：Mac  Node.js  babel</p>
<p>认识AST结构</p>
<a id="more"></a>

<h2 id="AST基本结构"><a href="#AST基本结构" class="headerlink" title="AST基本结构"></a>AST基本结构</h2><h3 id="变量声明-VariableDeclaration"><a href="#变量声明-VariableDeclaration" class="headerlink" title="变量声明 VariableDeclaration"></a>变量声明 VariableDeclaration</h3><p><img src="WX20200616-172515.png" srcset="/img/loading.gif" alt=""></p>
<h4 id="declarations-基本说明"><a href="#declarations-基本说明" class="headerlink" title="declarations 基本说明"></a>declarations 基本说明</h4><p>type 表示节点类型，变量声明就是：VariableDeclaration</p>
<p>start end 表示节点的起始位置</p>
<p>kind 变量声明关键字 分为 var let const</p>
<p><strong><em>declarations</em></strong> 需要重点看下</p>
<p><img src="WX20200616-173414.png" srcset="/img/loading.gif" alt=""></p>
<p>declarations 是一个数组结构，里边存放了变量的声明信息，声明了几个变量，就有几个 <strong><em>VariableDeclarator</em></strong>，注意只要声明了就会有这个节点，不管是否赋值</p>
<p><img src="WX20200616-173817.png" srcset="/img/loading.gif" alt=""></p>
<h4 id="VariableDeclarator-说明"><a href="#VariableDeclarator-说明" class="headerlink" title="VariableDeclarator 说明"></a>VariableDeclarator 说明</h4><p><img src="WX20200616-175248.png" srcset="/img/loading.gif" alt=""></p>
<p>除了前面提到过的节点，还出现了两个新节点 <strong><em>id</em></strong> <strong><em>init</em></strong> </p>
<p><strong><em>id</em></strong> : 对变量名的描述，包含类型、位置和名称</p>
<p><strong><em>init</em></strong> : 表示变量初始化的情况，包含类型、位置和value</p>
<h3 id="其他类型表示"><a href="#其他类型表示" class="headerlink" title="其他类型表示"></a>其他类型表示</h3><p>1+2，b+c 这种是 BinaryExpression<br>函数为 FunctionExpression<br>对象 ObjectExpression<br>new Object() 为 NewExpression<br>[] 数组为 ArrayExpression<br>Math.sin() 为 CallExpression</p>
<h3 id="使用babel库操作AST"><a href="#使用babel库操作AST" class="headerlink" title="使用babel库操作AST"></a>使用babel库操作AST</h3><h4 id="打印整个AST"><a href="#打印整个AST" class="headerlink" title="打印整个AST"></a>打印整个AST</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 下面的导入不一定会全用，但是要知道</span><br><span class="hljs-comment">// 将 JS 源码转换成语法树的函数</span><br><span class="hljs-keyword">const</span> parser = <span class="hljs-built_in">require</span>(<span class="hljs-string">"@babel/parser"</span>)<br><span class="hljs-comment">// 遍历 AST 的函数</span><br><span class="hljs-keyword">const</span> traverse = <span class="hljs-built_in">require</span>(<span class="hljs-string">"@babel/traverse"</span>).default<br><span class="hljs-comment">// 操作节点的函数</span><br><span class="hljs-keyword">const</span> t = <span class="hljs-built_in">require</span>(<span class="hljs-string">"@babel/types"</span>)<br><span class="hljs-comment">// 将语法书转换成源代码的函数</span><br><span class="hljs-keyword">const</span> generator = <span class="hljs-built_in">require</span>(<span class="hljs-string">"@babel/generator"</span>).default<br><span class="hljs-comment">// 操作文件的函数</span><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">"fs"</span>)<br><br><span class="hljs-keyword">var</span> jscode = <span class="hljs-string">"var a = 123;"</span>;<br><span class="hljs-keyword">let</span> ast = parser.parse(jscode);<br><br>fs.writeFile(<span class="hljs-string">'ast.json'</span>, <span class="hljs-built_in">JSON</span>.stringify(ast, <span class="hljs-literal">null</span>, <span class="hljs-string">'\t'</span>), (err)=&gt;&#123;&#125;);<br></code></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">&#123;<br>	<span class="hljs-attr">"type"</span>: <span class="hljs-string">"File"</span>,<br>	<span class="hljs-attr">"start"</span>: <span class="hljs-number">0</span>,<br>	<span class="hljs-attr">"end"</span>: <span class="hljs-number">12</span>,<br>	<span class="hljs-attr">"loc"</span>: &#123;<br>		<span class="hljs-attr">"start"</span>: &#123;<br>			<span class="hljs-attr">"line"</span>: <span class="hljs-number">1</span>,<br>			<span class="hljs-attr">"column"</span>: <span class="hljs-number">0</span><br>		&#125;,<br>		<span class="hljs-attr">"end"</span>: &#123;<br>			<span class="hljs-attr">"line"</span>: <span class="hljs-number">1</span>,<br>			<span class="hljs-attr">"column"</span>: <span class="hljs-number">12</span><br>		&#125;<br>	&#125;,<br>	<span class="hljs-attr">"errors"</span>: [],<br>	<span class="hljs-attr">"program"</span>: &#123;<br>		<span class="hljs-attr">"type"</span>: <span class="hljs-string">"Program"</span>,<br>		<span class="hljs-attr">"start"</span>: <span class="hljs-number">0</span>,<br>		<span class="hljs-attr">"end"</span>: <span class="hljs-number">12</span>,<br>		<span class="hljs-attr">"loc"</span>: &#123;<br>			<span class="hljs-attr">"start"</span>: &#123;<br>				<span class="hljs-attr">"line"</span>: <span class="hljs-number">1</span>,<br>				<span class="hljs-attr">"column"</span>: <span class="hljs-number">0</span><br>			&#125;,<br>			<span class="hljs-attr">"end"</span>: &#123;<br>				<span class="hljs-attr">"line"</span>: <span class="hljs-number">1</span>,<br>				<span class="hljs-attr">"column"</span>: <span class="hljs-number">12</span><br>			&#125;<br>		&#125;,<br>		<span class="hljs-attr">"sourceType"</span>: <span class="hljs-string">"script"</span>,<br>		<span class="hljs-attr">"interpreter"</span>: <span class="hljs-literal">null</span>,<br>		<span class="hljs-attr">"body"</span>: [<br>			&#123;<br>				<span class="hljs-attr">"type"</span>: <span class="hljs-string">"VariableDeclaration"</span>,<br>				<span class="hljs-attr">"start"</span>: <span class="hljs-number">0</span>,<br>				<span class="hljs-attr">"end"</span>: <span class="hljs-number">12</span>,<br>				<span class="hljs-attr">"loc"</span>: &#123;<br>					<span class="hljs-attr">"start"</span>: &#123;<br>						<span class="hljs-attr">"line"</span>: <span class="hljs-number">1</span>,<br>						<span class="hljs-attr">"column"</span>: <span class="hljs-number">0</span><br>					&#125;,<br>					<span class="hljs-attr">"end"</span>: &#123;<br>						<span class="hljs-attr">"line"</span>: <span class="hljs-number">1</span>,<br>						<span class="hljs-attr">"column"</span>: <span class="hljs-number">12</span><br>					&#125;<br>				&#125;,<br>				<span class="hljs-attr">"declarations"</span>: [<br>					&#123;<br>						<span class="hljs-attr">"type"</span>: <span class="hljs-string">"VariableDeclarator"</span>,<br>						<span class="hljs-attr">"start"</span>: <span class="hljs-number">4</span>,<br>						<span class="hljs-attr">"end"</span>: <span class="hljs-number">11</span>,<br>						<span class="hljs-attr">"loc"</span>: &#123;<br>							<span class="hljs-attr">"start"</span>: &#123;<br>								<span class="hljs-attr">"line"</span>: <span class="hljs-number">1</span>,<br>								<span class="hljs-attr">"column"</span>: <span class="hljs-number">4</span><br>							&#125;,<br>							<span class="hljs-attr">"end"</span>: &#123;<br>								<span class="hljs-attr">"line"</span>: <span class="hljs-number">1</span>,<br>								<span class="hljs-attr">"column"</span>: <span class="hljs-number">11</span><br>							&#125;<br>						&#125;,<br>						<span class="hljs-attr">"id"</span>: &#123;<br>							<span class="hljs-attr">"type"</span>: <span class="hljs-string">"Identifier"</span>,<br>							<span class="hljs-attr">"start"</span>: <span class="hljs-number">4</span>,<br>							<span class="hljs-attr">"end"</span>: <span class="hljs-number">5</span>,<br>							<span class="hljs-attr">"loc"</span>: &#123;<br>								<span class="hljs-attr">"start"</span>: &#123;<br>									<span class="hljs-attr">"line"</span>: <span class="hljs-number">1</span>,<br>									<span class="hljs-attr">"column"</span>: <span class="hljs-number">4</span><br>								&#125;,<br>								<span class="hljs-attr">"end"</span>: &#123;<br>									<span class="hljs-attr">"line"</span>: <span class="hljs-number">1</span>,<br>									<span class="hljs-attr">"column"</span>: <span class="hljs-number">5</span><br>								&#125;,<br>								<span class="hljs-attr">"identifierName"</span>: <span class="hljs-string">"a"</span><br>							&#125;,<br>							<span class="hljs-attr">"name"</span>: <span class="hljs-string">"a"</span><br>						&#125;,<br>						<span class="hljs-attr">"init"</span>: &#123;<br>							<span class="hljs-attr">"type"</span>: <span class="hljs-string">"NumericLiteral"</span>,<br>							<span class="hljs-attr">"start"</span>: <span class="hljs-number">8</span>,<br>							<span class="hljs-attr">"end"</span>: <span class="hljs-number">11</span>,<br>							<span class="hljs-attr">"loc"</span>: &#123;<br>								<span class="hljs-attr">"start"</span>: &#123;<br>									<span class="hljs-attr">"line"</span>: <span class="hljs-number">1</span>,<br>									<span class="hljs-attr">"column"</span>: <span class="hljs-number">8</span><br>								&#125;,<br>								<span class="hljs-attr">"end"</span>: &#123;<br>									<span class="hljs-attr">"line"</span>: <span class="hljs-number">1</span>,<br>									<span class="hljs-attr">"column"</span>: <span class="hljs-number">11</span><br>								&#125;<br>							&#125;,<br>							<span class="hljs-attr">"extra"</span>: &#123;<br>								<span class="hljs-attr">"rawValue"</span>: <span class="hljs-number">123</span>,<br>								<span class="hljs-attr">"raw"</span>: <span class="hljs-string">"123"</span><br>							&#125;,<br>							<span class="hljs-attr">"value"</span>: <span class="hljs-number">123</span><br>						&#125;<br>					&#125;<br>				],<br>				<span class="hljs-attr">"kind"</span>: <span class="hljs-string">"var"</span><br>			&#125;<br>		],<br>		<span class="hljs-attr">"directives"</span>: []<br>	&#125;,<br>	<span class="hljs-attr">"comments"</span>: []<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="访问AST节点内容"><a href="#访问AST节点内容" class="headerlink" title="访问AST节点内容"></a>访问AST节点内容</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 访问编译后的ast结构</span><br><br><span class="hljs-keyword">const</span> parser = <span class="hljs-built_in">require</span>(<span class="hljs-string">"@babel/parser"</span>);<br><span class="hljs-keyword">const</span> traverse = <span class="hljs-built_in">require</span>(<span class="hljs-string">"@babel/traverse"</span>).default;<br><br><span class="hljs-keyword">var</span> js_code = <span class="hljs-string">"var a = 123;function b()&#123;debugger;&#125;"</span>;<br><br><span class="hljs-comment">// const vistor = &#123;</span><br><span class="hljs-comment">//     VariableDeclaration(path) &#123;</span><br><span class="hljs-comment">//         console.log(path.type);</span><br><span class="hljs-comment">//         console.log(path.toString());</span><br><span class="hljs-comment">//     &#125;,</span><br><span class="hljs-comment">// &#125;</span><br><br><span class="hljs-comment">// 多路径查看，使用 "|"</span><br><span class="hljs-keyword">const</span> vistor = &#123;<br>    <span class="hljs-string">"VariableDeclaration|VariableDeclarator"</span>(path)&#123;<br>    <span class="hljs-comment">// "FunctionDeclaration|BlockStatement"(path)&#123;</span><br>        <span class="hljs-built_in">console</span>.log(path.type);<br>        <span class="hljs-built_in">console</span>.log(path.toString());<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> ast = parser.parse(js_code);<br><br>traverse(ast, vistor)<br></code></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>技术</category>
        <category>AST</category>
      </categories>
      <tags>
        <tag>AST</tag>
      </tags>
  </entry>
  <entry>
    <title>AST学习-认识path和node</title>
    <url>/2020/06/16/article-17/</url>
    <content><![CDATA[<p>认识path和node</p>
<a id="more"></a>

<h3 id="path-路径-常用操作"><a href="#path-路径-常用操作" class="headerlink" title="path(路径)常用操作"></a>path(路径)常用操作</h3><h4 id="获取当前路径所对应的源代码"><a href="#获取当前路径所对应的源代码" class="headerlink" title="获取当前路径所对应的源代码"></a>获取当前路径所对应的源代码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 使用toString()</span><br><span class="hljs-keyword">const</span> vistor = &#123;<br>        VariableDeclaration(path) &#123;<br>            <span class="hljs-built_in">console</span>.log(path.toString())<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h4 id="判断path是什么type"><a href="#判断path是什么type" class="headerlink" title="判断path是什么type"></a>判断path是什么type</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 使用 path.isXXX()</span><br><span class="hljs-keyword">const</span> vistor = &#123;<br>   VariableDeclarator(path)&#123;<br>       <span class="hljs-built_in">console</span>.log(path.isVariableDeclarator())<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h4 id="获取path的上一级路径"><a href="#获取path的上一级路径" class="headerlink" title="获取path的上一级路径"></a>获取path的上一级路径</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> parent = path.parentPath;<br><span class="hljs-built_in">console</span>.log(parent.node)<br></code></pre></td></tr></table></figure>



<h4 id="获取path的子路径"><a href="#获取path的子路径" class="headerlink" title="获取path的子路径"></a>获取path的子路径</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 使用 get()</span><br>path.get(<span class="hljs-string">'id'</span>);<br></code></pre></td></tr></table></figure>



<h4 id="删除path"><a href="#删除path" class="headerlink" title="删除path"></a>删除path</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// remove()</span><br>path.remove()<br></code></pre></td></tr></table></figure>



<h4 id="替换path"><a href="#替换path" class="headerlink" title="替换path"></a>替换path</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> t = <span class="hljs-built_in">require</span>(<span class="hljs-string">"@babel/types"</span>)<br><span class="hljs-comment">// 单路径可以使用replaceWith方法，多路径则使用replaceWithMultiple方法</span><br><span class="hljs-keyword">const</span> vistor = &#123;<br>    VariableDeclarator(path)&#123;<br>        <span class="hljs-comment">// 替换时注意路径结构</span><br>        path.get(<span class="hljs-string">'init'</span>).replaceWith(t.NumericLiteral(<span class="hljs-number">996</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h4 id="path源码"><a href="#path源码" class="headerlink" title="path源码"></a>path源码</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">@babel\traverse\lib\path<br></code></pre></td></tr></table></figure>



<h3 id="node-节点-常用操作"><a href="#node-节点-常用操作" class="headerlink" title="node(节点)常用操作"></a>node(节点)常用操作</h3><h4 id="获取当前节点所对应的源代码"><a href="#获取当前节点所对应的源代码" class="headerlink" title="获取当前节点所对应的源代码"></a>获取当前节点所对应的源代码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> generator = <span class="hljs-built_in">require</span>(<span class="hljs-string">"@babel/generator"</span>).default;<br><span class="hljs-keyword">let</span> &#123;code&#125; = generator(node);<br></code></pre></td></tr></table></figure>



<h4 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">delete</span> path.node.init<br></code></pre></td></tr></table></figure>



<h4 id="访问子节点"><a href="#访问子节点" class="headerlink" title="访问子节点"></a>访问子节点</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> vistor = &#123;<br>    VariableDeclarator(path)&#123;<br>        <span class="hljs-comment">// 打印节点初始化的值</span><br>        <span class="hljs-built_in">console</span>.log(path.node.init.value)<br><br>        <span class="hljs-comment">// 与 JSON 之间转换</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">JSON</span>.stringify(path.node))<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> ast = parser.parse(jscode);<br>traverse(ast, vistor)<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
        <category>AST</category>
      </categories>
      <tags>
        <tag>AST</tag>
      </tags>
  </entry>
  <entry>
    <title>AST学习-十六进制还原十进制</title>
    <url>/2020/06/17/article-18/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-string">"\x48\x65\x6c\x6c\x6f\x2c\x4e\x69\x67\x68\x74\x54\x65\x61\x6d\x21"</span>;<br></code></pre></td></tr></table></figure>

<p>十六进制还原十进制</p>
<a id="more"></a>

<h4 id="AST-TREE分析"><a href="#AST-TREE分析" class="headerlink" title="AST-TREE分析"></a>AST-TREE分析</h4><p><img src="WX20200617-115051.png" srcset="/img/loading.gif" alt=""></p>
<p>由上图可知影响结果的节点是 <strong><em>extra.raw</em></strong> ，接下来对这个节点进行操作</p>
<h4 id="方式一：遍历VariableDeclarator下init节点，符合条件后将extra-raw重新赋值。"><a href="#方式一：遍历VariableDeclarator下init节点，符合条件后将extra-raw重新赋值。" class="headerlink" title="方式一：遍历VariableDeclarator下init节点，符合条件后将extra.raw重新赋值。"></a>方式一：遍历VariableDeclarator下init节点，符合条件后将extra.raw重新赋值。</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> vistor = &#123;<br>    VariableDeclarator(path)&#123;<br>        <span class="hljs-keyword">const</span> init = path.get(<span class="hljs-string">'init'</span>);<br>        <span class="hljs-keyword">if</span> (!init.isStringLiteral()) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">const</span> node = init.node;<br>        <span class="hljs-keyword">let</span> &#123;value, extra&#125; = node;<br>        extra.raw = <span class="hljs-string">'"'</span> + value + <span class="hljs-string">':)"'</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h4 id="方式二：直接遍历type为StringLiteral的路径。"><a href="#方式二：直接遍历type为StringLiteral的路径。" class="headerlink" title="方式二：直接遍历type为StringLiteral的路径。"></a>方式二：直接遍历type为StringLiteral的路径。</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> vistor = &#123;<br>    StringLiteral(path)&#123;<br>        <span class="hljs-keyword">let</span> &#123;value, extra&#125; = path.node;<br>        extra.raw = <span class="hljs-string">'"'</span> + value + <span class="hljs-string">':)"'</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h4 id="方式三：使用新建节点替换"><a href="#方式三：使用新建节点替换" class="headerlink" title="方式三：使用新建节点替换"></a>方式三：使用新建节点替换</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> vistor = &#123;<br>    StringLiteral(path)&#123;<br>        <span class="hljs-keyword">let</span> &#123;value&#125; = path.node;<br>        path.replaceWith(t.StringLiteral(value + <span class="hljs-string">":("</span>));<br>        <span class="hljs-comment">// 因为新生成的节点类型也是StringLiteral，所以会一直遍历下去，最终导致栈溢出</span><br>        <span class="hljs-comment">// 解决方案为使用path.stop()方法，让其遍历后立即停止。</span><br>        path.stop();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h4 id="方式四：删除raw节点"><a href="#方式四：删除raw节点" class="headerlink" title="方式四：删除raw节点"></a>方式四：删除raw节点</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> vistor = &#123;<br>    StringLiteral(path)&#123;<br>        <span class="hljs-keyword">let</span> &#123;extra&#125; = path.node;<br>        <span class="hljs-keyword">delete</span> extra.raw;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>



<h4 id="通用步骤-十六进制数值-字符串还原十进制"><a href="#通用步骤-十六进制数值-字符串还原十进制" class="headerlink" title="通用步骤 (十六进制数值/字符串还原十进制)"></a>通用步骤 (十六进制数值/字符串还原十进制)</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> vistor = &#123;<br>    <span class="hljs-string">"StringLiteral|NumericLiteral"</span>(path)&#123;<br>        <span class="hljs-comment">// 删除extra节点</span><br>        <span class="hljs-keyword">delete</span> path.node.extra<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>技术</category>
        <category>AST</category>
      </categories>
      <tags>
        <tag>AST</tag>
      </tags>
  </entry>
  <entry>
    <title>AST学习-插入节点</title>
    <url>/2020/06/17/article-19/</url>
    <content><![CDATA[<p>插入节点</p>
<a id="more"></a>

<h3 id="变量后面插入一个未被初始化的变量"><a href="#变量后面插入一个未被初始化的变量" class="headerlink" title="变量后面插入一个未被初始化的变量"></a>变量后面插入一个未被初始化的变量</h3><p>示例代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">996</span>;<br></code></pre></td></tr></table></figure>

<h4 id="新构造一个-Identifier-类型的节点，然后直接插入"><a href="#新构造一个-Identifier-类型的节点，然后直接插入" class="headerlink" title="新构造一个 Identifier 类型的节点，然后直接插入"></a>新构造一个 <strong>Identifier</strong> 类型的节点，然后直接插入</h4><p>遍历 <strong><em>VariableDeclarator</em></strong> 节点</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> vistor = &#123;<br>    VariableDeclarator(path)&#123;<br>        path.insertAfter(t.Identifier(<span class="hljs-string">'b'</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>查看输出结果</p>
<p><img src="WX20200617-144220.png" srcset="/img/loading.gif" alt=""></p>
<h4 id="使用ExpressionStatement表达式语句"><a href="#使用ExpressionStatement表达式语句" class="headerlink" title="使用ExpressionStatement表达式语句"></a>使用ExpressionStatement表达式语句</h4><p>遍历 <strong><em>VariableDeclaration</em></strong> 节点</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// var a = 996;b = 250;</span><br><span class="hljs-keyword">const</span> vistor = &#123;<br>    VariableDeclaration(path)&#123;<br>        <span class="hljs-keyword">const</span> operator = <span class="hljs-string">"="</span>;<br>        <span class="hljs-keyword">const</span> left = t.Identifier(<span class="hljs-string">'var b'</span>);<br>        <span class="hljs-keyword">const</span> right = t.NumericLiteral(<span class="hljs-number">250</span>);<br><br>        <span class="hljs-keyword">const</span> new_assign = t.AssignmentExpression(operator, left, right);<br>        <span class="hljs-keyword">const</span> new_express = t.ExpressionStatement(new_assign);<br><br>        path.insertAfter(new_express);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>查看结果</p>
<p><img src="WX20200617-153708.png" srcset="/img/loading.gif" alt=""></p>
<h4 id="使用VariableDeclaration表达式语句"><a href="#使用VariableDeclaration表达式语句" class="headerlink" title="使用VariableDeclaration表达式语句"></a>使用VariableDeclaration表达式语句</h4><p>遍历 <strong><em>VariableDeclaration</em></strong> 节点</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// var a = 996;var b = 250;</span><br><span class="hljs-keyword">const</span> vistor = &#123;<br>    VariableDeclaration(path)&#123;<br>        <span class="hljs-keyword">const</span> id = t.Identifier(<span class="hljs-string">'b'</span>);<br>        <span class="hljs-keyword">const</span> init = t.NumericLiteral(<span class="hljs-number">250</span>);<br><br>        <span class="hljs-keyword">const</span> new_variable = t.VariableDeclarator(id, init)<br><br>        <span class="hljs-keyword">const</span> kind = <span class="hljs-string">'var'</span>;<br>        <span class="hljs-keyword">const</span> new_variable_express = t.VariableDeclaration(kind, <span class="hljs-built_in">Array</span>(new_variable))<br>        path.insertAfter(new_variable_express);<br>        path.stop();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>查看结果</p>
<p><img src="WX20200617-144713.png" srcset="/img/loading.gif" alt=""></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>AST</category>
      </categories>
      <tags>
        <tag>AST</tag>
      </tags>
  </entry>
  <entry>
    <title>Python环境管理--pyenv</title>
    <url>/2020/04/28/article-2/</url>
    <content><![CDATA[<p>Python环境管理–pyenv管理环境</p>
<a id="more"></a>

<h2 id="安装pyenv"><a href="#安装pyenv" class="headerlink" title="安装pyenv"></a>安装pyenv</h2><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><h4 id="pyenv-installer-安装"><a href="#pyenv-installer-安装" class="headerlink" title="pyenv-installer 安装"></a>pyenv-installer 安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">curl https://pyenv.run | bash<br></code></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash<br></code></pre></td></tr></table></figure>

<p>以上命令会弹出提示 把以下内容加入 ~/.bashrc 中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">export PATH="~/.pyenv/bin:$PATH"<br>eval "$(pyenv init -)"<br>eval "$(pyenv virtualenv-init -)"<br></code></pre></td></tr></table></figure>

<h3 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h3><h4 id="homebrew-安装"><a href="#homebrew-安装" class="headerlink" title="homebrew 安装"></a>homebrew 安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">brew install pyenv<br></code></pre></td></tr></table></figure>

<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><h3 id="Linux-1"><a href="#Linux-1" class="headerlink" title="Linux"></a>Linux</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">pyenv update<br></code></pre></td></tr></table></figure>

<h3 id="Mac-1"><a href="#Mac-1" class="headerlink" title="Mac"></a>Mac</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">brew upgrade pyenv<br></code></pre></td></tr></table></figure>

<h2 id="安装-Python-3-7-3"><a href="#安装-Python-3-7-3" class="headerlink" title="安装 Python 3.7.3"></a>安装 Python 3.7.3</h2><h3 id="Linux-2"><a href="#Linux-2" class="headerlink" title="Linux"></a>Linux</h3><p>安装依赖<br>sudo apt-get update<br>sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev</p>
<p>下载源码包到 pyenv 的 缓存目录里，加快安装速度</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">wget https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tar.xz -P $(pyenv root)/cache<br></code></pre></td></tr></table></figure>

<p>安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">pyenv install 3.7.3<br></code></pre></td></tr></table></figure>

<h3 id="Mac-2"><a href="#Mac-2" class="headerlink" title="Mac"></a>Mac</h3><p>下载源码包到 pyenv 的 缓存目录里，加快安装速度</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">wget https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tar.xz -P $(pyenv root)/cache<br></code></pre></td></tr></table></figure>

<p>安装依赖及设置环境变量</p>
<p>如果缺少 zlib 报错，则需要安装 zlib<br>zipimport.ZipImportError: can’t decompress data; zlib not available</p>
<p>安装 zlib<br>brew install zlib</p>
<p>设置zlib环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">export LDFLAGS="-L/usr/local/opt/zlib/lib"<br>export CPPFLAGS="-I/usr/local/opt/zlib/include"<br></code></pre></td></tr></table></figure>

<p>如果缺少 SQLite3 警告，则需要设置sqlite 环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">The Python sqlite3 extension was not compiled. Missing the SQLite3 lib?<br>Installed Python-3.7.3 to /Users/slipper/.pyenv/versions/3.7.3<br></code></pre></td></tr></table></figure>

<p>设置 sqlite 环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">export LDFLAGS="-L/usr/local/opt/zlib/lib -L/usr/local/opt/sqlite/lib"<br>export CPPFLAGS="-I/usr/local/opt/zlib/include -I/usr/local/opt/sqlite/include"<br></code></pre></td></tr></table></figure>

<p>安装 python<br>pyenv install 3.7.3</p>
<h2 id="卸载-python"><a href="#卸载-python" class="headerlink" title="卸载 python"></a>卸载 python</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">pyenv uninstall 3.7.3<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
        <category>环境管理</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>pyenv</tag>
        <tag>环境管理</tag>
      </tags>
  </entry>
  <entry>
    <title>AST学习-拆分一个Literal类型的节点</title>
    <url>/2020/06/17/article-20/</url>
    <content><![CDATA[<p>拆分一个Literal类型的节点</p>
<a id="more"></a>

<h3 id="拆分NumericLiteral节点类型"><a href="#拆分NumericLiteral节点类型" class="headerlink" title="拆分NumericLiteral节点类型"></a>拆分NumericLiteral节点类型</h3><p>示例代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">12345678</span>;<br></code></pre></td></tr></table></figure>

<h4 id="了解异或操作"><a href="#了解异或操作" class="headerlink" title="了解异或操作"></a>了解异或操作</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"># 生成随机八位负数<br><span class="hljs-keyword">const</span> first = <span class="hljs-number">0</span> - <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">10000000</span> + <span class="hljs-number">10000000</span>)<br># 与a做异或操作<br><span class="hljs-keyword">const</span> second = a ^ first;<br># 将first 与 second 进行异或操作<br><span class="hljs-keyword">const</span> res = first ^ second<br>&gt;&gt;&gt;<span class="hljs-number">12345678</span><br></code></pre></td></tr></table></figure>

<p>可以发现输出结果为 <strong><em>12345678</em></strong>,  <strong><em>res = first ^ second = first ^ first ^ a = 0 ^ a = a</em></strong></p>
<p>了解了这个概念就可以在 AST 中实现了</p>
<h4 id="在-AST-中实现"><a href="#在-AST-中实现" class="headerlink" title="在 AST 中实现"></a>在 AST 中实现</h4><p><img src="WX20200617-164925.png" srcset="/img/loading.gif" alt=""></p>
<p>通过 AST-TREE查看可知异或表达式属于 <strong><em>BinaryExpression</em></strong> 节点，所以我们需要构造这个节点</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> t = <span class="hljs-built_in">require</span>(<span class="hljs-string">"@babel/types"</span>)<br>t.BinaryExpression(<span class="hljs-string">'^'</span>, t.NumericLiteral(first), t.NumericLiteral(second))<br></code></pre></td></tr></table></figure>

<p>然后使用该节点替换原来的 <strong><em>NumericLiteral</em></strong> 节点就好了，代码如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> vistor = &#123;<br>    NumericLiteral(path)&#123;<br>        <span class="hljs-keyword">const</span> node = path.node;<br>        <span class="hljs-keyword">const</span> value = node.value;<br>        <span class="hljs-keyword">const</span> first = <span class="hljs-number">0</span> - <span class="hljs-built_in">Math</span>.floor(<span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">10000000</span> + <span class="hljs-number">10000000</span>);<br>        <span class="hljs-keyword">const</span> second = value ^ first;<br><br>        path.replaceWith(t.BinaryExpression(<span class="hljs-string">'^'</span>, t.NumericLiteral(first), t.NumericLiteral(second)));<br>        path.stop();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>查看结果</p>
<p><img src="WX20200617-165333.png" srcset="/img/loading.gif" alt=""></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>AST</category>
      </categories>
      <tags>
        <tag>AST</tag>
      </tags>
  </entry>
  <entry>
    <title>AST学习-合并Literal类型的计算表达式</title>
    <url>/2020/06/18/article-21/</url>
    <content><![CDATA[<p>合并Literal类型的计算表达式</p>
<a id="more"></a>

<p>将如下示例代码进行合并</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = !![], b = <span class="hljs-string">'Hey '</span> + <span class="hljs-string">'Rach'</span> + <span class="hljs-string">'!'</span>,c = <span class="hljs-number">8</span> + <span class="hljs-number">3</span> * <span class="hljs-number">40</span>,d = <span class="hljs-built_in">Math</span>.abs(<span class="hljs-number">-911</span>) % <span class="hljs-number">19</span>,e = <span class="hljs-literal">true</span> ? <span class="hljs-number">996</span>:<span class="hljs-number">250</span>;<br></code></pre></td></tr></table></figure>

<h3 id="使用babel库中的evaluate方法"><a href="#使用babel库中的evaluate方法" class="headerlink" title="使用babel库中的evaluate方法"></a>使用babel库中的evaluate方法</h3><p>源代码路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">node_modules/@babel/traverse/lib/path/evaluation.js<br></code></pre></td></tr></table></figure>

<p>查看 AST-Tree </p>
<p><img src="WX20200618-115653.png" srcset="/img/loading.gif" alt=""></p>
<p>发现这五个变量的初始化节点类型有三种 <strong><em>UnaryExpression</em></strong>, <strong><em>BinaryExpression</em></strong>, <strong><em>ConditionalExpression</em></strong></p>
<p>然后通过代码遍历查看结果</p>
<h4 id="优先顶层遍历"><a href="#优先顶层遍历" class="headerlink" title="优先顶层遍历"></a>优先顶层遍历</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 优先顶层遍历</span><br><span class="hljs-keyword">const</span> vistor = &#123;<br>    <span class="hljs-string">"UnaryExpression|BinaryExpression|ConditionalExpression"</span>(path)&#123;<br>        <span class="hljs-keyword">const</span> &#123;value&#125; = path.evaluate();<br>        <span class="hljs-built_in">console</span>.log(path.toString(), value);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>查看结果</p>
<p><img src="WX20200618-120552.png" srcset="/img/loading.gif" alt=""></p>
<p>这里出现了结果，但是遍历是从顶层开始的</p>
<h4 id="优先底层遍历"><a href="#优先底层遍历" class="headerlink" title="优先底层遍历"></a>优先底层遍历</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 从底层遍历</span><br><span class="hljs-keyword">const</span> vistor = &#123;<br>    <span class="hljs-string">"UnaryExpression|BinaryExpression|ConditionalExpression"</span>:&#123;<br>        exit: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">path</span>)</span>&#123;<br>            <span class="hljs-keyword">const</span> &#123;value&#125; = path.evaluate();<br>            <span class="hljs-built_in">console</span>.log(path.toString(), value)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>查看结果</p>
<p><img src="WX20200618-120824.png" srcset="/img/loading.gif" alt=""></p>
<p><strong>enter：默认值，顶层优先</strong></p>
<p><strong>exit：底层优先</strong></p>
<h4 id="通用完整代码"><a href="#通用完整代码" class="headerlink" title="通用完整代码"></a>通用完整代码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 将 JS 源码转换成语法树的函数</span><br><span class="hljs-keyword">const</span> parser = <span class="hljs-built_in">require</span>(<span class="hljs-string">"@babel/parser"</span>)<br><span class="hljs-comment">// 遍历 AST 的函数</span><br><span class="hljs-keyword">const</span> traverse = <span class="hljs-built_in">require</span>(<span class="hljs-string">"@babel/traverse"</span>).default<br><span class="hljs-comment">// 操作节点的函数</span><br><span class="hljs-keyword">const</span> t = <span class="hljs-built_in">require</span>(<span class="hljs-string">"@babel/types"</span>)<br><span class="hljs-comment">// 将语法书转换成源代码的函数</span><br><span class="hljs-keyword">const</span> generator = <span class="hljs-built_in">require</span>(<span class="hljs-string">"@babel/generator"</span>).default<br><br><span class="hljs-keyword">var</span> jscode = <span class="hljs-string">"var a = !![], b = 'Hey ' + 'Rach' + '!',c = 8 + 3 * 40,d = Math.abs(-911) % 19,e = true ? 996:250;"</span>;<br><br><span class="hljs-comment">// 根据value类型替换相对应节点</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">PathToLiteral</span>(<span class="hljs-params">path, value</span>)</span>&#123;<br>    <span class="hljs-keyword">switch</span> (<span class="hljs-keyword">typeof</span> value) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">"boolean"</span>:<br>            path.replaceWith(t.BooleanLiteral(value));<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">"string"</span>:<br>            path.replaceWith(t.StringLiteral(value));<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">"number"</span>:<br>            path.replaceWith(t.NumericLiteral(value));<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 执行替换入口函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">do_replace</span>(<span class="hljs-params">path</span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> &#123;value&#125; = path.evaluate();<br>    PathToLiteral(path, value);<br>&#125;<br><br><span class="hljs-comment">// 注意这里使用enter而非exit</span><br><span class="hljs-keyword">const</span> vistor = &#123;<br>    <span class="hljs-string">"UnaryExpression|BinaryExpression|ConditionalExpression"</span>:&#123;<br>        enter: [do_replace]<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> ast = parser.parse(jscode);<br>traverse(ast, vistor)<br><br><span class="hljs-keyword">let</span> &#123;code&#125; = generator(ast)<br><span class="hljs-built_in">console</span>.log(code)<br></code></pre></td></tr></table></figure>

<p>查看结果</p>
<p><img src="WX20200618-121458.png" srcset="/img/loading.gif" alt=""></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>尽量多阅读源码，应有尽有。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>AST</category>
      </categories>
      <tags>
        <tag>AST</tag>
      </tags>
  </entry>
  <entry>
    <title>AST学习-将 BinaryExpression 类型转换为 CallExpression 类型</title>
    <url>/2020/06/18/article-22/</url>
    <content><![CDATA[<p>将 BinaryExpression 类型转换为 CallExpression 类型</p>
<a id="more"></a>

<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">996</span> | <span class="hljs-number">250</span>;<br></code></pre></td></tr></table></figure>

<p>转换为</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">s, h</span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> s | h;<br>&#125;(<span class="hljs-number">996</span>, <span class="hljs-number">250</span>);<br></code></pre></td></tr></table></figure>

<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><img src="WX20200618-154437.png" srcset="/img/loading.gif" alt=""></p>
<p>对比发现差别在于 <strong><em>VariableDeclarator</em></strong> 节点的初始化中，所以转换思路就是将原来的 <strong><em>BinaryExpression</em></strong> 节点替换为 <strong><em>CallExpression</em></strong> 节点</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="修改BinaryExpression节点"><a href="#修改BinaryExpression节点" class="headerlink" title="修改BinaryExpression节点"></a>修改BinaryExpression节点</h4><p>代码如下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 将 JS 源码转换成语法树的函数</span><br><span class="hljs-keyword">const</span> parser = <span class="hljs-built_in">require</span>(<span class="hljs-string">"@babel/parser"</span>)<br><span class="hljs-comment">// 遍历 AST 的函数</span><br><span class="hljs-keyword">const</span> traverse = <span class="hljs-built_in">require</span>(<span class="hljs-string">"@babel/traverse"</span>).default<br><span class="hljs-comment">// 操作节点的函数</span><br><span class="hljs-keyword">const</span> t = <span class="hljs-built_in">require</span>(<span class="hljs-string">"@babel/types"</span>)<br><span class="hljs-comment">// 将语法书转换成源代码的函数</span><br><span class="hljs-keyword">const</span> generator = <span class="hljs-built_in">require</span>(<span class="hljs-string">"@babel/generator"</span>).default<br><span class="hljs-comment">// 操作文件的函数</span><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">"fs"</span>)<br><br>jscode = <span class="hljs-string">"var a = 996 | 250;"</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">binary2func</span>(<span class="hljs-params">path</span>)</span>&#123;<br>    init_path = path.get(<span class="hljs-string">'init'</span>);<br>    <span class="hljs-keyword">if</span> (!init_path.isBinaryExpression) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-comment">// 将type改为 CallExpression</span><br>    init_path.node.type = <span class="hljs-string">"CallExpression"</span>;<br><br>    <span class="hljs-comment">// 添加 arguments 节点</span><br>    <span class="hljs-keyword">let</span> &#123;operator, left, right&#125; = init_path.node;<br>    init_path.node.arguments = [left, right];<br><br>    <span class="hljs-comment">// 添加 callee 节点</span><br>    <span class="hljs-comment">// 先构造 params</span><br>    <span class="hljs-keyword">let</span> s = t.Identifier(<span class="hljs-string">'s'</span>);<br>    <span class="hljs-keyword">let</span> h = t.Identifier(<span class="hljs-string">'h'</span>);<br>    <span class="hljs-keyword">let</span> params = [s, h];<br><br>    <span class="hljs-comment">// 构造 BlockStatement-&gt;ReturnStatement-&gt;BinaryExpression</span><br>    <span class="hljs-keyword">let</span> binaryExpress = t.BinaryExpression(operator, s, h);<br>    <span class="hljs-keyword">let</span> returnStmt = t.ReturnStatement(binaryExpress);<br>    <span class="hljs-keyword">let</span> body = t.BlockStatement([returnStmt]);<br><br>    <span class="hljs-keyword">let</span> id = <span class="hljs-literal">null</span><br>    <span class="hljs-keyword">const</span> fuuncExpress = t.FunctionExpression(id, params, body);<br><br>    init_path.node.callee = fuuncExpress;<br>&#125;<br><br><span class="hljs-keyword">const</span> vistor = &#123;<br>    VariableDeclarator:&#123;<br>        enter: [binary2func]<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> ast = parser.parse(jscode);<br>traverse(ast, vistor)<br><br><span class="hljs-keyword">let</span> &#123;code&#125; = generator(ast);<br><span class="hljs-built_in">console</span>.log(code)<br></code></pre></td></tr></table></figure>



<h4 id="构造-CallExpression-替换-BinaryExpression"><a href="#构造-CallExpression-替换-BinaryExpression" class="headerlink" title="构造 CallExpression 替换 BinaryExpression"></a>构造 CallExpression 替换 BinaryExpression</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 将 JS 源码转换成语法树的函数</span><br><span class="hljs-keyword">const</span> parser = <span class="hljs-built_in">require</span>(<span class="hljs-string">"@babel/parser"</span>)<br><span class="hljs-comment">// 遍历 AST 的函数</span><br><span class="hljs-keyword">const</span> traverse = <span class="hljs-built_in">require</span>(<span class="hljs-string">"@babel/traverse"</span>).default<br><span class="hljs-comment">// 操作节点的函数</span><br><span class="hljs-keyword">const</span> t = <span class="hljs-built_in">require</span>(<span class="hljs-string">"@babel/types"</span>)<br><span class="hljs-comment">// 将语法书转换成源代码的函数</span><br><span class="hljs-keyword">const</span> generator = <span class="hljs-built_in">require</span>(<span class="hljs-string">"@babel/generator"</span>).default<br><span class="hljs-comment">// 操作文件的函数</span><br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">"fs"</span>)<br><br>jscode = <span class="hljs-string">"var a = 996 | 250;"</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">binary2func</span>(<span class="hljs-params">path</span>) </span>&#123;<br>    init_path = path.get(<span class="hljs-string">'init'</span>);<br><br>    <span class="hljs-keyword">if</span> (!init_path.isBinaryExpression()) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-keyword">let</span> id = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">let</span> &#123;operator, left, right&#125; = init_path.node;<br><br>    <span class="hljs-comment">// 构造 arguments 节点</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-built_in">arguments</span> = [left, right];<br><br>    <span class="hljs-comment">// 构造 FunctionExpression 节点</span><br>    <span class="hljs-keyword">let</span> s = t.Identifier(<span class="hljs-string">'s'</span>);<br>    <span class="hljs-keyword">let</span> h = t.Identifier(<span class="hljs-string">'h'</span>);<br>    <span class="hljs-keyword">let</span> params = [s, h]<br>    <span class="hljs-keyword">let</span> binaryExpress = t.BinaryExpression(operator, s, h);<br>    <span class="hljs-keyword">let</span> returnStmt = t.ReturnStatement(binaryExpress);<br>    <span class="hljs-keyword">let</span> blockStmt = t.BlockStatement([returnStmt]);<br>    <span class="hljs-keyword">const</span> funcExpress = t.FunctionExpression(id, params,blockStmt)<br><br>    init_path.replaceWith(t.CallExpression(funcExpress, <span class="hljs-built_in">arguments</span>));<br><br>&#125;<br><br><span class="hljs-keyword">const</span> vistor = &#123;<br>    VariableDeclarator:&#123;<br>        enter: [binary2func]<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> ast = parser.parse(jscode);<br>traverse(ast, vistor)<br><br><span class="hljs-keyword">let</span> &#123;code&#125; = generator(ast);<br><span class="hljs-built_in">console</span>.log(code)<br></code></pre></td></tr></table></figure>

<p>打印结果</p>
<p><img src="WX20200618-155056.png" srcset="/img/loading.gif" alt=""></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>注意本文中节点的修改和替换操作都是由底层向顶层的。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>AST</category>
      </categories>
      <tags>
        <tag>AST</tag>
      </tags>
  </entry>
  <entry>
    <title>AST学习-还原简单的 CallExpression 类型</title>
    <url>/2020/06/19/article-23/</url>
    <content><![CDATA[<p>还原简单的 CallExpression 类型</p>
<a id="more"></a>

<h4 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> Xor = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">p,q</span>)</span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">return</span> p ^ q;<br>&#125;<br><br><span class="hljs-keyword">let</span> a = Xor(<span class="hljs-number">996</span>,<span class="hljs-number">250</span>);<br></code></pre></td></tr></table></figure>

<p>转化为如下形式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> Xor = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">p,q</span>)</span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-keyword">return</span> p ^ q;<br>&#125;<br><br><span class="hljs-keyword">let</span> a = <span class="hljs-number">996</span> ^ <span class="hljs-number">250</span>;<br></code></pre></td></tr></table></figure>

<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>遍历 <strong><em>VariableDeclarator</em></strong> 路径，对参数及函数主体进行判断校验，筛选出符合条件的节点</p>
<p>遍历函数定义作用域，当 <strong><em>CallExpression</em></strong> 与函数名相同时执行替换</p>
<h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 将 JS 源码转换成语法树的函数</span><br><span class="hljs-keyword">const</span> parser = <span class="hljs-built_in">require</span>(<span class="hljs-string">"@babel/parser"</span>)<br><span class="hljs-comment">// 遍历 AST 的函数</span><br><span class="hljs-keyword">const</span> traverse = <span class="hljs-built_in">require</span>(<span class="hljs-string">"@babel/traverse"</span>).default<br><span class="hljs-comment">// 操作节点的函数</span><br><span class="hljs-keyword">const</span> t = <span class="hljs-built_in">require</span>(<span class="hljs-string">"@babel/types"</span>)<br><span class="hljs-comment">// 将语法书转换成源代码的函数</span><br><span class="hljs-keyword">const</span> generator = <span class="hljs-built_in">require</span>(<span class="hljs-string">"@babel/generator"</span>).default<br><br>jscode = <span class="hljs-string">"var Xor = function (p,q)\n"</span> +<br>    <span class="hljs-string">"&#123;\n"</span> +<br>    <span class="hljs-string">"  return p ^ q;\n"</span> +<br>    <span class="hljs-string">"&#125;\n"</span> +<br>    <span class="hljs-string">"\n"</span> +<br>    <span class="hljs-string">"let a = Xor(996,250);"</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">call2express</span>(<span class="hljs-params">path</span>)</span>&#123;<br>    <span class="hljs-comment">// 获取函数名及初始化节点</span><br>    <span class="hljs-keyword">const</span> &#123;init, id&#125; = path.node;<br>    <span class="hljs-keyword">const</span> name = id.name;<br>    <span class="hljs-keyword">const</span> params = init.params;<br><br>    <span class="hljs-comment">// 判断行参是否为两个</span><br>    <span class="hljs-keyword">if</span> (!params.length === <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-comment">// 获取行参名</span><br>    <span class="hljs-keyword">let</span> first_name = params[<span class="hljs-number">0</span>].name;<br>    <span class="hljs-keyword">let</span> second_name = params[<span class="hljs-number">1</span>].name;<br><br>    <span class="hljs-keyword">let</span> func_body = init.body<br>    <span class="hljs-comment">// 校验函数主体内容</span><br>    <span class="hljs-keyword">if</span> (!func_body.body || !func_body.body.length === <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-keyword">let</span> return_body = func_body.body[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">let</span> <span class="hljs-built_in">arguments</span> = return_body.argument;<br>    <span class="hljs-keyword">let</span> &#123;operator, left, right&#125; = <span class="hljs-built_in">arguments</span>;<br><br>    <span class="hljs-comment">// 判断ReturnStatement节点内容</span><br>    <span class="hljs-keyword">if</span> (!t.isReturnStatement(return_body) || !t.isBinaryExpression(<span class="hljs-built_in">arguments</span>)) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-comment">// 判断return语句和行参是否一致</span><br>    <span class="hljs-keyword">if</span> (!t.isIdentifier(left, &#123;<span class="hljs-attr">name</span>:first_name&#125;) || !t.isIdentifier(right, &#123;<span class="hljs-attr">name</span>:second_name&#125;)) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-comment">// 校验完毕，开始执行替换</span><br>    <span class="hljs-comment">// 获取函数定义作用域</span><br>    <span class="hljs-keyword">const</span> scope = path.scope;<br><br>    traverse(scope.block, &#123;<br>        <span class="hljs-comment">// CallExpression: function (_path) &#123;</span><br>        <span class="hljs-comment">//     node = _path.node;</span><br>        <span class="hljs-comment">//     if (!t.isIdentifier(node.callee, &#123;name:name&#125;)) return;</span><br>        <span class="hljs-comment">//     args = node.arguments;</span><br>        <span class="hljs-comment">//</span><br>        <span class="hljs-comment">//     _path.replaceWith(t.BinaryExpression(operator, args[0], args[1]));</span><br>        <span class="hljs-comment">// &#125;</span><br>        CallExpression:&#123;<br>            enter: [<br>                <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">_path</span>) </span>&#123;<br>                    node = _path.node;<br>                    <span class="hljs-keyword">if</span> (!t.isIdentifier(node.callee, &#123;<span class="hljs-attr">name</span>:name&#125;)) <span class="hljs-keyword">return</span>;<br>                    args = node.arguments;<br><br>                    _path.replaceWith(t.BinaryExpression(operator, args[<span class="hljs-number">0</span>], args[<span class="hljs-number">1</span>]));<br>                &#125;<br>            ]<br>        &#125;<br>    &#125;)<br><br>&#125;<br><br><span class="hljs-keyword">const</span> vistor = &#123;<br>    VariableDeclarator(path)&#123;<br>        <span class="hljs-keyword">let</span> init = path.get(<span class="hljs-string">'init'</span>);<br>        <span class="hljs-keyword">if</span> (init.isFunctionExpression())&#123;<br>            call2express(path);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> ast = parser.parse(jscode)<br>traverse(ast, vistor)<br><br><span class="hljs-keyword">let</span> &#123;code&#125; = generator(ast);<br><span class="hljs-built_in">console</span>.log(code)<br></code></pre></td></tr></table></figure>

<p>查看执行结果</p>
<p><img src="WX20200619-165529.png" srcset="/img/loading.gif" alt=""></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>AST</category>
      </categories>
      <tags>
        <tag>AST</tag>
      </tags>
  </entry>
  <entry>
    <title>AST学习-将a[&quot;length&quot;]转变为a.length</title>
    <url>/2020/06/19/article-24/</url>
    <content><![CDATA[<p>将a[“length”]转变为a.length</p>
<a id="more"></a>

<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-string">'hello world!'</span>;<br><span class="hljs-keyword">var</span> b = a[<span class="hljs-string">'length'</span>];<br></code></pre></td></tr></table></figure>

<p>转化为</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-string">'hello world!'</span>;<br><span class="hljs-keyword">var</span> b = a.length;<br></code></pre></td></tr></table></figure>

<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><img src="WX20200619-184840.png" srcset="/img/loading.gif" alt=""></p>
<p>经AST-Tree比较获知差距在于 <strong><em>property</em></strong> 和 <strong><em>computed</em></strong> 这两个路径，替换掉就好了</p>
<h3 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">member2identify</span>(<span class="hljs-params">path</span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> init = path.get(<span class="hljs-string">'init'</span>);<br><br>    <span class="hljs-keyword">if</span> (!init.isMemberExpression()) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-keyword">const</span> member_node = init.node;<br>    <span class="hljs-keyword">const</span> member_property = init.get(<span class="hljs-string">'property'</span>);<br><br>    member_node.computed = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">let</span> value = member_node.property.value;<br>    member_property.replaceWith(t.Identifier(value));<br>&#125;<br><br><span class="hljs-keyword">const</span> vistor = &#123;<br>    VariableDeclarator:&#123;<br>        enter: [member2identify]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>查看结果</p>
<p><img src="WX20200619-185204.png" srcset="/img/loading.gif" alt=""></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>AST</category>
      </categories>
      <tags>
        <tag>AST</tag>
      </tags>
  </entry>
  <entry>
    <title>AST学习-删除全部注释</title>
    <url>/2020/06/22/article-25/</url>
    <content><![CDATA[<p>删除全部注释</p>
<a id="more"></a>

<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>删除示例代码中的注释：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>; <span class="hljs-comment">//this is single line comment</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">This is a  multiline comments;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">test</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">test</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">test</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">var</span> b = <span class="hljs-number">456</span>;<br></code></pre></td></tr></table></figure>

<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><img src="WX20200622-114717.png" srcset="/img/loading.gif" alt=""></p>
<p>但使用插件遍历发现如下异常</p>
<p><img src="WX20200622-115102.png" srcset="/img/loading.gif" alt=""></p>
<p>这时使用generator直接操作，将comments参数声明为false，就可以去掉注释了</p>
<p><img src="WX20200622-115311.png" srcset="/img/loading.gif" alt=""></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> ast = parser.parse(jscode);<br><span class="hljs-comment">// traverse(ast, vistor)</span><br><br><span class="hljs-keyword">let</span> &#123;code&#125; = generator(ast, opts=&#123;<span class="hljs-attr">comments</span>:<span class="hljs-literal">false</span>&#125;)<br><span class="hljs-built_in">console</span>.log(code)<br></code></pre></td></tr></table></figure>

<p>查看结果</p>
<p><img src="WX20200622-115557.png" srcset="/img/loading.gif" alt=""></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>AST</category>
      </categories>
      <tags>
        <tag>AST</tag>
      </tags>
  </entry>
  <entry>
    <title>AST学习-删除空行和空语句</title>
    <url>/2020/06/22/article-26/</url>
    <content><![CDATA[<p>删除空行和空语句</p>
<a id="more"></a>

<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>示例代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>;<br><br><br>;<br><br><br><span class="hljs-keyword">var</span> b = <span class="hljs-number">456</span>;<br></code></pre></td></tr></table></figure>

<p>转换为</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>;<br><span class="hljs-keyword">var</span> b = <span class="hljs-number">456</span>;<br></code></pre></td></tr></table></figure>

<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><img src="WX20200622-121701.png" srcset="/img/loading.gif" alt=""></p>
<p>空语句的节点type是 <strong><em>EmptyStatement</em></strong> ，空行不会被解析，所以使用generator方法处理</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 将 JS 源码转换成语法树的函数</span><br><span class="hljs-keyword">const</span> parser = <span class="hljs-built_in">require</span>(<span class="hljs-string">"@babel/parser"</span>)<br><span class="hljs-comment">// 遍历 AST 的函数</span><br><span class="hljs-keyword">const</span> traverse = <span class="hljs-built_in">require</span>(<span class="hljs-string">"@babel/traverse"</span>).default<br><span class="hljs-comment">// 操作节点的函数</span><br><span class="hljs-keyword">const</span> t = <span class="hljs-built_in">require</span>(<span class="hljs-string">"@babel/types"</span>)<br><span class="hljs-comment">// 将语法书转换成源代码的函数</span><br><span class="hljs-keyword">const</span> generator = <span class="hljs-built_in">require</span>(<span class="hljs-string">"@babel/generator"</span>).default<br><br><span class="hljs-keyword">var</span> jscode = <span class="hljs-string">'var a = 123;\n'</span> +<br>    <span class="hljs-string">'\n'</span> +<br>    <span class="hljs-string">'\n'</span> +<br>    <span class="hljs-string">'\n'</span> +<br>    <span class="hljs-string">';\n'</span> +<br>    <span class="hljs-string">'\n'</span> +<br>    <span class="hljs-string">'\n'</span> +<br>    <span class="hljs-string">'\n'</span> +<br>    <span class="hljs-string">'var b = 456;'</span><br><br><span class="hljs-comment">// 删除空语句</span><br><span class="hljs-keyword">const</span> vistor = &#123;<br>    EmptyStatement(path)&#123;<br>        path.remove();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> ast = parser.parse(jscode);<br>traverse(ast, vistor)<br><br><span class="hljs-comment">// 删除空行</span><br>options = &#123;<br>    readlines: <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-keyword">let</span> &#123;code&#125; = generator(ast, opts=options);<br><span class="hljs-built_in">console</span>.log(code)<br></code></pre></td></tr></table></figure>

<p>查看结果</p>
<p><img src="WX20200622-122351.png" srcset="/img/loading.gif" alt=""></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>AST</category>
      </categories>
      <tags>
        <tag>AST</tag>
      </tags>
  </entry>
  <entry>
    <title>某数记录</title>
    <url>/2020/06/23/article-27/</url>
    <content><![CDATA[<h4 id="某数特征"><a href="#某数特征" class="headerlink" title="某数特征"></a>某数特征</h4><p>最常见的cookie里面的参数。</p>
<p>最经典的80s和80t。</p>
<p>还有其他但都是以4或5开头。（版本号）</p>
<p>最常见的param里面的参数</p>
<p>以4或者5开头的</p>
<p>或者是8位乱七八糟的参数名后面跟着一长串乱七八糟的字符</p>
<p>只要是在html页面中看到 &lt;meta content=“一长串字符”</p>
<p>r = “m”</p>
<p>script中出现混淆JS</p>
<p>这三个点可以直接确认是某数</p>
<p><img src="/Users/woo/Desktop/onlygodsee_git/onlygodsee.github.io/source/_posts/article-27/WX20200623-162231.png" srcset="/img/loading.gif" alt=""></p>
<h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><p>可选中监听script</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>JS逆向</category>
      </categories>
      <tags>
        <tag>JS逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>网易云音乐歌曲列表</title>
    <url>/2020/07/01/article-29/</url>
    <content><![CDATA[<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p>aHR0cHM6Ly9tdXNpYy4xNjMuY29tLyMvcGxheWxpc3Q/aWQ9MjcyODMyNDM5Ng==</p>
<p>获取歌曲列表的歌手信息</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><img src="/Users/woo/Desktop/onlygodsee_git/onlygodsee.github.io/source/_posts/article-29/WX20200701-110758.png" srcset="/img/loading.gif" alt=""></p>
<p>看到 <strong><em>textarea</em></strong> 的数据是经过处理的，全局搜索，发现啥也没有，说明有混淆</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>JS逆向</category>
      </categories>
      <tags>
        <tag>JS逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>Python环境管理--pipenv</title>
    <url>/2020/04/28/article-3/</url>
    <content><![CDATA[<p>Python环境管理–pipenv管理库</p>
<a id="more"></a>

<h2 id="安装pipenv"><a href="#安装pipenv" class="headerlink" title="安装pipenv"></a>安装pipenv</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">pip3 install pipenv<br></code></pre></td></tr></table></figure>

<p>初始化</p>
<p>安装到项目目录里</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">export PIPENV_VENV_IN_PROJECT=1<br></code></pre></td></tr></table></figure>

<p>使用 Python 3.7.3</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">pipenv --python $(pyenv root)/versions/3.7.3/bin/python<br></code></pre></td></tr></table></figure>

<p>设置源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">PIPENV_PYPI_MIRROR=http://mirrors.aliyun.com/pypi/simple<br>或<br>pipenv install --pypi-mirror http://mirrors.aliyun.com/pypi/simple<br></code></pre></td></tr></table></figure>

<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">pip uninstall pipenv<br></code></pre></td></tr></table></figure>

<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><h3 id="pipenv-可以触发-pyenv-安装-Python-版本"><a href="#pipenv-可以触发-pyenv-安装-Python-版本" class="headerlink" title="pipenv 可以触发 pyenv 安装 Python 版本"></a>pipenv 可以触发 pyenv 安装 Python 版本</h3><p>.python-version</p>
<h3 id="pipenv-可以打开依赖的包"><a href="#pipenv-可以打开依赖的包" class="headerlink" title="pipenv 可以打开依赖的包"></a>pipenv 可以打开依赖的包</h3><p>export EDITOR=subl # 设置 pipenv open 的 默认编辑器<br>pipenv open fabric</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>删除在 /usr/local/bin/pipenv 目录的pipenv<br>建议用 pip3 安装 pipenv</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>环境管理</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>环境管理</tag>
        <tag>pipenv</tag>
      </tags>
  </entry>
  <entry>
    <title>数组</title>
    <url>/2020/08/28/article-31/</url>
    <content><![CDATA[<p>数组：最基本的数据结构</p>
<a id="more"></a>

<h3 id="专业解释"><a href="#专业解释" class="headerlink" title="专业解释"></a>专业解释</h3><p><strong>数组（Array）是一种 <em>线性表</em> 数据结构。它用一组 <em>连续的内存空间</em>，来存储一组具有 <em>相同类型的数据</em>。</strong></p>
<h4 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h4><p>线性表就是数据排成像一条线一样的结构</p>
<h4 id="连续的内存空间和相同类型的数据"><a href="#连续的内存空间和相同类型的数据" class="headerlink" title="连续的内存空间和相同类型的数据"></a>连续的内存空间和相同类型的数据</h4><h4 id="元素存储的内存地址计算公式"><a href="#元素存储的内存地址计算公式" class="headerlink" title="元素存储的内存地址计算公式"></a>元素存储的内存地址计算公式</h4><figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">a[i]_address</span> = base_address + i * data_type_size<br></code></pre></td></tr></table></figure>

<h4 id="数组和链表的区别"><a href="#数组和链表的区别" class="headerlink" title="数组和链表的区别"></a>数组和链表的区别</h4><p>数组支持随机访问，根据下标随机访问的时间复杂度为 O(1);链表适合插入、删除，时间复杂度 O(1)</p>
<h4 id="优化插入数据"><a href="#优化插入数据" class="headerlink" title="优化插入数据"></a>优化插入数据</h4><p>我们在某个位置插入一个新的元素时，就必须按照刚才的方法搬移 k 之后的数据。但是，如果数组中存储的数据并没有任何规律，数组只是被当作一个存储数据的集合。在这种情况下，如果要将某个数据插入到第 k 个位置，为了避免大规模的数据搬移，我们还有一个简单的办法就是，直接将第 k 位的数据搬移到数组元素的最后，把新的元素直接放入第 k 个位置</p>
<h4 id="优化删除操作"><a href="#优化删除操作" class="headerlink" title="优化删除操作"></a>优化删除操作</h4><p>先对要删除的数据进行记录，当数组空间不足时统一执行删除操作，与JVM垃圾回收类似。</p>
<h4 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h4><p>优势：支持数组常规操作，支持动态扩容</p>
<p>选择场景：对于业务开发，直接使用容器就足够了，省时省力。毕竟损耗一丢丢性能，完全不会影响到系统整体的性能。但如果你是做一些非常底层的开发，比如开发网络框架，性能的优化需要做到极致，这个时候数组就会优于容器，成为首选</p>
<h4 id="数组为何要使用“0”作为起始索引"><a href="#数组为何要使用“0”作为起始索引" class="headerlink" title="数组为何要使用“0”作为起始索引"></a>数组为何要使用“0”作为起始索引</h4><p>索引正确定义为“偏移量”，且如果使用“1”作为起始下标，内存地址计算公式变为：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">a[k]_address</span> = base_address + (k-<span class="hljs-number">1</span>)*type_size<br></code></pre></td></tr></table></figure>

<p>此时会使cpu多进行一次减法运算。</p>
<h4 id="内容小结"><a href="#内容小结" class="headerlink" title="内容小结"></a>内容小结</h4><p>数组用一块连续的内存空间，来存储相同类型的一组数据，最大的特点就是支持随机访问，但插入、删除操作也因此变得比较低效，平均情况时间复杂度为 O(n)。在平时的业务开发中，我们可以直接使用编程语言提供的容器类，但是，如果是特别底层的开发，直接使用数组可能会更合适。</p>
<h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><h5 id="前面我基于数组的原理引出-JVM-的标记清除垃圾回收算法的核心理念。我不知道你是否使用-Java-语言，理解-JVM，如果你熟悉，可以在评论区回顾下你理解的标记清除垃圾回收算法。"><a href="#前面我基于数组的原理引出-JVM-的标记清除垃圾回收算法的核心理念。我不知道你是否使用-Java-语言，理解-JVM，如果你熟悉，可以在评论区回顾下你理解的标记清除垃圾回收算法。" class="headerlink" title="前面我基于数组的原理引出 JVM 的标记清除垃圾回收算法的核心理念。我不知道你是否使用 Java 语言，理解 JVM，如果你熟悉，可以在评论区回顾下你理解的标记清除垃圾回收算法。"></a>前面我基于数组的原理引出 JVM 的标记清除垃圾回收算法的核心理念。我不知道你是否使用 Java 语言，理解 JVM，如果你熟悉，可以在评论区回顾下你理解的标记清除垃圾回收算法。</h5><p>大多数主流虚拟机采用可达性分析算法来判断对象是否存活，在标记阶段，会遍历所有 GC ROOTS，将所有 GC ROOTS 可达的对象标记为存活。只有当标记工作完成后，清理工作才会开始。</p>
<p>不足：1.效率问题。标记和清理效率都不高，但是当知道只有少量垃圾产生时会很高效。2.空间问题。会产生不连续的内存空间碎片。</p>
<h5 id="前面我们讲到一维数组的内存寻址公式，那你可以思考一下，类比一下，二维数组的内存寻址公式是怎样的呢？"><a href="#前面我们讲到一维数组的内存寻址公式，那你可以思考一下，类比一下，二维数组的内存寻址公式是怎样的呢？" class="headerlink" title="前面我们讲到一维数组的内存寻址公式，那你可以思考一下，类比一下，二维数组的内存寻址公式是怎样的呢？"></a>前面我们讲到一维数组的内存寻址公式，那你可以思考一下，类比一下，二维数组的内存寻址公式是怎样的呢？</h5><p>对于 m * n 的数组，a [ i ][ j ] (i &lt; m,j &lt; n)的地址为：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">address </span>= <span class="hljs-keyword">base_address </span>+ ( i * n + <span class="hljs-keyword">j) </span>* type_size<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>链表（上）</title>
    <url>/2020/08/31/article-32/</url>
    <content><![CDATA[<p>探索链表（上）</p>
<a id="more"></a>

<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>缓存的作用:提高数据读取性能。 缓存设计的好不好，要看自己所设计的缓存的命中率高不高。</p>
<h4 id="缓存的应用场景"><a href="#缓存的应用场景" class="headerlink" title="缓存的应用场景"></a>缓存的应用场景</h4><p>硬件中的缓存: CPU缓存，而cpu缓存又可以分为寄存器，一级缓存，二级缓存，三级缓存。 软件中的缓存: 数据库缓存，数据库本身产品就自带缓存。redis也可以作为数据库缓存. 浏览器缓存，就是我们常说的Cookie,本质上就是一个文件。</p>
<h4 id="缓存淘汰策略"><a href="#缓存淘汰策略" class="headerlink" title="缓存淘汰策略"></a>缓存淘汰策略</h4><p>先进先出策略 FIFO（First In，First Out）、最少使用策略 LFU（Least Frequently Used）、最近最少使用策略 LRU（Least Recently Used）</p>
<p>eg：</p>
<p>FIFO（先进先出调度器） 、Capacity Scheduler（容量调度器）和 Fair Sceduler（公平调度器）。</p>
<h3 id="链表结构"><a href="#链表结构" class="headerlink" title="链表结构"></a>链表结构</h3><p><em>不需要一块连续的内存空间，它通过“指针”将一组<strong>零散的内存块</strong>串联起来使用。</em></p>
<p>对内存要求方面: 数组对内存的要求更高。因为数组需要一块连续内存空间来存放数据。（可能出现的问题就是:内存总的剩余空间足够，但是申请容量较大的数组时申请失败） 链表对内存的要求较低，是因为链表不需要连续的内存空间，只要内存剩余空间足够，无论是否连续，用链表来申请空间一定会成功。 但是要注意:链表虽然方便。但是内存开销比数组大了将近一倍，假设存储100个整数，数组400个字节的存储空间足够了。但是如果用链表存储100个整数，链表得需要800个字节的存储空间，因为链表中的每个节点不止要存储数据，还要存储地址，内存的利用率就比数组低太多了。 由此还可以得出:如果内存容量本身就很小，要存储的数据也比较多。选择数组来存储数据更好，如果内存空间充足，那我们在存储数据的时候到底选择链表还是数组。这个就视具体的业务场景而定了。</p>
<p>三种常见链表结构：单链表， 双链表和循环链表</p>
<h4 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h4><p>习惯性地把第一个结点叫作<strong>头结点</strong>，把最后一个结点叫作<strong>尾结点</strong>。</p>
<p><strong>头结点</strong>用来记录链表的基地址。有了它，我们就可以遍历得到整条链表。</p>
<p><strong>尾结点特殊的地方是</strong>：指针不是指向下一个结点，而是指向一个空地址 NULL，表示这是链表上最后一个结点。</p>
<h5 id="查找、删除和插入"><a href="#查找、删除和插入" class="headerlink" title="查找、删除和插入"></a>查找、删除和插入</h5><p>在链表中插入或者删除一个数据，我们并不需要为了保持内存的连续性而搬移结点，因为链表的存储空间本身就不是连续的。所以，在链表中插入和删除一个数据是非常快速的。</p>
<p>但是，因为链表中的数据并非连续存储的，所以无法像数组那样，根据首地址和下标，通过寻址公式就能直接计算出对应的内存地址，而是需要根据指针一个结点一个结点地依次遍历，直到找到相应的结点。时间复杂度O(n)</p>
<h4 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h4><p>循环链表是一种特殊的单链表</p>
<p>跟单链表唯一的区别就在尾结点。我们知道，单链表的尾结点指针指向空地址，表示这就是最后的结点了。而循环链表的尾结点指针是指向链表的头结点。</p>
<h4 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h4><p>它支持两个方向，每个结点不止有一个后继指针 next 指向后面的结点，还有一个前驱指针 prev 指向前面的结点。双向链表需要额外的两个空间来存储后继结点和前驱结点的地址。</p>
<p>双向链表可以支持 O(1) 时间复杂度的情况下找到前驱结点。</p>
<h4 id="空间换取时间"><a href="#空间换取时间" class="headerlink" title="空间换取时间"></a>空间换取时间</h4><p>当内存空间充足的时候，如果我们更加追求代码的执行速度，我们就可以选择空间复杂度相对较高、但时间复杂度相对很低的算法或者数据结构。</p>
<p>对于执行较慢的程序，可以通过消耗更多的内存（空间换时间）来进行优化；而消耗过多内存的程序，可以通过消耗更多的时间（时间换空间）来降低内存的消耗。</p>
<h3 id="链表-VS-数组"><a href="#链表-VS-数组" class="headerlink" title="链表 VS 数组"></a>链表 VS 数组</h3><p>数组简单易用，在实现上使用的是连续的内存空间，可以借助 CPU 的缓存机制，预读数组中的数据，所以访问效率更高。而链表在内存中并不是连续存储，所以对 CPU 缓存不友好，没办法有效预读。<strong><em>链表本身没有大小的限制，天然地支持动态扩容，这是它与数组最大的区别</em></strong>。</p>
<p>eg：</p>
<p>CPU在从内存读取数据的时候，会先把读取到的数据加载到CPU的缓存中。而CPU每次从内存读取数据并不是只读取那个特定要访问的地址，而是读取一个数据块(这个大小我不太确定。。)并保存到CPU缓存中，然后下次访问内存数据的时候就会先从CPU缓存开始查找，如果找到就不需要再从内存中取。这样就实现了比内存访问速度更快的机制，也就是CPU缓存存在的意义:为了弥补内存访问速度过慢与CPU执行速度快之间的差异而引入。 对于数组来说，存储空间是连续的，所以在加载某个下标的时候可以把以后的几个下标元素也加载到CPU缓存这样执行速度会快于存储空间不连续的链表存储。</p>
<h3 id="如何基于链表实现-LRU-缓存淘汰算法？"><a href="#如何基于链表实现-LRU-缓存淘汰算法？" class="headerlink" title="如何基于链表实现 LRU 缓存淘汰算法？"></a>如何基于链表实现 LRU 缓存淘汰算法？</h3><p>维护一个有序单链表，越靠近链表尾部的结点是越早之前访问的。</p>
<p>当有一个新的数据被访问时，我们从链表头开始顺序遍历链表。</p>
<ol>
<li>如果此数据之前已经被缓存在链表中了，我们遍历得到这个数据对应的结点，并将其从原来的位置删除，然后再插入到链表的头部。</li>
<li>如果此数据没有在缓存链表中，又可以分为两种情况：<ul>
<li>如果此时缓存未满，则将此结点直接插入到链表的头部；</li>
<li>如果此时缓存已满，则链表尾结点删除，将新的数据结点插入链表的头部。</li>
</ul>
</li>
</ol>
<p>思路优化：引入散列表（Hash table）来记录每个数据的位置，将缓存访问的时间复杂度降到 O(1)。</p>
<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><h4 id="如何判断一个字符串是否是回文字符串的问题？"><a href="#如何判断一个字符串是否是回文字符串的问题？" class="headerlink" title="如何判断一个字符串是否是回文字符串的问题？"></a>如何判断一个字符串是否是回文字符串的问题？</h4><p>1 快慢指针定位中间节点<br>2 从中间节点对后半部分逆序<br>3 前后半部分比较，判断是否为回文<br>4 后半部分逆序复原</p>
<p>时间复杂度On, 空间复杂度O1</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>链表（下）</title>
    <url>/2020/08/31/article-33/</url>
    <content><![CDATA[<p>探索链表（下）</p>
<a id="more"></a>

<h3 id="理解指针或引用的含义"><a href="#理解指针或引用的含义" class="headerlink" title="理解指针或引用的含义"></a>理解指针或引用的含义</h3><p>将某个变量赋值给指针，实际上就是将这个变量的地址赋值给指针，或者反过来说，指针中存储了这个<strong><em>变量的内存地址</em></strong>，指向了这个变量，通过指针就能找到这个变量。</p>
<h3 id="警惕指针丢失和内存泄漏"><a href="#警惕指针丢失和内存泄漏" class="headerlink" title="警惕指针丢失和内存泄漏"></a>警惕指针丢失和内存泄漏</h3><p>插入结点时，一定要注意操作的顺序</p>
<p>删除链表结点时，也一定要记得手动释放内存空间（针对C语言）</p>
<h3 id="利用哨兵简化实现难度"><a href="#利用哨兵简化实现难度" class="headerlink" title="利用哨兵简化实现难度"></a>利用哨兵简化实现难度</h3><p>针对链表的插入、删除操作，需要对插入第一个结点和删除最后一个结点的情况进行特殊处理。这样代码实现起来就会很繁琐，不简洁。由此，引入 <strong><em>哨兵</em></strong> 的概念。这里说的哨兵也是解决“<strong><em>边界问题</em></strong>”的，不直接参与业务逻辑。</p>
<p>在任何时候，不管链表是不是空，head 指针都会一直指向这个哨兵结点。我们也把这种有哨兵结点的链表叫带头链表。相反，没有哨兵结点的链表就叫作不带头链表。（相当于在原链表基础上再增加一个“头”节点，该节点不存储任何数据）</p>
<h3 id="重点留意边界条件处理"><a href="#重点留意边界条件处理" class="headerlink" title="重点留意边界条件处理"></a>重点留意边界条件处理</h3><p>经常用来检查链表代码是否正确的边界条件有这样几个：</p>
<ul>
<li>如果链表为空时，代码是否能正常工作？</li>
<li>如果链表只包含一个结点时，代码是否能正常工作？</li>
<li>如果链表只包含两个结点时，代码是否能正常工作？</li>
<li>代码逻辑在处理头结点和尾结点的时候，是否能正常工作？</li>
</ul>
<h3 id="举例画图，辅助思考"><a href="#举例画图，辅助思考" class="headerlink" title="举例画图，辅助思考"></a>举例画图，辅助思考</h3><p>多举例，多画图</p>
<h3 id="多写多练，没有捷径"><a href="#多写多练，没有捷径" class="headerlink" title="多写多练，没有捷径"></a>多写多练，没有捷径</h3><p>5 个常见的链表操作</p>
<ul>
<li>单链表反转</li>
<li>链表中环的检测（快慢指针）</li>
<li>两个有序的链表合并</li>
<li>删除链表倒数第 n 个结点（快慢指针）</li>
<li>求链表的中间结点（快慢指针）</li>
</ul>
<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><h4 id="还能够想到其他场景，利用哨兵可以大大地简化编码难度？"><a href="#还能够想到其他场景，利用哨兵可以大大地简化编码难度？" class="headerlink" title="还能够想到其他场景，利用哨兵可以大大地简化编码难度？"></a>还能够想到其他场景，利用哨兵可以大大地简化编码难度？</h4>]]></content>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>栈</title>
    <url>/2020/08/31/article-34/</url>
    <content><![CDATA[<p>初识栈</p>
<a id="more"></a>

<h3 id="结构特点"><a href="#结构特点" class="headerlink" title="结构特点"></a>结构特点</h3><p>后进先出，先进后出。</p>
<h3 id="如何实现一个“栈”"><a href="#如何实现一个“栈”" class="headerlink" title="如何实现一个“栈”"></a>如何实现一个“栈”</h3><p>用数组实现的栈，我们叫作<strong><em>顺序栈*</em></strong>，用链表实现的栈，我们叫作<strong>链式栈</strong>。*</p>
<h4 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyStack</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span><br>        self.my_stack = []<br>        self.length = <span class="hljs-number">10</span><br>        self.count = <span class="hljs-number">0</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">push</span><span class="hljs-params">(self, value)</span>:</span><br>        <span class="hljs-string">"""</span><br><span class="hljs-string">        入栈</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        """</span><br>        <span class="hljs-comment"># 栈空间已满</span><br>        <span class="hljs-keyword">if</span> self.count == self.length:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>        print(<span class="hljs-string">f"before push, now length is : <span class="hljs-subst">&#123;self.count&#125;</span>"</span>)<br>        self.my_stack.insert(<span class="hljs-number">0</span>, value)<br>        print(<span class="hljs-string">f"push <span class="hljs-subst">&#123;value&#125;</span>"</span>)<br>        self.count += <span class="hljs-number">1</span><br>        print(<span class="hljs-string">f"after push, now length is : <span class="hljs-subst">&#123;self.count&#125;</span>"</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pop</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-string">"""</span><br><span class="hljs-string">        出栈</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        """</span><br>        <span class="hljs-comment"># 栈为空</span><br>        <span class="hljs-keyword">if</span> self.count == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>        print(<span class="hljs-string">f"before pop, now length is : <span class="hljs-subst">&#123;self.count&#125;</span>"</span>)<br>        value = self.my_stack.pop(<span class="hljs-number">0</span>)<br>        print(<span class="hljs-string">f"pop <span class="hljs-subst">&#123;value&#125;</span>"</span>)<br>        self.count -= <span class="hljs-number">1</span><br>        print(<span class="hljs-string">f"after pop, now length is : <span class="hljs-subst">&#123;self.count&#125;</span>"</span>)<br></code></pre></td></tr></table></figure>

<p>时间复杂度 O(1), 空间复杂度 O(1)</p>
<p><strong><em>对于动态扩容顺序栈，其入栈最好时间复杂度为O(1)， 最坏时间复杂度为O(n)，平均时间复杂度O(1)</em></strong></p>
<h3 id="栈在函数调用中的应用"><a href="#栈在函数调用中的应用" class="headerlink" title="栈在函数调用中的应用"></a>栈在函数调用中的应用</h3><p>比较经典的一个应用场景就是<strong><em>函数调用栈</em></strong></p>
<p>我们知道，操作系统给每个线程分配了一块独立的内存空间，这块内存被组织成“栈”这种结构, 用来存储函数调用时的临时变量。每进入一个函数，就会将临时变量作为一个栈帧入栈，当被调用函数执行完成，返回之后，将这个函数对应的栈帧出栈。</p>
<h3 id="栈在表达式求值中的应用"><a href="#栈在表达式求值中的应用" class="headerlink" title="栈在表达式求值中的应用"></a>栈在表达式求值中的应用</h3><p>编译器就是通过两个栈来实现的。其中一个保存操作数的栈，另一个是保存运算符的栈。</p>
<p>我们从左向右遍历表达式，当遇到数字，我们就直接压入操作数栈；当遇到运算符，就与运算符栈的栈顶元素进行比较。如果比运算符栈顶元素的优先级高，就将当前运算符压入栈；如果比运算符栈顶元素的优先级低或者相同，从运算符栈中取栈顶运算符，从操作数栈的栈顶取 2 个操作数，然后进行计算，再把计算完的结果压入操作数栈，继续比较。</p>
<h3 id="栈在括号匹配中的应用"><a href="#栈在括号匹配中的应用" class="headerlink" title="栈在括号匹配中的应用"></a>栈在括号匹配中的应用</h3><p>我们用栈来保存未匹配的左括号，从左到右依次扫描字符串。当扫描到左括号时，则将其压入栈中；当扫描到右括号时，从栈顶取出一个左括号。如果能够匹配，比如“(”跟“)”匹配，“[”跟“]”匹配，“{”跟“}”匹配，则继续扫描剩下的字符串。如果扫描的过程中，遇到不能配对的右括号，或者栈中没有数据，则说明为非法格式。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LegalBracket</span><span class="hljs-params">()</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span><br>        self.bracket_map = &#123;<br>            <span class="hljs-string">")"</span>: <span class="hljs-string">"("</span>,<br>            <span class="hljs-string">"]"</span>: <span class="hljs-string">"["</span>,<br>            <span class="hljs-string">"&#125;"</span>: <span class="hljs-string">"&#123;"</span><br>        &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">is_legal_bracket</span><span class="hljs-params">(self, value)</span>:</span><br>        self.my_stack = []<br><br>        <span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> value:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.my_stack <span class="hljs-keyword">or</span> val <span class="hljs-keyword">in</span> <span class="hljs-string">"([&#123;"</span>:<br>                self.my_stack.insert(<span class="hljs-number">0</span>, val)<br>                <span class="hljs-keyword">continue</span><br><br>            <span class="hljs-keyword">if</span> self.bracket_map[val] == self.my_stack[<span class="hljs-number">0</span>]:<br>                self.my_stack.pop(<span class="hljs-number">0</span>)<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">not</span> bool(self.my_stack)<br></code></pre></td></tr></table></figure>



<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><h4 id="为什么函数调用要用“栈”来保存临时变量呢？用其他数据结构不行吗？"><a href="#为什么函数调用要用“栈”来保存临时变量呢？用其他数据结构不行吗？" class="headerlink" title="为什么函数调用要用“栈”来保存临时变量呢？用其他数据结构不行吗？"></a>为什么函数调用要用“栈”来保存临时变量呢？用其他数据结构不行吗？</h4><p>其实，我们不一定非要用栈来保存临时变量，只不过如果这个函数调用符合后进先出的特性，用栈这种数据结构来实现，是最顺理成章的选择。</p>
<p>从调用函数进入被调用函数，对于数据来说，变化的是什么呢？是作用域。所以根本上，只要能保证每进入一个新的函数，都是一个新的作用域就可以。而要实现这个，用栈就非常方便。在进入被调用函数的时候，分配一段栈空间给这个函数的变量，在函数结束的时候，将栈顶复位，正好回到调用函数的作用域内。</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>队列</title>
    <url>/2020/08/31/article-35/</url>
    <content><![CDATA[<p>初识队列</p>
<a id="more"></a>

<h3 id="结构特点"><a href="#结构特点" class="headerlink" title="结构特点"></a>结构特点</h3><p>先进者先出</p>
<p>队列跟栈一样，也是一种操作受限的线性表数据结构</p>
<h3 id="顺序队列和链式队列"><a href="#顺序队列和链式队列" class="headerlink" title="顺序队列和链式队列"></a>顺序队列和链式队列</h3><p>用数组实现的队列叫作<strong><em>顺序队列*</em></strong>，用链表实现的队列叫作<strong>链式队列</strong>。*</p>
<h4 id="顺序队列"><a href="#顺序队列" class="headerlink" title="顺序队列"></a>顺序队列</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyQueues</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span><br>        self.length = <span class="hljs-number">3</span><br>        self.my_queue = [<span class="hljs-number">0</span>] * self.length<br>        self.head = <span class="hljs-number">0</span><br>        self.tail = <span class="hljs-number">0</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">push</span><span class="hljs-params">(self, val)</span>:</span><br>        <span class="hljs-string">"""</span><br><span class="hljs-string">        入队</span><br><span class="hljs-string">        :param val:</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        """</span><br>        <span class="hljs-keyword">if</span> self.tail == self.length:<br>            <span class="hljs-keyword">if</span> self.head == <span class="hljs-number">0</span>:<br>                self.my_queue = self.my_queue[self.head:] + self.my_queue[:self.head]<br>                self.head = <span class="hljs-number">0</span><br>                self.tail -= self.head<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>        print(<span class="hljs-string">f"before push, now length is <span class="hljs-subst">&#123;self.tail&#125;</span>"</span>)<br>        self.my_queue[self.tail] = val<br>        print(<span class="hljs-string">f"push <span class="hljs-subst">&#123;val&#125;</span>"</span>)<br>        self.tail += <span class="hljs-number">1</span><br>        print(<span class="hljs-string">f"after push, now length is <span class="hljs-subst">&#123;self.tail&#125;</span>"</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pop</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-string">"""</span><br><span class="hljs-string">        出队</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        """</span><br>        <span class="hljs-keyword">if</span> self.head == self.tail:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>        print(<span class="hljs-string">f"before pop, now head is <span class="hljs-subst">&#123;self.head&#125;</span>"</span>)<br>        val, self.my_queue[self.head] = self.my_queue[self.head], <span class="hljs-number">0</span><br>        print(<span class="hljs-string">f"pop <span class="hljs-subst">&#123;val&#125;</span>"</span>)<br>        self.head += <span class="hljs-number">1</span><br>        print(<span class="hljs-string">f"after pop, now head is <span class="hljs-subst">&#123;self.head&#125;</span>"</span>)<br></code></pre></td></tr></table></figure>

<h4 id="链式队列"><a href="#链式队列" class="headerlink" title="链式队列"></a>链式队列</h4><h4 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h4><p>避免数据搬移，最关键的是，确定好队空和队满的判定条件。</p>
<p>队列为空：head == tail</p>
<p>队列已满：(tail + 1) % length == head</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCircleQueue</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span><br>        self.length = <span class="hljs-number">3</span><br>        self.my_circle_queue = [<span class="hljs-number">0</span>] * self.length<br>        self.head = <span class="hljs-number">0</span><br>        self.tail = <span class="hljs-number">0</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">push</span><span class="hljs-params">(self, value)</span>:</span><br>        <span class="hljs-string">"""</span><br><span class="hljs-string">        入队</span><br><span class="hljs-string">        :param value:</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        """</span><br>        <span class="hljs-keyword">if</span> self.head == self.tail:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>        print(<span class="hljs-string">f"before push, queue is <span class="hljs-subst">&#123;self.my_circle_queue&#125;</span>"</span>)<br>        self.my_circle_queue[self.tail] = value<br>        print(<span class="hljs-string">f"push <span class="hljs-subst">&#123;value&#125;</span>"</span>)<br>        self.tail = (self.tail + <span class="hljs-number">1</span>) % self.length<br>        print(<span class="hljs-string">f"after push, queue is <span class="hljs-subst">&#123;self.my_circle_queue&#125;</span>"</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pop</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-string">"""</span><br><span class="hljs-string">        出队</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        """</span><br>        <span class="hljs-keyword">if</span> (self.tail + <span class="hljs-number">1</span>) % self.length == self.head:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>        print(<span class="hljs-string">f"before pop, queue is <span class="hljs-subst">&#123;self.my_circle_queue&#125;</span>"</span>)<br>        value, self.my_circle_queue[self.head] = self.my_circle_queue[self.head], <span class="hljs-number">0</span><br>        print(<span class="hljs-string">f"pop <span class="hljs-subst">&#123;value&#125;</span>"</span>)<br>        self.head = (self.head + <span class="hljs-number">1</span>) % self.length<br>        print(<span class="hljs-string">f"after pop, queue is <span class="hljs-subst">&#123;self.my_circle_queue&#125;</span>"</span>)<br></code></pre></td></tr></table></figure>



<h4 id="阻塞队列和并发队列"><a href="#阻塞队列和并发队列" class="headerlink" title="阻塞队列和并发队列"></a>阻塞队列和并发队列</h4><p><strong><em>阻塞队列</em></strong> 其实就是在队列基础上增加了阻塞操作。简单来说，就是在队列为空的时候，从队头取数据会被阻塞。因为此时还没有数据可取，直到队列中有了数据才能返回；如果队列已经满了，那么插入数据的操作就会被阻塞，直到队列中有空闲位置后再插入数据，然后再返回。</p>
<p>可以使用队列实现一个 <strong><em>生产者-&gt;消费者</em></strong> 模型。</p>
<p>线程安全的队列我们叫作<strong><em>并发队列</em></strong>。最简单直接的实现方式是直接在 enqueue()、dequeue() 方法上加锁，但是锁粒度大并发度会比较低，同一时刻仅允许一个存或者取操作。实际上，<strong><em>基于数组的循环队列，利用 CAS 原子操作，可以实现非常高效的并发队列</em></strong>。这也是循环队列比链式队列应用更加广泛的原因。</p>
<h3 id="线程池没有空闲线程时，新的任务请求线程资源时，线程池该如何处理？各种处理策略又是如何实现的呢？"><a href="#线程池没有空闲线程时，新的任务请求线程资源时，线程池该如何处理？各种处理策略又是如何实现的呢？" class="headerlink" title="线程池没有空闲线程时，新的任务请求线程资源时，线程池该如何处理？各种处理策略又是如何实现的呢？"></a>线程池没有空闲线程时，新的任务请求线程资源时，线程池该如何处理？各种处理策略又是如何实现的呢？</h3><p>我们一般有两种处理策略。第一种是非阻塞的处理方式，直接拒绝任务请求；另一种是阻塞的处理方式，将请求排队，等到有空闲线程时，取出排队的请求继续处理。那如何存储排队的请求呢？</p>
<p>我们希望公平地处理每个排队的请求，先进者先服务，所以队列这种数据结构很适合来存储排队请求。我们前面说过，队列有基于链表和基于数组这两种实现方式。这两种实现方式对于排队请求又有什么区别呢？</p>
<p>基于链表的实现方式，可以实现一个支持无限排队的无界队列（unbounded queue），但是可能会导致过多的请求排队等待，请求处理的响应时间过长。所以，针对响应时间比较敏感的系统，基于链表实现的无限排队的线程池是不合适的。</p>
<p>而基于数组实现的有界队列（bounded queue），队列的大小有限，所以线程池中排队的请求超过队列大小时，接下来的请求就会被拒绝，这种方式对响应时间敏感的系统来说，就相对更加合理。</p>
<p>不过，设置一个合理的队列大小，也是非常有讲究的。队列太大导致等待的请求太多，队列太小会导致无法充分利用系统资源、发挥最大性能。除了前面讲到队列应用在线程池请求排队的场景之外，队列可以应用在任何有限资源池中，用于排队请求，比如数据库连接池等。实际上，对于大部分资源有限的场景，当没有空闲资源时，基本上都可以通过“队列”这种数据结构来实现请求排队。</p>
<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><h4 id="除了线程池这种池结构会用到队列排队请求，你还知道有哪些类似的池结构或者场景中会用到队列的排队请求呢？"><a href="#除了线程池这种池结构会用到队列排队请求，你还知道有哪些类似的池结构或者场景中会用到队列的排队请求呢？" class="headerlink" title="除了线程池这种池结构会用到队列排队请求，你还知道有哪些类似的池结构或者场景中会用到队列的排队请求呢？"></a>除了线程池这种池结构会用到队列排队请求，你还知道有哪些类似的池结构或者场景中会用到队列的排队请求呢？</h4><p>分布式应用中的消息队列，也是一种队列结构</p>
<h4 id="今天讲到并发队列，关于如何实现无锁并发队列，网上有非常多的讨论。对这个问题，你怎么看呢？"><a href="#今天讲到并发队列，关于如何实现无锁并发队列，网上有非常多的讨论。对这个问题，你怎么看呢？" class="headerlink" title="今天讲到并发队列，关于如何实现无锁并发队列，网上有非常多的讨论。对这个问题，你怎么看呢？"></a>今天讲到并发队列，关于如何实现无锁并发队列，网上有非常多的讨论。对这个问题，你怎么看呢？</h4><p>考虑使用CAS实现无锁队列，则在入队前，获取tail位置，入队时比较tail是否发生变化，如果否，则允许入队，反之，本次入队失败。出队则是获取head位置，进行cas。</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>递归</title>
    <url>/2020/08/31/article-36/</url>
    <content><![CDATA[<p>有趣的递归思想</p>
<a id="more"></a>

<h3 id="什么是递归"><a href="#什么是递归" class="headerlink" title="什么是递归"></a>什么是递归</h3><p>去的过程叫“递”，回来的过程叫“归”。基本上，所有的递归问题都可以用递推公式来表示。</p>
<h3 id="递归需要满足的三个条件"><a href="#递归需要满足的三个条件" class="headerlink" title="递归需要满足的三个条件"></a>递归需要满足的三个条件</h3><h4 id="1、一个问题的解可以分解为几个子问题的解"><a href="#1、一个问题的解可以分解为几个子问题的解" class="headerlink" title="1、一个问题的解可以分解为几个子问题的解"></a>1、一个问题的解可以分解为几个子问题的解</h4><p>子问题就是数据规模更小的问题。</p>
<h4 id="2、这个问题与分解之后的子问题，除了数据规模不同，求解思路完全一样"><a href="#2、这个问题与分解之后的子问题，除了数据规模不同，求解思路完全一样" class="headerlink" title="2、这个问题与分解之后的子问题，除了数据规模不同，求解思路完全一样"></a>2、这个问题与分解之后的子问题，除了数据规模不同，求解思路完全一样</h4><h4 id="3、存在递归终止条件"><a href="#3、存在递归终止条件" class="headerlink" title="3、存在递归终止条件"></a>3、存在递归终止条件</h4><p>跳出无限循环的条件</p>
<h3 id="如何编写递归代码？"><a href="#如何编写递归代码？" class="headerlink" title="如何编写递归代码？"></a>如何编写递归代码？</h3><p>关键的是<strong><em>写出递推公式，找到终止条件</em></strong></p>
<p><strong><em>总体思路</em></strong>：找到如何将大问题分解为小问题的规律，并且基于此写出递推公式，然后再推敲终止条件，最后将递推公式和终止条件翻译成代码。</p>
<p>遇到递归，我们就把它抽象成一个递推公式，不用想一层层的调用关系，不要试图用人脑去分解递归的每个步骤。</p>
<h3 id="警惕点"><a href="#警惕点" class="headerlink" title="警惕点"></a>警惕点</h3><h4 id="递归代码要警惕堆栈溢出"><a href="#递归代码要警惕堆栈溢出" class="headerlink" title="递归代码要警惕堆栈溢出"></a>递归代码要警惕堆栈溢出</h4><p>每调用一个函数，都会将临时变量封装为栈帧压入内存栈，等函数执行完成返回时，才出栈。系统栈或者虚拟机栈空间一般都不大。如果递归求解的数据规模很大，调用层次很深，一直压入栈，就会有堆栈溢出的风险。</p>
<h4 id="递归代码要警惕重复计算"><a href="#递归代码要警惕重复计算" class="headerlink" title="递归代码要警惕重复计算"></a>递归代码要警惕重复计算</h4><p>为了避免重复计算，我们可以通过一个数据结构（比如散列表）来保存已经求解过的 f(k)</p>
<h3 id="台阶问题"><a href="#台阶问题" class="headerlink" title="台阶问题"></a>台阶问题</h3><p>假如这里有 n 个台阶，每次你可以跨 1 个台阶或者 2 个台阶，请问走这 n 个台阶有多少种走法？如果有 7 个台阶，你可以 2，2，2，1 这样子上去，也可以 1，2，1，1，2 这样子上去，总之走法有很多，那如何用编程求得总共有多少种走法呢？</p>
<h4 id="递归解法"><a href="#递归解法" class="headerlink" title="递归解法"></a>递归解法</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FootstepCountNew</span>:</span><br>    <span class="hljs-string">"""</span><br><span class="hljs-string">    优化重复计算</span><br><span class="hljs-string">    """</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span><br>        self.mykeys = &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span><span class="hljs-params">(self, n)</span>:</span><br>        <span class="hljs-keyword">if</span> n == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">if</span> n == <span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br><br>        <span class="hljs-keyword">if</span> n <span class="hljs-keyword">in</span> self.mykeys:<br>            <span class="hljs-keyword">return</span> self.mykeys[n]<br><br>        result = self.run(n<span class="hljs-number">-1</span>) + self.run(n<span class="hljs-number">-2</span>)<br>        self.mykeys[n] = result<br>        <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure>

<h4 id="非递归解法"><a href="#非递归解法" class="headerlink" title="非递归解法"></a>非递归解法</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">f1</span><span class="hljs-params">(n)</span>:</span><br>    a = <span class="hljs-number">0</span><br>    b = <span class="hljs-number">1</span><br>    output = []<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n):<br>        b, a = a+b, b<br>        output.append(b)<br><br>    print(output)<br>    print(b)<br></code></pre></td></tr></table></figure>



<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><h4 id="我们平时调试代码喜欢使用-IDE-的单步跟踪功能，像规模比较大、递归层次很深的递归代码，几乎无法使用这种调试方式。对于递归代码，你有什么好的调试方法呢？"><a href="#我们平时调试代码喜欢使用-IDE-的单步跟踪功能，像规模比较大、递归层次很深的递归代码，几乎无法使用这种调试方式。对于递归代码，你有什么好的调试方法呢？" class="headerlink" title="我们平时调试代码喜欢使用 IDE 的单步跟踪功能，像规模比较大、递归层次很深的递归代码，几乎无法使用这种调试方式。对于递归代码，你有什么好的调试方法呢？"></a>我们平时调试代码喜欢使用 IDE 的单步跟踪功能，像规模比较大、递归层次很深的递归代码，几乎无法使用这种调试方式。对于递归代码，你有什么好的调试方法呢？</h4><ul>
<li>打印日志发现，递归值。</li>
<li>结合条件断点进行调试。</li>
</ul>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>排序（上）- 冒泡、插入和选择</title>
    <url>/2020/09/01/article-37/</url>
    <content><![CDATA[<p>冒泡、插入和选择</p>
<a id="more"></a>

<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>最经典的、最常用的：冒泡排序、插入排序、选择排序、归并排序、快速排序、计数排序、基数排序、桶排序。</p>
<h3 id="分为三类"><a href="#分为三类" class="headerlink" title="分为三类"></a>分为三类</h3><h4 id="冒泡排序、插入排序、选择排序"><a href="#冒泡排序、插入排序、选择排序" class="headerlink" title="冒泡排序、插入排序、选择排序"></a>冒泡排序、插入排序、选择排序</h4><p>时间复杂度O(n^2), 基于比较</p>
<h4 id="归并排序、快速排序"><a href="#归并排序、快速排序" class="headerlink" title="归并排序、快速排序"></a>归并排序、快速排序</h4><p>时间复杂度O(nlogn), 基于比较</p>
<h4 id="计数排序、基数排序、桶排序"><a href="#计数排序、基数排序、桶排序" class="headerlink" title="计数排序、基数排序、桶排序"></a>计数排序、基数排序、桶排序</h4><p>时间复杂度O(n), 不基于比较</p>
<h3 id="如何分析一个“排序算法”？"><a href="#如何分析一个“排序算法”？" class="headerlink" title="如何分析一个“排序算法”？"></a>如何分析一个“排序算法”？</h3><h4 id="排序算法的执行效率"><a href="#排序算法的执行效率" class="headerlink" title="排序算法的执行效率"></a>排序算法的执行效率</h4><h6 id="最好情况、最坏情况、平均情况时间复杂度"><a href="#最好情况、最坏情况、平均情况时间复杂度" class="headerlink" title="最好情况、最坏情况、平均情况时间复杂度"></a>最好情况、最坏情况、平均情况时间复杂度</h6><h6 id="时间复杂度的系数、常数-、低阶"><a href="#时间复杂度的系数、常数-、低阶" class="headerlink" title="时间复杂度的系数、常数 、低阶"></a>时间复杂度的系数、常数 、低阶</h6><h6 id="比较次数和交换（或移动）次数"><a href="#比较次数和交换（或移动）次数" class="headerlink" title="比较次数和交换（或移动）次数"></a>比较次数和交换（或移动）次数</h6><h4 id="排序算法的内存消耗"><a href="#排序算法的内存消耗" class="headerlink" title="排序算法的内存消耗"></a>排序算法的内存消耗</h4><p>我们前面讲过，算法的内存消耗可以通过空间复杂度来衡量，排序算法也不例外。不过，针对排序算法的空间复杂度，我们还引入了一个新的概念，原地排序（Sorted in place）。原地排序算法，就是特指空间复杂度是 O(1) 的排序算法。</p>
<h4 id="排序算法的稳定性"><a href="#排序算法的稳定性" class="headerlink" title="排序算法的稳定性"></a>排序算法的稳定性</h4><p>这个概念是说，如果待排序的序列中存在值相等的元素，经过排序之后，相等元素之间原有的先后顺序不变。</p>
<h3 id="冒泡排序（Bubble-Sort）"><a href="#冒泡排序（Bubble-Sort）" class="headerlink" title="冒泡排序（Bubble Sort）"></a>冒泡排序（Bubble Sort）</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">arrays = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bubble_sort</span><span class="hljs-params">(arrays)</span>:</span><br>    length = len(arrays)<br>    <span class="hljs-keyword">if</span> length &lt; <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">return</span> arrays<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(length):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(length-i<span class="hljs-number">-1</span>):<br>            <span class="hljs-keyword">if</span> arrays[j+<span class="hljs-number">1</span>] &lt; arrays[j]:<br>                arrays[j+<span class="hljs-number">1</span>], arrays[j] = arrays[j], arrays[j+<span class="hljs-number">1</span>]<br><br>    print(arrays)<br></code></pre></td></tr></table></figure>

<h6 id="冒泡排序是原地排序，空间复杂度为O-1"><a href="#冒泡排序是原地排序，空间复杂度为O-1" class="headerlink" title="冒泡排序是原地排序，空间复杂度为O(1)"></a>冒泡排序是原地排序，空间复杂度为O(1)</h6><h6 id="当相邻两元素相等时不做交换时为稳定排序"><a href="#当相邻两元素相等时不做交换时为稳定排序" class="headerlink" title="当相邻两元素相等时不做交换时为稳定排序"></a>当相邻两元素相等时不做交换时为稳定排序</h6><h4 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h4><p>最好时间复杂度为O(n), 最坏时间复杂度为O(n^2)</p>
<h5 id="平均时间复杂度"><a href="#平均时间复杂度" class="headerlink" title="平均时间复杂度"></a>平均时间复杂度</h5><p>又称加权平均期望复杂度。</p>
<p>如果用概率论方法定量分析平均时间复杂度，涉及的数学推理和计算就会很复杂。我这里还有一种思路，通过“<strong><em>有序度</em></strong>”和“<strong><em>逆序度</em></strong>”这两个概念来进行分析。</p>
<p><strong><em>有序度</em></strong>是数组中具有有序关系的元素对的个数。其数学表达式为：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><code class="hljs matlab">有序元素对：a[<span class="hljs-built_in">i</span>] &lt;= a[<span class="hljs-built_in">j</span>], 如果<span class="hljs-built_in">i</span> &lt; <span class="hljs-built_in">j</span>。<br></code></pre></td></tr></table></figure>

<p>完全有序的数组，其有序度为:</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">n</span><span class="hljs-params">(n-<span class="hljs-number">1</span>)</span></span> / <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure>

<p>完全有序的数组的有序度叫作<strong><em>满有序度</em></strong></p>
<p>逆序度的定义正好跟有序度相反。</p>
<p>三者的关系</p>
<p><strong><em>满有序度 = 有序度 + 逆序度</em></strong></p>
<p>我们排序的过程就是一种增加有序度，减少逆序度的过程，最后达到满有序度，就说明排序完成了。</p>
<p>所以冒泡排序的平均时间复杂度为O(n^2)</p>
<h3 id="插入排序（Insertion-Sort）"><a href="#插入排序（Insertion-Sort）" class="headerlink" title="插入排序（Insertion Sort）"></a>插入排序（Insertion Sort）</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">arrays = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>]<br><br><span class="hljs-comment"># 插入排序</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">insertionsort</span><span class="hljs-params">(arrays)</span>:</span><br>    length = len(arrays)<br><br>    <span class="hljs-keyword">if</span> length &lt; <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">return</span> arrays<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, length):<br>        j = i - <span class="hljs-number">1</span><br>        val = arrays[i]<br><br>        <span class="hljs-keyword">while</span> j &gt;= <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> arrays[j] &gt; val:<br>            arrays[j+<span class="hljs-number">1</span>] = arrays[j]<br>            j -= <span class="hljs-number">1</span><br><br>        arrays[j+<span class="hljs-number">1</span>] = val<br><br>    print(arrays)<br></code></pre></td></tr></table></figure>

<h6 id="冒泡排序是原地排序，空间复杂度为O-1-1"><a href="#冒泡排序是原地排序，空间复杂度为O-1-1" class="headerlink" title="冒泡排序是原地排序，空间复杂度为O(1)"></a>冒泡排序是原地排序，空间复杂度为O(1)</h6><h6 id="当相邻两元素相等时不做交换时为稳定排序-1"><a href="#当相邻两元素相等时不做交换时为稳定排序-1" class="headerlink" title="当相邻两元素相等时不做交换时为稳定排序"></a>当相邻两元素相等时不做交换时为稳定排序</h6><h6 id="最好时间复杂度O-n-最坏时间复杂度O-n-2-平均时间复杂度O-n-2"><a href="#最好时间复杂度O-n-最坏时间复杂度O-n-2-平均时间复杂度O-n-2" class="headerlink" title="最好时间复杂度O(n), 最坏时间复杂度O(n^2), 平均时间复杂度O(n^2)"></a>最好时间复杂度O(n), 最坏时间复杂度O(n^2), 平均时间复杂度O(n^2)</h6><h3 id="选择排序（Selection-Sort）"><a href="#选择排序（Selection-Sort）" class="headerlink" title="选择排序（Selection Sort）"></a>选择排序（Selection Sort）</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 选择排序</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">selectionsort</span><span class="hljs-params">(arrays)</span>:</span><br>    length = len(arrays)<br><br>    <span class="hljs-keyword">if</span> len(arrays) &lt; <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">return</span> arrays<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(length):<br>        min_val = arrays[i]<br>        min_idx = i<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(i+<span class="hljs-number">1</span>, length):<br>            <span class="hljs-keyword">if</span> arrays[j] &lt; min_val:<br>                min_val = arrays[j]<br>                min_idx = j<br><br>        <span class="hljs-keyword">if</span> min_idx != i:<br>            arrays[i], arrays[min_idx] = arrays[min_idx], arrays[i]<br><br>    print(arrays)<br></code></pre></td></tr></table></figure>

<h6 id="空间复杂度-O-1"><a href="#空间复杂度-O-1" class="headerlink" title="空间复杂度 O(1)"></a>空间复杂度 O(1)</h6><h6 id="不稳定排序"><a href="#不稳定排序" class="headerlink" title="不稳定排序"></a>不稳定排序</h6><h6 id="最好时间复杂度O-n-2-最坏时间复杂度O-n-2-，平均时间复杂度O-n-2"><a href="#最好时间复杂度O-n-2-最坏时间复杂度O-n-2-，平均时间复杂度O-n-2" class="headerlink" title="最好时间复杂度O(n^2), 最坏时间复杂度O(n^2)，平均时间复杂度O(n^2)"></a>最好时间复杂度O(n^2), 最坏时间复杂度O(n^2)，平均时间复杂度O(n^2)</h6><h3 id="为什么插入排序要比冒泡排序更受欢迎呢"><a href="#为什么插入排序要比冒泡排序更受欢迎呢" class="headerlink" title="为什么插入排序要比冒泡排序更受欢迎呢"></a>为什么插入排序要比冒泡排序更受欢迎呢</h3><p>因为冒泡排序需要两个位置进行数据交换，对于C语言这种就需要三个变量进行操作；但插入排序，只需要将数据后移，可以省略交换的操作。假设赋值语句时时间是K，那么冒泡排序需要的就是3K，而插入排序就是K，差距显而易见。</p>
<p>另外，<strong><em>希尔排序</em></strong> 是对插入排序的优化。</p>
<h3 id="内容小结"><a href="#内容小结" class="headerlink" title="内容小结"></a>内容小结</h3><p>冒泡、插入和选择对于小规模数据非常高效，但当数据规模很大时，就不再适用了。</p>
<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><h4 id="数据存储在链表中，这三种排序算法还能工作吗？如果能，那相应的时间、空间复杂度又是多少呢？"><a href="#数据存储在链表中，这三种排序算法还能工作吗？如果能，那相应的时间、空间复杂度又是多少呢？" class="headerlink" title="数据存储在链表中，这三种排序算法还能工作吗？如果能，那相应的时间、空间复杂度又是多少呢？"></a>数据存储在链表中，这三种排序算法还能工作吗？如果能，那相应的时间、空间复杂度又是多少呢？</h4><p>考虑只能改变节点位置，冒泡排序相比于数组实现，比较次数一致，但交换时操作更复杂；插入排序，比较次数一致，不需要再有后移操作，找到位置后可以直接插入，但排序完毕后可能需要倒置链表；选择排序比较次数一致，交换操作同样比较麻烦。综上，时间复杂度和空间复杂度并无明显变化，若追求极致性能，冒泡排序的时间复杂度系数会变大，插入排序系数会减小，选择排序无明显变化。</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>排序（下）- 归并和快排</title>
    <url>/2020/09/01/article-38/</url>
    <content><![CDATA[<p>归并排序和快速排序</p>
<a id="more"></a>

<h3 id="归并排序（Merge-Sort）"><a href="#归并排序（Merge-Sort）" class="headerlink" title="归并排序（Merge Sort）"></a>归并排序（Merge Sort）</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>把数组从中间分成前后两部分，然后对前后两部分分别排序，再将排好序的两部分合并在一起，这样整个数组就都有序了。利用分治法的思想，和递归的编程技巧。</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 方法一</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">merge</span><span class="hljs-params">(arrays, l, mid, r)</span>:</span><br>    output = []<br>    i = l<br>    j = mid + <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">while</span> i &lt;= mid <span class="hljs-keyword">and</span> j &lt;= r:<br>        <span class="hljs-keyword">if</span> arrays[i] &lt;= arrays[j]:<br>            output.append(arrays[i])<br>            i += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            output.append(arrays[j])<br>            j += <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> arrays[i:mid+<span class="hljs-number">1</span>] + arrays[j:r+<span class="hljs-number">1</span>]:<br>        output.append(k)<br><br>    <span class="hljs-keyword">for</span> idx <span class="hljs-keyword">in</span> range(len(output)):<br>        arrays[l+idx] = output[idx]<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mergesort</span><span class="hljs-params">(arrays, l, r)</span>:</span><br><br>    <span class="hljs-keyword">if</span> l &lt; r:<br>        mid = l + ((r - l) &gt;&gt; <span class="hljs-number">1</span>)<br>        mergesort(arrays, l, mid)<br>        mergesort(arrays, mid + <span class="hljs-number">1</span>, r)<br>        merge(arrays, l, mid, r)<br></code></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 方法二</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">merge</span><span class="hljs-params">(arrays, arr1, arr2)</span>:</span><br>    i = j = <span class="hljs-number">0</span><br>    length = len(arrays)<br><br>    <span class="hljs-keyword">while</span> i+j&lt;length:<br>        <span class="hljs-keyword">if</span> j == len(arr2) <span class="hljs-keyword">or</span> (i &lt; len(arr1) <span class="hljs-keyword">and</span> arr1[i] &lt;= arr2[j]):<br>            arrays[i+j] = arr1[i]<br>            i += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            arrays[i+j] = arr2[j]<br>            j += <span class="hljs-number">1</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(arrays)</span>:</span><br>    length = len(arrays)<br><br>    <span class="hljs-keyword">if</span> length &lt; <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">return</span> arrays<br><br>    mid = length // <span class="hljs-number">2</span><br>    arr1 = arrays[:mid]<br>    arr2 = arrays[mid:]<br><br>    merge_sort(arr1)<br>    merge_sort(arr2)<br><br>    merge(arrays, arr1, arr2)<br></code></pre></td></tr></table></figure>

<h4 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h4><h6 id="构造合理的merge函数，可以使得归并排序成为稳定排序"><a href="#构造合理的merge函数，可以使得归并排序成为稳定排序" class="headerlink" title="构造合理的merge函数，可以使得归并排序成为稳定排序"></a>构造合理的merge函数，可以使得归并排序成为稳定排序</h6><h6 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h6><p>设b，c是a的子问题，由此可得到一下公式：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">T(<span class="hljs-params">a</span>)</span> = <span class="hljs-constructor">T(<span class="hljs-params">b</span>)</span> + <span class="hljs-constructor">T(<span class="hljs-params">c</span>)</span> + K<br># 其中 K 等于将两个子问题 b、c 的结果合并成问题 a 的结果所消耗的时间<br></code></pre></td></tr></table></figure>

<p>可以得到一个重要的结论：<strong><em>不仅递归求解的问题可以写成递推公式，递归代码的时间复杂度也可以写成递推公式</em></strong>。</p>
<p>最终递推公式为：<strong><em>T(n) = 2^kT(n/2^k)+kn</em></strong></p>
<p>所以，<strong><em>归并排序的时间复杂度为nlogn</em></strong></p>
<h6 id="空间复杂度O-n"><a href="#空间复杂度O-n" class="headerlink" title="空间复杂度O(n)"></a>空间复杂度O(n)</h6><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><p>如果要排序数组中下标从 p 到 r 之间的一组数据，我们选择 p 到 r 之间的任意一个数据作为 pivot（分区点）。我们遍历 p 到 r 之间的数据，将小于 pivot 的放到左边，将大于 pivot 的放到右边，将 pivot 放到中间。经过这一步骤之后，数组 p 到 r 之间的数据就被分成了三个部分，前面 p 到 q-1 之间都是小于 pivot 的，中间是 pivot，后面的 q+1 到 r 之间是大于 pivot 的。</p>
<p>根据分治、递归的处理思想，我们可以用递归排序下标从 p 到 q-1 之间的数据和下标从 q+1 到 r 之间的数据，直到区间缩小为 1，就说明所有的数据都有序了。</p>
<h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 快速排序</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">partition</span><span class="hljs-params">(arrays, l, r)</span>:</span><br>    val = arrays[r]<br>    idx = l - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(l, r):<br>        <span class="hljs-keyword">if</span> arrays[i] &lt;= val:<br>            idx += <span class="hljs-number">1</span><br>            arrays[idx], arrays[i] = arrays[i], arrays[idx]<br><br>    arrays[idx+<span class="hljs-number">1</span>], arrays[r] = arrays[r], arrays[idx+<span class="hljs-number">1</span>]<br><br>    <span class="hljs-keyword">return</span> idx+<span class="hljs-number">1</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(arrays, l, r)</span>:</span><br>    <span class="hljs-comment"># 分区区间小于1时退出</span><br>    <span class="hljs-keyword">if</span> l&lt;r:<br>        idx = partition(arrays, l, r)<br>        quick_sort(arrays, l, idx<span class="hljs-number">-1</span>)<br>        quick_sort(arrays, idx+<span class="hljs-number">1</span>, r)<br></code></pre></td></tr></table></figure>

<h4 id="与归并排序区别"><a href="#与归并排序区别" class="headerlink" title="与归并排序区别"></a>与归并排序区别</h4><p>归并排序的处理过程是<strong><em>由下到上</em></strong>的，先处理子问题，然后再合并。而快排正好相反，它的处理过程是<strong><em>由上到下</em></strong>的，先分区，然后再处理子问题。</p>
<h4 id="性能分析-1"><a href="#性能分析-1" class="headerlink" title="性能分析"></a>性能分析</h4><p>最坏时间复杂度O(n^2)，平均复杂度O(nlogn)</p>
<h3 id="内容小结"><a href="#内容小结" class="headerlink" title="内容小结"></a>内容小结</h3><p>归并排序算法是一种在任何情况下时间复杂度都比较稳定的排序算法，这也使它存在致命的缺点，即归并排序不是原地排序算法，空间复杂度比较高，是 O(n)。</p>
<p>快速排序算法虽然最坏情况下的时间复杂度是 O(n2)，但是平均情况下时间复杂度都是 O(nlogn)。不仅如此，快速排序算法时间复杂度退化到 O(n2) 的概率非常小，我们可以通过合理地选择 pivot 来避免这种情况。</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>线性排序</title>
    <url>/2020/09/01/article-39/</url>
    <content><![CDATA[<p>桶排序、计数排序、基数排序。因为这些排序算法的时间复杂度是线性的，所以我们把这类排序算法叫作线性排序。</p>
<a id="more"></a>

<h3 id="桶排序（Bucket-sort）"><a href="#桶排序（Bucket-sort）" class="headerlink" title="桶排序（Bucket sort）"></a>桶排序（Bucket sort）</h3><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bucket_sort</span><span class="hljs-params">(arrays)</span>:</span><br>    length = len(arrays)<br>    bucket_num = <span class="hljs-number">5</span><br>    min_num = arrays[<span class="hljs-number">0</span>]<br>    max_num = arrays[<span class="hljs-number">0</span>]<br>    output = []<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, length):<br>        <span class="hljs-keyword">if</span> arrays[i] &lt; min_num:<br>            min_num = arrays[i]<br>        <span class="hljs-keyword">elif</span> arrays[i] &gt; max_num:<br>            max_num = arrays[i]<br><br>    buckets_size = (max_num - min_num + <span class="hljs-number">1</span>) // bucket_num<br>    bucket_lists = [[] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(buckets_size)]<br><br>    <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> arrays:<br>        idx = (num-min_num) // buckets_size<br>        bucket_lists[idx].append(num)<br><br>    <span class="hljs-keyword">for</span> bucket <span class="hljs-keyword">in</span> bucket_lists:<br>      	<span class="hljs-comment"># 使用快排对桶内数组进行排序</span><br>        quick_sort(bucket, <span class="hljs-number">0</span>, len(bucket)<span class="hljs-number">-1</span>)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> bucket_lists:<br>        output.extend(i)<br><br>    print(output)<br></code></pre></td></tr></table></figure>

<h4 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h4><p>要排序的数据需要很容易就能划分成 m 个桶，并且，桶与桶之间有着天然的大小顺序。在极端情况下，如果数据都被划分到一个桶里，那就退化为 O(nlogn) 的排序算法了。</p>
<h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><p>桶排序比较<strong><em>适合用在外部排序中</em></strong>。所谓的外部排序就是数据存储在外部磁盘中，数据量比较大，内存有限，无法将数据全部加载到内存中。</p>
<h3 id="计数排序（Counting-sort）"><a href="#计数排序（Counting-sort）" class="headerlink" title="计数排序（Counting sort）"></a>计数排序（Counting sort）</h3><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>一种特殊的桶排序。当要排序的 n 个数据，所处的范围并不大的时候，比如最大值是 k，我们就可以把数据划分成 k 个桶。</p>
<h4 id="“计数”的含义"><a href="#“计数”的含义" class="headerlink" title="“计数”的含义"></a>“计数”的含义</h4><p>利用另一个数组C记录小于等于当前桶值的数量，然后倒序遍历待排序数组A，然后根据数组C中对应的值确定当前值的位置，最后数组C对应数量减一，直至为零，往复循环。</p>
<h4 id="局限性-1"><a href="#局限性-1" class="headerlink" title="局限性"></a>局限性</h4><p>计数排序只能用在数据范围不大的场景中，如果数据范围 k 比要排序的数据 n 大很多，就不适合用计数排序了。而且，计数排序只能给非负整数排序，如果要排序的数据是其他类型的，要将其在不改变相对大小的情况下，转化为非负整数。</p>
<h3 id="基数排序（Radix-sort）"><a href="#基数排序（Radix-sort）" class="headerlink" title="基数排序（Radix sort）"></a>基数排序（Radix sort）</h3><p>以手机号排序为例（长度一致），需从末尾开始遍历然后递进排序。</p>
<h4 id="局限性-2"><a href="#局限性-2" class="headerlink" title="局限性"></a>局限性</h4><p>基数排序对要排序的数据是有要求的，需要可以分割出独立的“位”来比较，而且位之间有递进的关系，如果 a 数据的高位比 b 数据大，那剩下的低位就不用比较了。除此之外，每一位的数据范围不能太大，要可以用线性排序算法来排序，否则，基数排序的时间复杂度就无法做到 O(n) 了</p>
<h3 id="内容小结"><a href="#内容小结" class="headerlink" title="内容小结"></a>内容小结</h3><p>桶排序和计数排序的排序思想是非常相似的，都是针对范围不大的数据，将数据划分成不同的桶来实现排序。基数排序要求数据可以划分成高低位，位之间有递进关系。比较两个数，我们只需要比较高位，高位相同的再比较低位。而且每一位的数据范围不能太大，因为基数排序算法需要借助桶排序或者计数排序来完成每一个位的排序工作。</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>JS逆向学习-某DJ音乐网</title>
    <url>/2020/04/30/article-4/</url>
    <content><![CDATA[<p>网站地址：aHR0cDovL3d3dy52dnZkai5jb20v</p>
<a id="more"></a>

<h3 id="网站分析"><a href="#网站分析" class="headerlink" title="网站分析"></a>网站分析</h3><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><p>随便点击一首音乐的链接，并进行抓包，发现了这样的几个请求：</p>
<p><img src="image-20200430111802994.png" srcset="/img/loading.gif" alt=""></p>
<p>再看下m3u8请求的响应体：</p>
<p><img src="image-20200429185725469.png" srcset="/img/loading.gif" alt=""></p>
<p>发现上面标出的ts流请求出现在了m3u8请求的响应体中，关于对m3u8的介绍看这里 <a href="https://www.jianshu.com/p/e97f6555a070" target="_blank" rel="noopener">m3u8 文件格式详解</a></p>
<p>由此可以得出只要找到m3u8地址就可以获取到音频资源</p>
<h4 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h4><p>这是最关键的一步，查看详情页源代码会发现如下图一段代码：</p>
<p><img src="image-20200430102253924.png" srcset="/img/loading.gif" alt=""></p>
<p>进行断点调试</p>
<p><img src="image-20200430102841176.png" srcset="/img/loading.gif" alt=""></p>
<p>发现这就是目标m3u8地址</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><h4 id="根据上面的逆向结果获取ts流地址"><a href="#根据上面的逆向结果获取ts流地址" class="headerlink" title="根据上面的逆向结果获取ts流地址"></a>根据上面的逆向结果获取ts流地址</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> execjs<br><span class="hljs-keyword">import</span> aiohttp<br><span class="hljs-keyword">import</span> asyncio<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_indexPage</span><span class="hljs-params">(musicId)</span>:</span><br>    url = <span class="hljs-string">f'aHR0cDovL3d3dy52dnZkai5jb20v/play/<span class="hljs-subst">&#123;musicId&#125;</span>.html'</span><br>    ts_file = <span class="hljs-string">f"mp4/<span class="hljs-subst">&#123;musicId&#125;</span>/ts/"</span><br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> aiohttp.ClientSession() <span class="hljs-keyword">as</span> session:<br>        <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> session.get(url, proxy=proxy) <span class="hljs-keyword">as</span> resp:<br>            <span class="hljs-keyword">if</span> resp.status:<br>                page_info = <span class="hljs-keyword">await</span> resp.text()<br>                arg1, arg2 = re.search(<span class="hljs-string">"playurl=x.*?\('(.*?)'\);"</span>, page_info).group(<span class="hljs-number">1</span>).split(<span class="hljs-string">"','"</span>)<br>                <span class="hljs-keyword">with</span> open(<span class="hljs-string">'qingfeng_new.js'</span>, <span class="hljs-string">'r'</span>) <span class="hljs-keyword">as</span> f:<br>                    ctx = execjs.compile(f.read())<br><br>                <span class="hljs-comment"># 解密m3u8地址</span><br>                playurl = ctx.call(<span class="hljs-string">'get_url'</span>, arg1, arg2)<br><br>                base_url = playurl.split(<span class="hljs-string">f"<span class="hljs-subst">&#123;musicId&#125;</span>.m3u8"</span>)[<span class="hljs-number">0</span>]<br><br>                resp_ts = <span class="hljs-keyword">await</span> get_m3u8list(playurl)<br><br>                 <span class="hljs-comment"># 根据m3u8文件构造获取ts流对象列表</span><br>                ts_lists = [download_ts(base_url + i, ts_file, musicId) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> re.findall(<span class="hljs-string">"(&#123;&#125;.*?)\n"</span>.format(musicId), resp_ts)]<br><br>                <span class="hljs-comment"># 并发获取ts流</span><br>                <span class="hljs-keyword">await</span> asyncio.gather(*ts_lists)<br><br>                <span class="hljs-keyword">await</span> save_mp4(ts_file, musicId)<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_m3u8list</span><span class="hljs-params">(url)</span>:</span><br>    <span class="hljs-string">"""</span><br><span class="hljs-string">    读取 m3u8 文件</span><br><span class="hljs-string">    :param url:</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    """</span><br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> aiohttp.ClientSession() <span class="hljs-keyword">as</span> session:<br>        <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> session.get(url, proxy=proxy) <span class="hljs-keyword">as</span> resp:<br>            <span class="hljs-keyword">if</span> resp.status:<br>                resp = <span class="hljs-keyword">await</span> resp.text()<br>                <span class="hljs-keyword">return</span> resp<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">download_ts</span><span class="hljs-params">(url, ts_file, musicId)</span>:</span><br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> aiohttp.ClientSession() <span class="hljs-keyword">as</span> session:<br>        <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> session.get(url, proxy=proxy) <span class="hljs-keyword">as</span> resp:<br>            <span class="hljs-keyword">if</span> resp.status:<br>                num = re.search(<span class="hljs-string">'&#123;&#125;-(\d\d\d?)\.ts'</span>.format(musicId), url).group(<span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(ts_file):<br>                    os.makedirs(ts_file)<br>                r = <span class="hljs-keyword">await</span> resp.read()<br>                <span class="hljs-keyword">with</span> open(<span class="hljs-string">f'<span class="hljs-subst">&#123;ts_file&#125;</span>/<span class="hljs-subst">&#123;num&#125;</span>.ts'</span>, <span class="hljs-string">'wb'</span>) <span class="hljs-keyword">as</span> f:<br>                    f.write(r)<br></code></pre></td></tr></table></figure>

<p>得到ts流内容后还需要将其整合为mp4格式，如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">save_mp4</span><span class="hljs-params">(ts_file, musicId)</span>:</span><br>    <span class="hljs-string">"""</span><br><span class="hljs-string">    利用 ffmpeg 整合 ts流文件</span><br><span class="hljs-string">    :param ts_file: </span><br><span class="hljs-string">    :param musicId: </span><br><span class="hljs-string">    :return: </span><br><span class="hljs-string">    """</span><br><br>    path_lists = os.listdir(ts_file)<br>    path_lists.sort()<br>    li = [os.path.join(ts_file,filename) <span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> path_lists]<br>    tsfiles = <span class="hljs-string">'|'</span>.join(li)<br>    save_path = <span class="hljs-string">f'mp4/<span class="hljs-subst">&#123;musicId&#125;</span>/<span class="hljs-subst">&#123;musicId&#125;</span>.mp4'</span><br><br>    cmd = <span class="hljs-string">'ffmpeg -i "concat:%s" -acodec copy -vcodec copy -absf aac_adtstoasc %s'</span>%    (tsfiles, save_path)<br>    os.system(cmd)<br></code></pre></td></tr></table></figure>

<p>然后运行该代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">event_loop = asyncio.get_event_loop()<br>tasks = [get_indexPage(musicId) <span class="hljs-keyword">for</span> musicId <span class="hljs-keyword">in</span> [<span class="hljs-string">'193270'</span>]]<br>event_loop.run_until_complete(asyncio.wait(tasks))<br>event_loop.close()<br></code></pre></td></tr></table></figure>

<p>调用的js文件内容：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">DeCode</span>(<span class="hljs-params"></span>) </span>&#123;<br>       <span class="hljs-keyword">this</span>.OO0O00OO00OO = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>           <span class="hljs-keyword">return</span> b &gt; <span class="hljs-number">0</span> ? a.substring(<span class="hljs-number">0</span>, b) : <span class="hljs-literal">null</span>;<br>       &#125;, <span class="hljs-keyword">this</span>.OO00OO0O00O0 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>           <span class="hljs-keyword">return</span> a.length - b &gt;= <span class="hljs-number">0</span> &amp;&amp; a.length &gt;= <span class="hljs-number">0</span> &amp;&amp; a.length - b &lt;= a.length ? a.substring(a.length - b, a.length) : <span class="hljs-literal">null</span>;<br>       &#125;, <span class="hljs-keyword">this</span>.O0000OO0OO00O0 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) </span>&#123;<br>           <span class="hljs-keyword">var</span> c, d, e, f, g, h, i, j, k = <span class="hljs-string">""</span>;<br>           <span class="hljs-keyword">for</span> (c = <span class="hljs-number">0</span>; c &lt; b.length; c++) &#123;<br>               k += b.charCodeAt(c).toString();<br>           &#125;<br>           <span class="hljs-keyword">for</span> (d = <span class="hljs-built_in">Math</span>.floor(k.length / <span class="hljs-number">5</span>), e = <span class="hljs-built_in">parseInt</span>(k.charAt(d) + k.charAt(<span class="hljs-number">2</span> * d) + k.charAt(<span class="hljs-number">3</span> * d) + k.charAt(<span class="hljs-number">4</span> * d) + k.charAt(<span class="hljs-number">5</span> * d)),<br>                    f = <span class="hljs-built_in">Math</span>.round(b.length / <span class="hljs-number">2</span>), g = <span class="hljs-built_in">Math</span>.pow(<span class="hljs-number">2</span>, <span class="hljs-number">31</span>) - <span class="hljs-number">1</span>, h = <span class="hljs-built_in">parseInt</span>(a.substring(a.length - <span class="hljs-number">8</span>, a.length), <span class="hljs-number">16</span>),<br>                    a = a.substring(<span class="hljs-number">0</span>, a.length - <span class="hljs-number">8</span>), k += h; k.length &gt; <span class="hljs-number">10</span>; ) &#123;<br>               k = (<span class="hljs-built_in">parseInt</span>(k.substring(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>)) + <span class="hljs-built_in">parseInt</span>(k.substring(<span class="hljs-number">10</span>, k.length))).toString();<br>           &#125;<br>           <span class="hljs-keyword">for</span> (k = (e * k + f) % g, i = <span class="hljs-string">""</span>, j = <span class="hljs-string">""</span>, c = <span class="hljs-number">0</span>; c &lt; a.length; c += <span class="hljs-number">2</span>) &#123;<br>               i = <span class="hljs-built_in">parseInt</span>(<span class="hljs-built_in">parseInt</span>(a.substring(c, c + <span class="hljs-number">2</span>), <span class="hljs-number">16</span>) ^ <span class="hljs-built_in">Math</span>.floor(<span class="hljs-number">255</span> * (k / g))), j += <span class="hljs-built_in">String</span>.fromCharCode(i),<br>                   k = (e * k + f) % g;<br>           &#125;<br>           <span class="hljs-keyword">return</span> j;<br>       &#125;, <span class="hljs-keyword">this</span>.O0000OO0OO00O = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, b, c</span>) </span>&#123;<br>           <span class="hljs-keyword">return</span> a.length &gt;= <span class="hljs-number">0</span> ? a.substr(b, c) : <span class="hljs-literal">null</span>;<br>       &#125;, <span class="hljs-keyword">this</span>.O0O000000O0O0 = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a</span>) </span>&#123;<br>           <span class="hljs-keyword">return</span> a.length;<br>       &#125;, <span class="hljs-keyword">this</span>.O000O0OO0O0OO = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a,b</span>) </span>&#123;<br>           <span class="hljs-keyword">var</span> h, i, j, k, l, m, n, o, p, c = b, d = <span class="hljs-keyword">this</span>.O0O000000O0O0(c), e = d, f = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(), g = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>();<br>           <span class="hljs-keyword">for</span> (l = <span class="hljs-number">1</span>; d &gt;= l; l++) &#123;<br>               f[l] = <span class="hljs-keyword">this</span>.O0000OO0OO00O(c, l - <span class="hljs-number">1</span>, <span class="hljs-number">1</span>).charCodeAt(<span class="hljs-number">0</span>), g[e] = f[l], e -= <span class="hljs-number">1</span>;<br>           &#125;<br>           <span class="hljs-keyword">for</span> (h = <span class="hljs-string">""</span>, i = a, m = <span class="hljs-keyword">this</span>.OO0O00OO00OO(i, <span class="hljs-number">2</span>), i = <span class="hljs-keyword">this</span>.OO00OO0O00O0(i, <span class="hljs-keyword">this</span>.O0O000000O0O0(i) - <span class="hljs-number">2</span>),<br>                    l = <span class="hljs-number">0</span>; l &lt; <span class="hljs-keyword">this</span>.O0O000000O0O0(i); l += <span class="hljs-number">4</span>) &#123;<br>               j = <span class="hljs-keyword">this</span>.O0000OO0OO00O(i, l, <span class="hljs-number">4</span>), <span class="hljs-string">""</span> != j &amp;&amp; (b = <span class="hljs-keyword">this</span>.OO0O00OO00OO(j, <span class="hljs-number">1</span>), k = (<span class="hljs-built_in">parseInt</span>(<span class="hljs-keyword">this</span>.OO00OO0O00O0(j, <span class="hljs-number">3</span>)) - <span class="hljs-number">100</span>) / <span class="hljs-number">3</span>,<br>                   m == <span class="hljs-keyword">this</span>.O0000OO0OO00O0(<span class="hljs-string">"a9ab044c634a"</span>, <span class="hljs-string">"O0000OO0OO00O"</span>) ? (n = <span class="hljs-number">2</span> * <span class="hljs-built_in">parseInt</span>(b.charCodeAt(<span class="hljs-number">0</span>)),<br>                       o = <span class="hljs-built_in">parseInt</span>(f[k]), p = n - o, h += <span class="hljs-built_in">String</span>.fromCharCode(p)) : (n = <span class="hljs-number">2</span> * <span class="hljs-built_in">parseInt</span>(b.charCodeAt(<span class="hljs-number">0</span>)),<br>                       o = <span class="hljs-built_in">parseInt</span>(g[k]), p = n - o, h += <span class="hljs-built_in">String</span>.fromCharCode(p)));<br>           &#125;<br>           <span class="hljs-keyword">return</span> h;<br>       &#125;;<br>   &#125;<br><br>   <span class="hljs-keyword">var</span> x=<span class="hljs-keyword">new</span> DeCode();<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_url</span>(<span class="hljs-params">a, b</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> x.O000O0OO0O0OO(a, b)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
        <category>JS逆向</category>
      </categories>
      <tags>
        <tag>JS逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>排序优化</title>
    <url>/2020/09/01/article-40/</url>
    <content><![CDATA[<p>找到合适的排序算法</p>
<a id="more"></a>

<h3 id="如何选择合适的排序算法？"><a href="#如何选择合适的排序算法？" class="headerlink" title="如何选择合适的排序算法？"></a>如何选择合适的排序算法？</h3><p><img src="1f6ef7e0a5365d6e9d68f0ccc71755fd.jpg" srcset="/img/loading.gif" alt=""></p>
<p>线性排序算法的时间复杂度比较低，适用场景比较特殊。所以如果要写一个通用的排序函数，不能选择线性排序算法。</p>
<p>如果对小规模数据进行排序，可以选择时间复杂度是 O(n^2) 的算法；如果对大规模数据进行排序，时间复杂度是 O(nlogn) 的算法更加高效。所以，为了兼顾任意规模数据的排序，一般都会首选时间复杂度是 O(nlogn) 的排序算法来实现排序函数。</p>
<p>归并排序虽然时间复杂度是 O(nlogn) ，但并不是原地排序，需要消耗掉额外的空间，所以一般用快排来实现通用排序。</p>
<h3 id="如何优化快速排序？"><a href="#如何优化快速排序？" class="headerlink" title="如何优化快速排序？"></a>如何优化快速排序？</h3><p>当序列本身就是有序的，然后依然每次选择最后一个数据进行分区，此时时间复杂度就会退化为O(n^2)。所以快排的优化关键在于分区点选择的合理性。</p>
<p>最理想的分区点是：<strong><em>被分区点分开的两个分区中，数据的数量差不多</em></strong>。</p>
<p>下面介绍两个分区方法。</p>
<h4 id="三数取中法"><a href="#三数取中法" class="headerlink" title="三数取中法"></a>三数取中法</h4><p>我们从区间的首、尾、中间，分别取出一个数，然后对比大小，取这 3 个数的中间值作为分区点。这样每间隔某个固定的长度，取数据出来比较，将中间值作为分区点的分区算法，肯定要比单纯取某一个数据更好。但是，如果要排序的数组比较大，那“三数取中”可能就不够了，可能要“五数取中”或者“十数取中”。</p>
<h4 id="随机法"><a href="#随机法" class="headerlink" title="随机法"></a>随机法</h4><p>随机法就是每次从要排序的区间中，随机选择一个元素作为分区点。这种方法并不能保证每次分区点都选的比较好，但是从概率的角度来看，也不大可能会出现每次分区点都选得很差的情况，所以平均情况下，这样选的分区点是比较好的。时间复杂度退化为最糟糕的 O(n2) 的情况，出现的可能性不大。</p>
<h3 id="快排如何避免栈溢出"><a href="#快排如何避免栈溢出" class="headerlink" title="快排如何避免栈溢出"></a>快排如何避免栈溢出</h3><ul>
<li>第一种是限制递归深度。一旦递归过深，超过了我们事先设定的阈值，就停止递归。</li>
<li>第二种是通过在堆上模拟实现一个函数调用栈，手动模拟递归压栈、出栈的过程，这样就没有了系统栈大小的限制。</li>
</ul>
<h3 id="快排一定是最优解吗？"><a href="#快排一定是最优解吗？" class="headerlink" title="快排一定是最优解吗？"></a>快排一定是最优解吗？</h3><p>排序算法需要根据使用场景选择，比如数据量小于4时，插入排序的效率就比快排更高，所以在小规模数据面前，O(n2) 时间复杂度的算法并不一定比 O(nlogn) 的算法执行时间长。</p>
<p>而当数据占用空间比较小时，归并排序也优于快排。</p>
<h3 id="Python的sorted排序使用什么方式实现"><a href="#Python的sorted排序使用什么方式实现" class="headerlink" title="Python的sorted排序使用什么方式实现"></a>Python的sorted排序使用什么方式实现</h3><p>Python的sorted使用了timsort排序。</p>
<p>timsort结合了归并排序和插入排序（二分插入算法）。</p>
<h4 id="Timsort核心过程"><a href="#Timsort核心过程" class="headerlink" title="Timsort核心过程"></a>Timsort核心过程</h4><p>TimSort 算法为了减少对升序部分的回溯和对降序部分的性能倒退，将输入按其升序和降序特点进行了分区。排序的输入的单位不是一个个单独的数字，而是一个个的块-分区。其中每一个分区叫一个run。针对这些 run 序列，每次拿一个 run 出来按规则进行合并。每次合并会将两个 run合并成一个 run。合并的结果保存到栈中。合并直到消耗掉所有的 run，这时将栈上剩余的 run合并到只剩一个 run 为止。这时这个仅剩的 run 便是排好序的结果。</p>
<ul>
<li>如何数组长度小于某个值，直接用二分插入排序算法</li>
<li>找到各个run，并入栈</li>
<li>按规则合并ru</li>
</ul>
<h4 id="Timsort性能"><a href="#Timsort性能" class="headerlink" title="Timsort性能"></a>Timsort性能</h4><p>在平均情况下，比较排序不会比O(n log n)更快。由于Timsort算法利用了现实中大多数数据中会有一些排好序的区，所以Timsort会比O(n log n)快些。对于随机数没有可以利用的排好序的区，Timsort时间复杂度会是log(n!)。</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>二分查找（上）</title>
    <url>/2020/09/02/article-41/</url>
    <content><![CDATA[<p>认识二分查找</p>
<a id="more"></a>

<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>二分查找针对的是一个有序的数据集合，查找思想有点类似分治思想。每次都通过跟区间的中间元素对比，将待查找的区间缩小为之前的一半，直到找到要查找的元素，或者区间被缩小为 0。</p>
<h3 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h3><p>时间复杂度O(logn)</p>
<h3 id="代码实现（有序数组无重复数据）"><a href="#代码实现（有序数组无重复数据）" class="headerlink" title="代码实现（有序数组无重复数据）"></a>代码实现（有序数组无重复数据）</h3><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">binary_search2</span><span class="hljs-params">(arrays, l, r, val)</span>:</span><br>    <span class="hljs-keyword">if</span> l &lt;= r:<br>        mid = l + ((r - l) &gt;&gt; <span class="hljs-number">1</span>)<br><br>        <span class="hljs-keyword">if</span> arrays[mid] == val:<br>            <span class="hljs-keyword">return</span> mid<br><br>        <span class="hljs-keyword">if</span> arrays[mid] &gt; val:<br>            <span class="hljs-keyword">return</span> binary_search2(arrays, l, mid<span class="hljs-number">-1</span>, val)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> binary_search2(arrays, mid+<span class="hljs-number">1</span>, r, val)<br></code></pre></td></tr></table></figure>



<h4 id="非递归"><a href="#非递归" class="headerlink" title="非递归"></a>非递归</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">binary_search</span><span class="hljs-params">(arrays, val)</span>:</span><br>    l = <span class="hljs-number">0</span><br>    r = len(arrays)<span class="hljs-number">-1</span><br><br>    <span class="hljs-keyword">while</span> l &lt;= r:<br>        mid = l + ((r - l) &gt;&gt; <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> arrays[mid] == val:<br>            <span class="hljs-keyword">return</span> mid<br>        <span class="hljs-keyword">if</span> arrays[mid] &lt; val:<br>            l = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            r = mid<br></code></pre></td></tr></table></figure>



<h3 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h3><h4 id="二分查找依赖的是顺序表结构，简单点说就是数组"><a href="#二分查找依赖的是顺序表结构，简单点说就是数组" class="headerlink" title="二分查找依赖的是顺序表结构，简单点说就是数组"></a>二分查找依赖的是顺序表结构，简单点说就是数组</h4><p>主要原因是二分查找算法需要按照下标随机访问元素</p>
<h4 id="二分查找针对的是有序数据"><a href="#二分查找针对的是有序数据" class="headerlink" title="二分查找针对的是有序数据"></a>二分查找针对的是有序数据</h4><p>二分查找只能用在插入、删除操作不频繁，一次排序多次查找的场景中。针对动态变化的数据集合，二分查找将不再适用。</p>
<h4 id="数据量太小不适合二分查找"><a href="#数据量太小不适合二分查找" class="headerlink" title="数据量太小不适合二分查找"></a>数据量太小不适合二分查找</h4><p>有一个例外，如果数据之间的比较操作非常耗时，不管数据量大小，我都推荐使用二分查找。</p>
<h4 id="数据量太大也不适合二分查找"><a href="#数据量太大也不适合二分查找" class="headerlink" title="数据量太大也不适合二分查找"></a>数据量太大也不适合二分查找</h4><p>二分查找基于数组，而数组需要在连续的内存的空间。</p>
<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><h4 id="实现“求一个数的平方根”？要求精确到小数点后-6-位。"><a href="#实现“求一个数的平方根”？要求精确到小数点后-6-位。" class="headerlink" title="实现“求一个数的平方根”？要求精确到小数点后 6 位。"></a>实现“求一个数的平方根”？要求精确到小数点后 6 位。</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">my_sqrt</span><span class="hljs-params">(num, s)</span>:</span><br>    <span class="hljs-keyword">if</span> num &gt; <span class="hljs-number">1</span>:<br>        low = <span class="hljs-number">1</span><br>        hight = num<br>    <span class="hljs-keyword">else</span>:<br>        low = num<br>        hight = <span class="hljs-number">1</span><br><br>    line = <span class="hljs-number">1</span>/pow(<span class="hljs-number">10</span>, s)<br>    <span class="hljs-keyword">while</span> low &lt; hight:<br>        mid = (low + hight) / <span class="hljs-number">2</span><br><br>        val = mid * mid<br>        <span class="hljs-keyword">if</span> abs(val - num) &lt;= line:<br>            <span class="hljs-keyword">return</span> round(mid, s)<br><br>        <span class="hljs-keyword">if</span> val &gt; num:<br>            hight = mid<br>        <span class="hljs-keyword">else</span>:<br>            low = mid<br></code></pre></td></tr></table></figure>

<h4 id="如果数据使用链表存储，二分查找的时间复杂就会变得很高，那查找的时间复杂度究竟是多少呢？"><a href="#如果数据使用链表存储，二分查找的时间复杂就会变得很高，那查找的时间复杂度究竟是多少呢？" class="headerlink" title="如果数据使用链表存储，二分查找的时间复杂就会变得很高，那查找的时间复杂度究竟是多少呢？"></a>如果数据使用链表存储，二分查找的时间复杂就会变得很高，那查找的时间复杂度究竟是多少呢？</h4><p>假设链表长度为n，二分查找每次都要找到中间点(计算中忽略奇偶数差异):<br>第一次查找中间点，需要移动指针n/2次；<br>第二次，需要移动指针n/4次；<br>第三次需要移动指针n/8次；<br>……<br>以此类推，一直到1次为值</p>
<p>总共指针移动次数(查找次数) = n/2 + n/4 + n/8 + …+ 1，这显然是个等比数列，根据等比数列求和公式：Sum = n - 1.</p>
<p>最后算法时间复杂度是：O(n-1)，忽略常数，记为O(n)，时间复杂度和顺序查找时间复杂度相同</p>
<p>但是稍微思考下，在二分查找的时候，由于要进行多余的运算，严格来说，会比顺序查找时间慢</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>二分查找（下）</title>
    <url>/2020/09/02/article-42/</url>
    <content><![CDATA[<p>二分查找的一些例子</p>
<a id="more"></a>

<h3 id="查找第一个值等于给定值的元素-有序有重复数据"><a href="#查找第一个值等于给定值的元素-有序有重复数据" class="headerlink" title="查找第一个值等于给定值的元素(有序有重复数据)"></a>查找第一个值等于给定值的元素(有序有重复数据)</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 第一种</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">binary_search</span><span class="hljs-params">(arrays, val)</span>:</span><br>    low = <span class="hljs-number">0</span><br>    high = len(arrays) - <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">while</span> low &lt;= high:<br>        mid = low + ((high - low) &gt;&gt; <span class="hljs-number">1</span>)<br><br>        <span class="hljs-keyword">if</span> arrays[mid] &gt;= val:<br>            high = mid - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            low = mid + <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">if</span> (low &lt; len(arrays)) <span class="hljs-keyword">and</span> arrays[low] == val:<br>        <span class="hljs-keyword">return</span> low<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br></code></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 第二种</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">binary_search</span><span class="hljs-params">(arrays, val)</span>:</span><br>    low = <span class="hljs-number">0</span><br>    high = len(arrays) - <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">while</span> low &lt; high:<br>        mid = low + ((high - low) &gt;&gt; <span class="hljs-number">1</span>)<br><br>        <span class="hljs-keyword">if</span> arrays[mid] &gt; val:<br>            high = mid - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> arrays[mid] &lt; val:<br>            low = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> mid == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> arrays[mid<span class="hljs-number">-1</span>] != val:<br>                <span class="hljs-keyword">return</span> mid<br>            high = mid - <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br></code></pre></td></tr></table></figure>

<h3 id="查找最后一个值等于给定值的元素"><a href="#查找最后一个值等于给定值的元素" class="headerlink" title="查找最后一个值等于给定值的元素"></a>查找最后一个值等于给定值的元素</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 第一种</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">binary_search</span><span class="hljs-params">(arrays, val)</span>:</span><br>    length = len(arrays)<br>    low = <span class="hljs-number">0</span><br>    high = length - <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">while</span> low &lt;= high:<br>        mid = low + ((high - low) &gt;&gt; <span class="hljs-number">1</span>)<br><br>        <span class="hljs-keyword">if</span> arrays[mid] &lt;= val:<br>            low = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            high = mid - <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">if</span> high &lt; length <span class="hljs-keyword">and</span> arrays[high] == val:<br>        <span class="hljs-keyword">return</span> high<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br></code></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 第二种</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">binary_search</span><span class="hljs-params">(arrays, val)</span>:</span><br>    length = len(arrays)<br>    low = <span class="hljs-number">0</span><br>    high = length - <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">while</span> low &lt;= high:<br>        mid = low + ((high - low) &gt;&gt; <span class="hljs-number">1</span>)<br><br>        <span class="hljs-keyword">if</span> arrays[mid] &gt; val:<br>            high = mid - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> arrays[mid] &lt; val:<br>            low = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> (mid == (length<span class="hljs-number">-1</span>)) <span class="hljs-keyword">or</span> arrays[mid + <span class="hljs-number">1</span>] != val:<br>                <span class="hljs-keyword">return</span> mid<br>            low = mid + <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br></code></pre></td></tr></table></figure>

<h3 id="查找第一个大于等于给定值的元素"><a href="#查找第一个大于等于给定值的元素" class="headerlink" title="查找第一个大于等于给定值的元素"></a>查找第一个大于等于给定值的元素</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">binary_search</span><span class="hljs-params">(arrays, val)</span>:</span><br>    length = len(arrays)<br>    low = <span class="hljs-number">0</span><br>    high = length - <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">while</span> low &lt;= high:<br>        mid = low + ((high - low) &gt;&gt; <span class="hljs-number">1</span>)<br><br>        <span class="hljs-keyword">if</span> arrays[mid] &gt;= val:<br>            <span class="hljs-keyword">if</span> mid == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> arrays[mid<span class="hljs-number">-1</span>] &lt; val:<br>                <span class="hljs-keyword">return</span> mid<br>            high = mid - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            low = mid + <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br></code></pre></td></tr></table></figure>

<h3 id="查找最后一个小于等于给定值的元素"><a href="#查找最后一个小于等于给定值的元素" class="headerlink" title="查找最后一个小于等于给定值的元素"></a>查找最后一个小于等于给定值的元素</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">binary_search</span><span class="hljs-params">(arrays, val)</span>:</span><br>    length = len(arrays)<br>    low = <span class="hljs-number">0</span><br>    high = length - <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">while</span> low &lt;= high:<br>        mid = low + ((high - low) &gt;&gt; <span class="hljs-number">1</span>)<br><br>        <span class="hljs-keyword">if</span> arrays[mid] &lt;= val:<br>            <span class="hljs-keyword">if</span> mid == (length<span class="hljs-number">-1</span>) <span class="hljs-keyword">or</span> arrays[mid+<span class="hljs-number">1</span>] &gt; val:<br>                <span class="hljs-keyword">return</span> mid<br>            low = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            high = mid - <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br></code></pre></td></tr></table></figure>

<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><h4 id="如果有序数组是一个循环有序数组，比如-4，5，6，1，2，3。针对这种情况，如何实现一个求“值等于给定值”的二分查找算法呢？"><a href="#如果有序数组是一个循环有序数组，比如-4，5，6，1，2，3。针对这种情况，如何实现一个求“值等于给定值”的二分查找算法呢？" class="headerlink" title="如果有序数组是一个循环有序数组，比如 4，5，6，1，2，3。针对这种情况，如何实现一个求“值等于给定值”的二分查找算法呢？"></a>如果有序数组是一个循环有序数组，比如 4，5，6，1，2，3。针对这种情况，如何实现一个求“值等于给定值”的二分查找算法呢？</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">binary_search</span><span class="hljs-params">(arrays, val)</span>:</span><br>    length = len(arrays)<br>    low = <span class="hljs-number">0</span><br>    high = length - <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">while</span> low &lt;= high:<br>        mid = low + ((high - low) &gt;&gt; <span class="hljs-number">1</span>)<br><br>        <span class="hljs-keyword">if</span> arrays[mid] == val:<br>            <span class="hljs-keyword">return</span> mid<br><br>        <span class="hljs-keyword">if</span> arrays[mid] &gt; val:<br>            <span class="hljs-comment"># 左半序列</span><br>            <span class="hljs-keyword">if</span> arrays[low] &gt; val:<br>                low = mid + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                high = mid - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> arrays[high] &lt; val:<br>                high = mid <span class="hljs-number">-1</span><br>            <span class="hljs-keyword">else</span>:<br>                low = mid + <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>散列表（上）</title>
    <url>/2020/09/02/article-43/</url>
    <content><![CDATA[<p>初识散列表</p>
<a id="more"></a>

<h3 id="散列思想"><a href="#散列思想" class="headerlink" title="散列思想"></a>散列思想</h3><p>散列表用的是数组支持按照下标随机访问数据的特性，所以散列表其实就是数组的一种扩展，由数组演化而来。可以说，如果没有数组，就没有散列表。</p>
<p>当我们按照键值查询元素时，我们用同样的散列函数，将键值转化数组下标，从对应的数组下标的位置取数据。</p>
<h3 id="散列函数"><a href="#散列函数" class="headerlink" title="散列函数"></a>散列函数</h3><h4 id="基本要求"><a href="#基本要求" class="headerlink" title="基本要求"></a>基本要求</h4><ul>
<li>散列函数计算得到的散列值是一个非负整数</li>
<li>如果 key1 = key2，那 hash(key1) == hash(key2)</li>
<li>如果 key1 ≠ key2，那 hash(key1) ≠ hash(key2)</li>
</ul>
<h3 id="散列冲突"><a href="#散列冲突" class="headerlink" title="散列冲突"></a>散列冲突</h3><p>解决方法有两类，开放寻址法（open addressing）和链表法（chaining）。</p>
<h4 id="开放寻址法"><a href="#开放寻址法" class="headerlink" title="开放寻址法"></a>开放寻址法</h4><p>当我们往散列表中插入数据时，如果某个数据经过散列函数散列之后，存储位置已经被占用了，我们就从当前位置开始，依次往后查找，看是否有空闲位置，直到找到为止。</p>
<p>我们通过散列函数求出要查找元素的键值对应的散列值，然后比较数组中下标为散列值的元素和要查找的元素。如果相等，则说明就是我们要找的元素；否则就顺序往后依次查找。</p>
<p>对于开放寻址冲突解决方法，除了线性探测方法之外，还有另外两种比较经典的探测方法，<strong><em>二次探测</em></strong>（Quadratic probing）和<strong><em>双重散列</em></strong>（Double hashing）。</p>
<p>为了尽可能保证散列表的操作效率，一般情况下，我们会尽可能保证散列表中有一定比例的空闲槽位。我们用装载因子（load factor）来表示空位的多少。</p>
<p>装载因子的计算公式是：</p>
<figure class="highlight fix"><table><tr><td class="code"><pre><code class="hljs fix"><span class="hljs-attr">散列表的装载因子</span>=<span class="hljs-string">填入表中的元素个数/散列表的长度</span><br></code></pre></td></tr></table></figure>

<p><strong><em>装载因子越大，说明空闲位置越少，冲突越多，散列表的性能会下降。</em></strong></p>
<h4 id="链表法（拉链法）"><a href="#链表法（拉链法）" class="headerlink" title="链表法（拉链法）"></a>链表法（拉链法）</h4><p>链表法是一种更加常用的散列冲突解决办法，相比开放寻址法，它要简单很多。我们来看这个图，在散列表中，每个“桶（bucket）”或者“槽（slot）”会对应一条链表，所有散列值相同的元素我们都放到相同槽位对应的链表中。</p>
<p>对于散列比较均匀的散列函数来说，理论上讲，k=n/m，其中 n 表示散列中数据的个数，m 表示散列表中“槽”的个数。</p>
<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><h4 id="假设我们有-10-万条-URL-访问日志，如何按照访问次数给-URL-排序？"><a href="#假设我们有-10-万条-URL-访问日志，如何按照访问次数给-URL-排序？" class="headerlink" title="假设我们有 10 万条 URL 访问日志，如何按照访问次数给 URL 排序？"></a>假设我们有 10 万条 URL 访问日志，如何按照访问次数给 URL 排序？</h4><p>遍历 10 万条数据，以 URL 为 key，访问次数为 value，存入散列表，同时记录下访问次数的最大值 K，时间复杂度 O(N)。</p>
<p>如果 K 不是很大，可以使用桶排序，时间复杂度 O(N)。如果 K 非常大（比如大于 10 万），就使用快速排序，复杂度 O(NlogN)。</p>
<h4 id="有两个字符串数组，每个数组大约有-10-万条字符串，如何快速找出两个数组中相同的字符串？"><a href="#有两个字符串数组，每个数组大约有-10-万条字符串，如何快速找出两个数组中相同的字符串？" class="headerlink" title="有两个字符串数组，每个数组大约有 10 万条字符串，如何快速找出两个数组中相同的字符串？"></a>有两个字符串数组，每个数组大约有 10 万条字符串，如何快速找出两个数组中相同的字符串？</h4><p>以第一个字符串数组构建散列表，key 为字符串，value 为出现次数。再遍历第二个字符串数组，以字符串为 key 在散列表中查找，如果 value 大于零，说明存在相同字符串。时间复杂度 O(N)。</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>散列表（中）</title>
    <url>/2020/09/02/article-44/</url>
    <content><![CDATA[<p>设计散列函数</p>
<a id="more"></a>

<h3 id="如何设计散列函数？"><a href="#如何设计散列函数？" class="headerlink" title="如何设计散列函数？"></a>如何设计散列函数？</h3><p>散列函数的设计不能太复杂，且散列函数生成的值要尽可能随机并且均匀分布。</p>
<p>常用方法：</p>
<p>数据分析法、直接寻址法、平方取中法、折叠法、随机数法等</p>
<h3 id="装载因子过大了怎么办？"><a href="#装载因子过大了怎么办？" class="headerlink" title="装载因子过大了怎么办？"></a>装载因子过大了怎么办？</h3><p>对装载因子设置阈值，来对散列表进行动态扩容与动态缩容。</p>
<p>装载因子阈值的设置要权衡时间、空间复杂度。如果内存空间不紧张，对执行效率要求很高，可以降低负载因子的阈值；相反，如果内存空间紧张，对执行效率要求又不高，可以增加负载因子的值，甚至可以大于 1。</p>
<h3 id="如何避免低效的扩容？"><a href="#如何避免低效的扩容？" class="headerlink" title="如何避免低效的扩容？"></a>如何避免低效的扩容？</h3><p>为了解决一次性扩容耗时过多的情况，我们可以将扩容操作穿插在插入操作的过程中，分批完成。当装载因子触达阈值之后，我们只申请新空间，但并不将老的数据搬移到新散列表中。</p>
<h3 id="如何选择冲突解决方法？"><a href="#如何选择冲突解决方法？" class="headerlink" title="如何选择冲突解决方法？"></a>如何选择冲突解决方法？</h3><h4 id="开放寻址法"><a href="#开放寻址法" class="headerlink" title="开放寻址法"></a>开放寻址法</h4><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><ul>
<li>散列表中的数据都存储在数组中，可以有效地利用 CPU 缓存加快查询速度。</li>
<li>这种方法实现的散列表，序列化起来比较简单。</li>
</ul>
<h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><ul>
<li>删除数据的时候比较麻烦，需要特殊标记已经删除掉的数据。</li>
<li>所有的数据都存储在一个数组中，比起链表法来说，冲突的代价更高。</li>
</ul>
<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>当数据量比较小、装载因子小的时候，适合采用开放寻址法。这也是 Java 中的ThreadLocalMap使用开放寻址法解决散列冲突的原因。</p>
<h4 id="链表法（拉链法）"><a href="#链表法（拉链法）" class="headerlink" title="链表法（拉链法）"></a>链表法（拉链法）</h4><h5 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h5><ul>
<li>内存的利用率比开放寻址法要高</li>
<li>对大装载因子的容忍度更高</li>
</ul>
<h5 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h5><ul>
<li>因为要存储指针，所以对于比较小的对象的存储，是比较消耗内存的，还有可能会让内存的消耗翻倍。</li>
<li>因为链表中的结点是零散分布在内存中的，不是连续的，所以对 CPU 缓存是不友好的，这方面对于执行效率也有一定的影响。</li>
</ul>
<h5 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h5><p>基于链表的散列冲突处理方法比较适合存储大对象、大数据量的散列表，而且，比起开放寻址法，它更加灵活，支持更多的优化策略，比如用红黑树代替链表。</p>
<h5 id="改造"><a href="#改造" class="headerlink" title="改造"></a>改造</h5><p>我们对链表法稍加改造，可以实现一个更加高效的散列表。那就是，我们将链表法中的链表改造为其他高效的动态数据结构，比如跳表、红黑树。这样，即便出现散列冲突，极端情况下，所有的数据都散列到同一个桶内，那最终退化成的散列表的查找时间也只不过是 O(logn)。这样也就有效避免了前面讲到的散列碰撞攻击。</p>
<h3 id="工业级散列表举例分析"><a href="#工业级散列表举例分析" class="headerlink" title="工业级散列表举例分析"></a>工业级散列表举例分析</h3><p>Java 中的 HashMap</p>
<h4 id="初始大小"><a href="#初始大小" class="headerlink" title="初始大小"></a>初始大小</h4><p>HashMap 默认的初始大小是 16，当然这个默认值是可以设置的。</p>
<h4 id="装载因子和动态扩容"><a href="#装载因子和动态扩容" class="headerlink" title="装载因子和动态扩容"></a>装载因子和动态扩容</h4><p>最大装载因子默认是 0.75，当 HashMap 中元素个数超过 0.75*capacity（capacity 表示散列表的容量）的时候，就会启动扩容，每次扩容都会扩容为原来的两倍大小。</p>
<h4 id="散列冲突解决方法"><a href="#散列冲突解决方法" class="headerlink" title="散列冲突解决方法"></a>散列冲突解决方法</h4><p>HashMap 底层采用链表法来解决冲突。即使负载因子和散列函数设计得再合理，也免不了会出现拉链过长的情况，一旦出现拉链过长，则会严重影响 HashMap 的性能。</p>
<p>于是，在 JDK1.8 版本中，为了对 HashMap 做进一步优化，我们引入了<strong><em>红黑树</em></strong>。而当链表长度太长（<strong><em>默认超过 8</em></strong>）时，链表就转换为红黑树。我们可以利用红黑树快速增删改查的特点，提高 HashMap 的性能。<strong><em>当红黑树结点个数少于 8 个的时候，又会将红黑树转化为链表</em></strong>。因为在数据量较小的情况下，红黑树要维护平衡，比起链表来，性能上的优势并不明显。</p>
<h4 id="散列函数"><a href="#散列函数" class="headerlink" title="散列函数"></a>散列函数</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">hash</span><span class="hljs-params">(Object key)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> h = key.hashCode()；<br>    <span class="hljs-keyword">return</span> (h ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>)) &amp; (capicity -<span class="hljs-number">1</span>); <span class="hljs-comment">//capicity表示散列表的大小</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>其中，hashCode() 返回的是 Java 对象的 hash code。比如 String 类型的对象的 hashCode() 就是下面这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hashCode</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">int</span> var1 = <span class="hljs-keyword">this</span>.hash;<br>  <span class="hljs-keyword">if</span>(var1 == <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-keyword">this</span>.value.length &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">char</span>[] var2 = <span class="hljs-keyword">this</span>.value;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> var3 = <span class="hljs-number">0</span>; var3 &lt; <span class="hljs-keyword">this</span>.value.length; ++var3) &#123;<br>      var1 = <span class="hljs-number">31</span> * var1 + var2[var3];<br>    &#125;<br>    <span class="hljs-keyword">this</span>.hash = var1;<br>  &#125;<br>  <span class="hljs-keyword">return</span> var1;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="在你熟悉的编程语言中，哪些数据类型底层是基于散列表实现的？散列函数是如何设计的？散列冲突是通过哪种方法解决的？是否支持动态扩容呢？"><a href="#在你熟悉的编程语言中，哪些数据类型底层是基于散列表实现的？散列函数是如何设计的？散列冲突是通过哪种方法解决的？是否支持动态扩容呢？" class="headerlink" title="在你熟悉的编程语言中，哪些数据类型底层是基于散列表实现的？散列函数是如何设计的？散列冲突是通过哪种方法解决的？是否支持动态扩容呢？"></a>在你熟悉的编程语言中，哪些数据类型底层是基于散列表实现的？散列函数是如何设计的？散列冲突是通过哪种方法解决的？是否支持动态扩容呢？</h3><p>比如Redis中的hash,set,hset,都是散列表实现，他们的动态扩容策略是同时维护两个散列表，然后一点点搬移数据</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>散列表（下）</title>
    <url>/2020/09/02/article-45/</url>
    <content><![CDATA[<p>散列表和链表一起使用</p>
<a id="more"></a>

<p><img src="eaefd5f4028cc7d4cfbb56b24ce8ae6e.jpg" srcset="/img/loading.gif" alt=""></p>
<p>我们使用双向链表存储数据，链表中的每个结点处理存储数据（data）、前驱指针（prev）、后继指针（next）之外，还新增了一个特殊的字段 hnext。这个 hnext 有什么作用呢？因为我们的散列表是通过链表法解决散列冲突的，所以每个结点会在两条链中。一个链是刚刚我们提到的双向链表，另一个链是散列表中的拉链。<strong><em>前驱和后继指针是为了将结点串在双向链表中，hnext 指针是为了将结点串在散列表的拉链中。</em></strong></p>
<h3 id="LRU-缓存淘汰算法"><a href="#LRU-缓存淘汰算法" class="headerlink" title="LRU 缓存淘汰算法"></a>LRU 缓存淘汰算法</h3><h4 id="查找一个数据"><a href="#查找一个数据" class="headerlink" title="查找一个数据"></a>查找一个数据</h4><p>散列表中查找数据的时间复杂度接近 O(1)，所以通过散列表，我们可以很快地在缓存中找到一个数据。当找到数据之后，我们还需要将它移动到双向链表的尾部。</p>
<h4 id="删除一个数据"><a href="#删除一个数据" class="headerlink" title="删除一个数据"></a>删除一个数据</h4><p>借助散列表，我们可以在 O(1) 时间复杂度里找到要删除的结点。因为我们的链表是双向链表，双向链表可以通过前驱指针 O(1) 时间复杂度获取前驱结点，所以在双向链表中，删除结点只需要 O(1) 的时间复杂度。</p>
<h4 id="添加一个数据"><a href="#添加一个数据" class="headerlink" title="添加一个数据"></a>添加一个数据</h4><p>先看这个数据是否已经在缓存中。如果已经在其中，需要将其移动到双向链表的尾部；如果不在其中，还要看缓存有没有满。如果满了，则将双向链表头部的结点删除，然后再将数据放到链表的尾部；如果没有满，就直接将数据放到链表的尾部。</p>
<h3 id="Redis-有序集合"><a href="#Redis-有序集合" class="headerlink" title="Redis 有序集合"></a>Redis 有序集合</h3><p>按照键值构建一个散列表，这样按照 key 来删除、查找一个成员对象的时间复杂度就变成了 O(1)。同时，借助跳表结构，其他操作也非常高效。</p>
<h3 id="Java-LinkedHashMap"><a href="#Java-LinkedHashMap" class="headerlink" title="Java LinkedHashMap"></a>Java LinkedHashMap</h3><p>LinkedHashMap 是通过双向链表和散列表这两种数据结构组合实现的。LinkedHashMap 中的“Linked”实际上是指的是双向链表，并非指用链表法解决散列冲突。</p>
<h3 id="为什么散列表和链表经常一块使用？"><a href="#为什么散列表和链表经常一块使用？" class="headerlink" title="为什么散列表和链表经常一块使用？"></a>为什么散列表和链表经常一块使用？</h3><p>散列表这种数据结构虽然支持非常高效的数据插入、删除、查找操作，但是散列表中的数据都是通过散列函数打乱之后无规律存储的。也就说，它无法支持按照某种顺序快速地遍历数据。如果希望按照顺序遍历散列表中的数据，那我们需要将散列表中的数据拷贝到数组中，然后排序，再遍历。</p>
<p>因为散列表是动态数据结构，不停地有数据的插入、删除，所以每当我们希望按顺序遍历散列表中的数据的时候，都需要先排序，那效率势必会很低。为了解决这个问题，我们将散列表和链表（或者跳表）结合在一起使用。</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>哈希算法（上）</title>
    <url>/2020/09/03/article-46/</url>
    <content><![CDATA[<p>哈希算法</p>
<a id="more"></a>

<h3 id="什么是哈希算法？"><a href="#什么是哈希算法？" class="headerlink" title="什么是哈希算法？"></a>什么是哈希算法？</h3><p>将任意长度的二进制值串映射为固定长度的二进制值串，这个映射的规则就是哈希算法，而通过原始数据映射之后得到的二进制值串就是哈希值。</p>
<h3 id="如何设计哈希算法"><a href="#如何设计哈希算法" class="headerlink" title="如何设计哈希算法"></a>如何设计哈希算法</h3><ul>
<li>从哈希值不能反向推导出原始数据（所以哈希算法也叫单向哈希算法）；</li>
<li>对输入数据非常敏感，哪怕原始数据只修改了一个 Bit，最后得到的哈希值也大不相同；</li>
<li>散列冲突的概率要很小，对于不同的原始数据，哈希值相同的概率非常小；</li>
<li>哈希算法的执行效率要尽量高效，针对较长的文本，也能快速地计算出哈希值。</li>
</ul>
<h3 id="哈希算法的应用"><a href="#哈希算法的应用" class="headerlink" title="哈希算法的应用"></a>哈希算法的应用</h3><h4 id="安全加密"><a href="#安全加密" class="headerlink" title="安全加密"></a>安全加密</h4><p>MD5，SHA，AES，DES等都用到了HASH加密。</p>
<p>一般情况下，哈希值越长的哈希算法，散列冲突的概率越低。</p>
<h4 id="唯一标识"><a href="#唯一标识" class="headerlink" title="唯一标识"></a>唯一标识</h4><p>哈希算法可以对大数据做信息摘要，通过一个较短的二进制编码来表示很大的数据。例如图片信息标识。</p>
<h4 id="数据校验"><a href="#数据校验" class="headerlink" title="数据校验"></a>数据校验</h4><p>哈希算法有一个特点，对数据很敏感。只要文件块的内容有一丁点儿的改变，最后计算出的哈希值就会完全不同。</p>
<p>校验数据的完整性和正确性。-&gt; MD5</p>
<h4 id="散列函数"><a href="#散列函数" class="headerlink" title="散列函数"></a>散列函数</h4><p>散列函数对于散列算法计算得到的值，是否能反向解密也并不关心。散列函数中用到的散列算法，更加关注散列后的值是否能平均分布，也就是，一组数据是否能均匀地散列在各个槽中。</p>
<h3 id="如何存储用户密码"><a href="#如何存储用户密码" class="headerlink" title="如何存储用户密码"></a>如何存储用户密码</h3><p>通过哈希算法，对用户密码进行加密之后再存储，不过最好选择相对安全的加密算法，比如 SHA 等（因为 MD5 已经号称被破解了）。此外，针对字典攻击，我们可以引入一个盐（salt），跟用户的密码组合在一起，增加密码的复杂度。</p>
<h3 id="区块链使用的是哪种哈希算法吗？是为了解决什么问题而使用的呢？"><a href="#区块链使用的是哪种哈希算法吗？是为了解决什么问题而使用的呢？" class="headerlink" title="区块链使用的是哪种哈希算法吗？是为了解决什么问题而使用的呢？"></a>区块链使用的是哪种哈希算法吗？是为了解决什么问题而使用的呢？</h3><p>区块链是一块块区块组成的，每个区块分为两部分：区块头和区块体。</p>
<p>区块头保存着 自己区块体 和 上一个区块头 的哈希值。</p>
<p>因为这种链式关系和哈希值的唯一性，只要区块链上任意一个区块被修改过，后面所有区块保存的哈希值就不对了。</p>
<p>区块链使用的是 SHA256 哈希算法，计算哈希值非常耗时，如果要篡改一个区块，就必须重新计算该区块后面所有的区块的哈希值，短时间内几乎不可能做到。</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>哈希算法（下）</title>
    <url>/2020/09/03/article-47/</url>
    <content><![CDATA[<p>哈希算法在分布式系统中有哪些应用？</p>
<a id="more"></a>

<h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>我们可以通过哈希算法，对客户端 IP 地址或者会话 ID 计算哈希值，将取得的哈希值与服务器列表的大小进行取模运算，最终得到的值就是应该被路由到的服务器编号。</p>
<h3 id="数据分片"><a href="#数据分片" class="headerlink" title="数据分片"></a>数据分片</h3><h4 id="如何统计“搜索关键词”出现的次数？"><a href="#如何统计“搜索关键词”出现的次数？" class="headerlink" title="如何统计“搜索关键词”出现的次数？"></a>如何统计“搜索关键词”出现的次数？</h4><p>先对数据进行分片，然后采用多台机器处理的方法，来提高处理速度。具体的思路是这样的：为了提高处理的速度，我们用 n 台机器并行处理。我们从搜索记录的日志文件中，依次读出每个搜索关键词，并且通过哈希函数计算哈希值，然后再跟 n 取模，最终得到的值，就是应该被分配到的机器编号。</p>
<p>这里的处理过程也是 MapReduce 的基本设计思想</p>
<h4 id="如何快速判断图片是否在图库中？"><a href="#如何快速判断图片是否在图库中？" class="headerlink" title="如何快速判断图片是否在图库中？"></a>如何快速判断图片是否在图库中？</h4><p>我们同样可以对数据进行分片，然后采用多机处理。我们准备 n 台机器，让每台机器只维护某一部分图片对应的散列表。我们每次从图库中读取一个图片，计算唯一标识，然后与机器个数 n 求余取模，得到的值就对应要分配的机器编号，然后将这个图片的唯一标识和图片路径发往对应的机器构建散列表。当我们要判断一个图片是否在图库中的时候，我们通过同样的哈希算法，计算这个图片的唯一标识，然后与机器个数 n 求余取模。假设得到的值是 k，那就去编号 k 的机器构建的散列表中查找。</p>
<p>实际上，针对这种海量数据的处理问题，我们都可以采用多机分布式处理。借助这种分片的思路，可以突破单机内存、CPU 等资源的限制。</p>
<h3 id="分布式存储"><a href="#分布式存储" class="headerlink" title="分布式存储"></a>分布式存储</h3><p>借用前面数据分片的思想，即通过哈希算法对数据取哈希值，然后对机器个数取模，这个最终值就是应该存储的缓存机器编号。但是，如果数据增多，原来的 10 个机器已经无法承受了，我们就需要扩容了。</p>
<p>此时，所有的数据都要重新计算哈希值，然后重新搬移到正确的机器上。这样就相当于，缓存中的数据一下子就都失效了。所有的数据请求都会穿透缓存，直接去请求数据库。这样就可能发生<strong>雪崩效应</strong>，压垮数据库。</p>
<h4 id="一致性哈希算法"><a href="#一致性哈希算法" class="headerlink" title="一致性哈希算法"></a><a href="https://www.sohu.com/a/158141377_479559" target="_blank" rel="noopener">一致性哈希算法</a></h4><p>假设我们有 k 个机器，数据的哈希值的范围是[0, MAX]。我们将整个范围划分成 m 个小区间（m 远大于 k），每个机器负责 m/k 个小区间。当有新机器加入的时候，我们就将某几个小区间的数据，从原来的机器中搬移到新的机器中。这样，既不用全部重新哈希、搬移数据，也保持了各个机器上数据数量的均衡。</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树基础（上）</title>
    <url>/2020/09/04/article-48/</url>
    <content><![CDATA[<p>什么样的二叉树适合用数组来存储？</p>
<a id="more"></a>

<p><img src="6ce8707f43e1a3e7e5368167cca6a4c9.jpg" srcset="/img/loading.gif" alt=""></p>
<h3 id="树（Tree）"><a href="#树（Tree）" class="headerlink" title="树（Tree）"></a>树（Tree）</h3><p><img src="b7043bf29a253bb36221eaec62b2e129.jpg" srcset="/img/loading.gif" alt=""></p>
<p>这里面每个元素我们叫做“节点”；用来连接相邻节点之间的关系，我们叫做“父子关系”。</p>
<p><img src="220043e683ea33b9912425ef759556ae.jpg" srcset="/img/loading.gif" alt=""></p>
<p>上图中，A 节点就是 B 节点的<strong><em>父节点</em></strong>，B 节点是 A 节点的<strong><em>子节点</em></strong>。B、C、D 这三个节点的父节点是同一个节点，所以它们之间互称为<strong><em>兄弟节点</em></strong>。我们把没有父节点的节点叫做<strong><em>根节点</em></strong>，也就是图中的节点 E。我们把没有子节点的节点叫做<strong><em>叶子节点</em></strong>或者<strong><em>叶节点</em></strong>，比如图中的 G、H、I、J、K、L 都是叶子节点。</p>
<h4 id="高度、深度、层"><a href="#高度、深度、层" class="headerlink" title="高度、深度、层"></a>高度、深度、层</h4><p><img src="4094a733986073fedb6b9d03f877d71e.jpg" srcset="/img/loading.gif" alt=""></p>
<p>图文举例</p>
<p><img src="50f89510ad1f7570791dd12f4e9adeb4.jpg" srcset="/img/loading.gif" alt=""></p>
<h3 id="二叉树（Binary-Tree）"><a href="#二叉树（Binary-Tree）" class="headerlink" title="二叉树（Binary Tree）"></a>二叉树（Binary Tree）</h3><p>二叉树，顾名思义，每个节点最多有两个“叉”，也就是两个子节点，分别是左子节点和右子节点。不过，二叉树并不要求每个节点都有两个子节点，有的节点只有左子节点，有的节点只有右子节点。</p>
<p><img src="09c2972d56eb0cf67e727deda0e9412b.jpg" srcset="/img/loading.gif" alt=""></p>
<p>编号 2 的二叉树中，叶子节点全都在最底层，除了叶子节点之外，每个节点都有左右两个子节点，这种二叉树就叫做<strong><em>满二叉树</em></strong>。</p>
<p>编号 3 的二叉树中，叶子节点都在最底下两层，最后一层的叶子节点都靠左排列，并且除了最后一层，其他层的节点个数都要达到最大，这种二叉树叫做<strong><em>完全二叉树</em></strong>。</p>
<p><img src="18413c6597c2850b75367393b401ad60.jpg" srcset="/img/loading.gif" alt=""></p>
<h4 id="如何表示（或者存储）一棵二叉树？"><a href="#如何表示（或者存储）一棵二叉树？" class="headerlink" title="如何表示（或者存储）一棵二叉树？"></a>如何表示（或者存储）一棵二叉树？</h4><h5 id="链式存储法"><a href="#链式存储法" class="headerlink" title="链式存储法"></a>链式存储法</h5><p><img src="12cd11b2432ed7c4dfc9a2053cb70b8e.jpg" srcset="/img/loading.gif" alt=""></p>
<h5 id="顺序存储法"><a href="#顺序存储法" class="headerlink" title="顺序存储法"></a>顺序存储法</h5><p><img src="14eaa820cb89a17a7303e8847a412330.jpg" srcset="/img/loading.gif" alt=""></p>
<p>如果节点 X 存储在数组中下标为 i 的位置，下标为 2 * i 的位置存储的就是左子节点，下标为 2 * i + 1 的位置存储的就是右子节点。反过来，下标为 i/2 的位置存储就是它的父节点。</p>
<p>但这只是完全二叉树，<strong><em>非完全二叉树会浪费比较多的数组存储空间</em></strong>。</p>
<p><strong><em>如果某棵二叉树是一棵完全二叉树，那用数组存储无疑是最节省内存的一种方式。</em></strong></p>
<h4 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h4><p>前序遍历、中序遍历和后序遍历</p>
<p><strong><em>其中，前、中、后序，表示的是节点与它的左右子树节点遍历打印的先后顺序</em></strong></p>
<p><img src="ab103822e75b5b15c615b68560cb2416.jpg" srcset="/img/loading.gif" alt=""></p>
<h5 id="代码实现三种遍历"><a href="#代码实现三种遍历" class="headerlink" title="代码实现三种遍历"></a>代码实现三种遍历</h5><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, value)</span>:</span><br>        self.value = value<br>        self.left = <span class="hljs-literal">None</span><br>        self.right = <span class="hljs-literal">None</span><br><br>A = Node(<span class="hljs-string">'A'</span>)<br>B = Node(<span class="hljs-string">'B'</span>)<br>C = Node(<span class="hljs-string">'C'</span>)<br>D = Node(<span class="hljs-string">'D'</span>)<br>E = Node(<span class="hljs-string">'E'</span>)<br>F = Node(<span class="hljs-string">'F'</span>)<br>G = Node(<span class="hljs-string">'G'</span>)<br><br>A.left = B<br>A.right = C<br><br>B.left = D<br>B.right = E<br><br>C.left = F<br>C.right = G<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinaryTree</span>:</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">preOrder</span><span class="hljs-params">(self, node)</span>:</span><br>        <span class="hljs-string">"""</span><br><span class="hljs-string">        前序遍历</span><br><span class="hljs-string">        :param node:</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        """</span><br>        <span class="hljs-keyword">if</span> node == <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span><br>        print(node.value, end=<span class="hljs-string">" "</span>)<br>        self.preOrder(node.left)<br>        self.preOrder(node.right)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inOreder</span><span class="hljs-params">(self, node)</span>:</span><br>        <span class="hljs-string">"""</span><br><span class="hljs-string">        中序遍历</span><br><span class="hljs-string">        :param node:</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        """</span><br>        <span class="hljs-keyword">if</span> node == <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span><br>        self.inOreder(node.left)<br>        print(node.value, end=<span class="hljs-string">" "</span>)<br>        self.inOreder(node.right)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">postOrder</span><span class="hljs-params">(self, node)</span>:</span><br>        <span class="hljs-string">"""</span><br><span class="hljs-string">        后序遍历</span><br><span class="hljs-string">        :param node:</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        """</span><br>        <span class="hljs-keyword">if</span> node == <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span><br>        self.postOrder(node.left)<br>        self.postOrder(node.right)<br>        print(node.value, end=<span class="hljs-string">" "</span>)<br></code></pre></td></tr></table></figure>

<p>从我前面画的前、中、后序遍历的顺序图，可以看出来，每个节点最多会被访问两次，所以遍历操作的时间复杂度，跟节点的个数 n 成正比，也就是说二叉树遍历的时间复杂度是 O(n)。</p>
<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><h4 id="给定一组数据，比如-1，3，5，6，9，10。你来算算，可以构建出多少种不同的二叉树？"><a href="#给定一组数据，比如-1，3，5，6，9，10。你来算算，可以构建出多少种不同的二叉树？" class="headerlink" title="给定一组数据，比如 1，3，5，6，9，10。你来算算，可以构建出多少种不同的二叉树？"></a>给定一组数据，比如 1，3，5，6，9，10。你来算算，可以构建出多少种不同的二叉树？</h4><p>既然是数组，那就是完全二叉树，所以有 <strong><em>n!</em></strong> 种，由此引申出 <strong><em>卡特兰数</em></strong></p>
<h4 id="我们讲了三种二叉树的遍历方式，前、中、后序。实际上，还有另外一种遍历方式，也就是按层遍历，你知道如何实现吗？"><a href="#我们讲了三种二叉树的遍历方式，前、中、后序。实际上，还有另外一种遍历方式，也就是按层遍历，你知道如何实现吗？" class="headerlink" title="我们讲了三种二叉树的遍历方式，前、中、后序。实际上，还有另外一种遍历方式，也就是按层遍历，你知道如何实现吗？"></a>我们讲了三种二叉树的遍历方式，前、中、后序。实际上，还有另外一种遍历方式，也就是按层遍历，你知道如何实现吗？</h4><p>使用队列实现。出队的同时，把他的子节点依次入队。</p>
<p>代码实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 层级遍历</span><br>nodes = [A]<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">lineOrder</span><span class="hljs-params">(nodes)</span>:</span><br>    <span class="hljs-keyword">if</span> nodes:<br>        node = nodes.pop(<span class="hljs-number">0</span>)<br>        print(node.value, end=<span class="hljs-string">' '</span>)<br>        <span class="hljs-keyword">if</span> node.left:<br>            nodes.append(node.left)<br>        <span class="hljs-keyword">if</span> node.right:<br>            nodes.append(node.right)<br><br>        lineOrder(nodes)<br></code></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树基础（下）</title>
    <url>/2020/09/04/article-49/</url>
    <content><![CDATA[<p>有了如此高效的散列表，为什么还需要二叉树？</p>
<a id="more"></a>

<p>查找不光是查找某一个值，还会查找一个特定的范围，这在散列表里面就不一定适用了。类似B+树之类的，只在叶子节点保存数据，并且将其用链表连起来。散列表在扩缩容的时候，性能不大稳定，同时由于散列冲突的存在，虽然散列表的时间复杂度是常数级别的，但实际应用中，由于其不稳定，性能也不一定会比平衡二叉搜索树好。</p>
<h3 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h3><p>支持快速查找一个数据，还支持快速插入、删除一个数据。</p>
<h4 id="结构特点"><a href="#结构特点" class="headerlink" title="结构特点"></a>结构特点</h4><p><strong><em>二叉查找树要求，在树中的任意一个节点，其左子树中的每个节点的值，都要小于这个节点的值，而右子树节点的值都大于这个节点的值。</em></strong></p>
<p><img src="f3bb11b6d4a18f95aa19e11f22b99bae.jpg" srcset="/img/loading.gif" alt=""></p>
<p>示例树：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, value)</span>:</span><br>        self.value = value<br>        self.left = <span class="hljs-literal">None</span><br>        self.right = <span class="hljs-literal">None</span><br><br>root = Node(<span class="hljs-number">33</span>)<br>B = Node(<span class="hljs-number">17</span>)<br>C = Node(<span class="hljs-number">50</span>)<br>D = Node(<span class="hljs-number">13</span>)<br>E = Node(<span class="hljs-number">18</span>)<br>F = Node(<span class="hljs-number">34</span>)<br>G = Node(<span class="hljs-number">58</span>)<br>H = Node(<span class="hljs-number">16</span>)<br>I = Node(<span class="hljs-number">25</span>)<br>J = Node(<span class="hljs-number">51</span>)<br>K = Node(<span class="hljs-number">66</span>)<br>L = Node(<span class="hljs-number">19</span>)<br>M = Node(<span class="hljs-number">27</span>)<br><br>root.left = B<br>root.right = C<br><br>B.left = D<br>B.right = E<br><br>C.left = F<br>C.right = G<br><br>D.right = H<br>E.right = I<br><br>G.left = J<br>G.right = K<br><br>I.left = L<br>I.right = M<br></code></pre></td></tr></table></figure>



<h4 id="二叉查找树的查找操作"><a href="#二叉查找树的查找操作" class="headerlink" title="二叉查找树的查找操作"></a>二叉查找树的查找操作</h4><p>我们先取根节点，如果它等于我们要查找的数据，那就返回。如果要查找的数据比根节点的值小，那就在左子树中递归查找；如果要查找的数据比根节点的值大，那就在右子树中递归查找。</p>
<h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinarySearchTree</span>:</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">search</span><span class="hljs-params">(self, root, val)</span>:</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">"not in"</span><br><br>        <span class="hljs-keyword">if</span> val == root.value:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">"in"</span><br><br>        <span class="hljs-keyword">if</span> val &lt; root.value:<br>            <span class="hljs-keyword">return</span> self.search(root.left, val)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> self.search(root.right, val)<br></code></pre></td></tr></table></figure>

<h4 id="二叉查找树的插入操作"><a href="#二叉查找树的插入操作" class="headerlink" title="二叉查找树的插入操作"></a>二叉查找树的插入操作</h4><p>如果要插入的数据比节点的数据大，并且节点的右子树为空，就将新数据直接插到右子节点的位置；如果不为空，就再递归遍历右子树，查找插入位置。同理，如果要插入的数据比节点数值小，并且节点的左子树为空，就将新数据插入到左子节点的位置；如果不为空，就再递归遍历左子树，查找插入位置。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinarySearchTree</span>:</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(self, root, node)</span>:</span><br>        print(root.value)<br>        <span class="hljs-keyword">if</span> root.value == node.value:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">"已存在"</span><br><br>        <span class="hljs-keyword">if</span> node.value &lt; root.value:<br>            <span class="hljs-keyword">if</span> root.left <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                root.left = node<br>            <span class="hljs-keyword">else</span>:<br>                self.add(root.left, node)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> root.right <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                root.right = node<br>            <span class="hljs-keyword">else</span>:<br>                self.add(root.right, node)<br></code></pre></td></tr></table></figure>

<h4 id="二叉查找树的删除操作"><a href="#二叉查找树的删除操作" class="headerlink" title="二叉查找树的删除操作"></a>二叉查找树的删除操作</h4><p><img src="299c615bc2e00dc32225f4d9e3490e2c.jpg" srcset="/img/loading.gif" alt=""></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BinarySearchTree</span>:</span><br>  <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete</span><span class="hljs-params">(self, root, pre, val)</span>:</span><br>        <span class="hljs-keyword">if</span> root.value == val:<br>            <span class="hljs-comment"># 删除叶子结点</span><br>            <span class="hljs-keyword">if</span> root.left <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> root.right <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">if</span> pre <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                    root.value = <span class="hljs-literal">None</span><br>                    <span class="hljs-keyword">return</span><br>                print(<span class="hljs-string">"delete"</span>)<br>                pre.left = <span class="hljs-literal">None</span><br>                pre.right = <span class="hljs-literal">None</span><br>                <span class="hljs-keyword">return</span><br><br>            <span class="hljs-comment"># 目标删除节点只有一个子节点</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (root.left <span class="hljs-keyword">and</span> root.right) <span class="hljs-keyword">and</span> (root.left <span class="hljs-keyword">or</span> root.right):<br>                _ = root.left <span class="hljs-keyword">or</span> root.right<br>                <span class="hljs-keyword">if</span> pre <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                    sentryNode.header = _<br>                <span class="hljs-keyword">elif</span> root.value == pre.left.value:<br>                    pre.left = _<br>                <span class="hljs-keyword">else</span>:<br>                    pre.right = _<br><br>                <span class="hljs-keyword">return</span><br><br>            <span class="hljs-keyword">if</span> root.left <span class="hljs-keyword">and</span> root.right:<br>                _ = root.right<br>                <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>                    <span class="hljs-keyword">if</span> _.left.left == <span class="hljs-literal">None</span>:<br>                        <span class="hljs-keyword">if</span> root.pre == pre.left.value:<br>                            _.left.right = root.right<br>                            pre.left = _.left<br>                            _.left = <span class="hljs-literal">None</span><br>                        <span class="hljs-keyword">else</span>:<br>                            _.left.right = root.right<br>                            pre.right = _.left<br>                            _.left = <span class="hljs-literal">None</span><br>                        <span class="hljs-keyword">break</span><br>                    <span class="hljs-keyword">else</span>:<br>                        _ = _.left<br><br>        <span class="hljs-keyword">elif</span> val &lt; root.value:<br>            self.delete(root.left, root, val)<br>        <span class="hljs-keyword">else</span>:<br>            self.delete(root.right, root, val)<br></code></pre></td></tr></table></figure>

<p>实际上，关于二叉查找树的删除操作，还有个非常简单、取巧的方法，就是单纯将要删除的节点标记为“已删除”，但是并不真正从树中将这个节点去掉。这样原本删除的节点还需要存储在内存中，比较浪费内存空间，但是删除操作就变得简单了很多。而且，这种处理方法也并没有增加插入、查找操作代码实现的难度。</p>
<h4 id="二叉查找树的其他操作"><a href="#二叉查找树的其他操作" class="headerlink" title="二叉查找树的其他操作"></a>二叉查找树的其他操作</h4><p>还可以支持快速地查找最大节点和最小节点、前驱节点和后继节点。</p>
<p>一个重要的特性，就是<strong><em>中序遍历二叉查找树，可以输出有序的数据序列</em></strong>，时间复杂度是 O(n)，非常高效。因此，<strong><em>二叉查找树也叫作二叉排序树</em></strong>。</p>
<h3 id="支持重复数据的二叉查找树"><a href="#支持重复数据的二叉查找树" class="headerlink" title="支持重复数据的二叉查找树"></a>支持重复数据的二叉查找树</h3><h4 id="第一种方法比较容易。"><a href="#第一种方法比较容易。" class="headerlink" title="第一种方法比较容易。"></a>第一种方法比较容易。</h4><p>二叉查找树中每一个节点不仅会存储一个数据，因此我们通过链表和支持动态扩容的数组等数据结构，把值相同的数据都存储在同一个节点上。</p>
<h4 id="第二种方法比较不好理解，不过更加优雅。"><a href="#第二种方法比较不好理解，不过更加优雅。" class="headerlink" title="第二种方法比较不好理解，不过更加优雅。"></a>第二种方法比较不好理解，不过更加优雅。</h4><p>每个节点仍然只存储一个数据。在查找插入位置的过程中，如果碰到一个节点的值，与要插入数据的值相同，我们就将这个要插入的数据放到这个节点的右子树，也就是说，把这个新插入的数据当作大于这个节点的值来处理。</p>
<p><img src="3f59a40e3d927f567022918d89590a5f.jpg" srcset="/img/loading.gif" alt=""></p>
<p>当要查找数据的时候，遇到值相同的节点，我们并不停止查找操作，而是继续在右子树中查找，直到遇到叶子节点，才停止。这样就可以把键值等于要查找值的所有节点都找出来。</p>
<p>对于删除操作，我们也需要先查找到每个要删除的节点，然后再按前面讲的删除操作的方法，依次删除。</p>
<p><img src="254a4800703d31612c0af63870260517.jpg" srcset="/img/loading.gif" alt=""></p>
<h3 id="二叉查找树的时间复杂度分析"><a href="#二叉查找树的时间复杂度分析" class="headerlink" title="二叉查找树的时间复杂度分析"></a>二叉查找树的时间复杂度分析</h3><p><img src="e3d9b2977d350526d2156f01960383d9.jpg" srcset="/img/loading.gif" alt=""></p>
<p>时间复杂度其实都跟树的高度成正比，也就是 O(height)。</p>
<h4 id="如何求一棵包含-n-个节点的完全二叉树的高度？"><a href="#如何求一棵包含-n-个节点的完全二叉树的高度？" class="headerlink" title="如何求一棵包含 n 个节点的完全二叉树的高度？"></a>如何求一棵包含 n 个节点的完全二叉树的高度？</h4><p>由图中可得，包含n个节点的完全二叉树种，第K层的节点个数为2^(k-1)</p>
<p>借助等比数列的求和公式，我们可以计算出，L 的范围是[log2(n+1), log2n +1]。完全二叉树的层数小于等于 log2n +1，也就是说，完全二叉树的高度小于等于 log2n。</p>
<h3 id="相对散列表，为什么要用二叉查找树呢？"><a href="#相对散列表，为什么要用二叉查找树呢？" class="headerlink" title="相对散列表，为什么要用二叉查找树呢？"></a>相对散列表，为什么要用二叉查找树呢？</h3><p>第一，散列表中的数据是无序存储的，如果要输出有序的数据，需要先进行排序。而对于二叉查找树来说，我们只需要中序遍历，就可以在 O(n) 的时间复杂度内，输出有序的数据序列。</p>
<p>第二，散列表扩容耗时很多，而且当遇到散列冲突时，性能不稳定，尽管二叉查找树的性能不稳定，但是在工程中，我们最常用的平衡二叉查找树的性能非常稳定，时间复杂度稳定在 O(logn)。</p>
<p>第三，笼统地来说，尽管散列表的查找等操作的时间复杂度是常量级的，但因为哈希冲突的存在，这个常量不一定比 logn 小，所以实际的查找速度可能不一定比 O(logn) 快。加上哈希函数的耗时，也不一定就比平衡二叉查找树的效率高。</p>
<p>第四，散列表的构造比二叉查找树要复杂，需要考虑的东西很多。比如散列函数的设计、冲突解决办法、扩容、缩容等。平衡二叉查找树只需要考虑平衡性这一个问题，而且这个问题的解决方案比较成熟、固定。</p>
<p>最后，为了避免过多的散列冲突，散列表装载因子不能太大，特别是基于开放寻址法解决冲突的散列表，不然会浪费一定的存储空间。</p>
<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><h4 id="求一棵给定二叉树的确切高度？"><a href="#求一棵给定二叉树的确切高度？" class="headerlink" title="求一棵给定二叉树的确切高度？"></a>求一棵给定二叉树的确切高度？</h4><p>使用递归，遍历左子树和右子树，根节点高度=max(左子树高度，右子树高度) + 1</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>JS逆向学习-淘**</title>
    <url>/2020/05/11/article-5/</url>
    <content><![CDATA[<p>懂得都懂：aHR0cHM6Ly90YW9kYXhpYW5nLmNvbS9jcmVkaXQy</p>
<a id="more"></a>

<h3 id="网站分析"><a href="#网站分析" class="headerlink" title="网站分析"></a>网站分析</h3><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><p>打开网站按F12开始调试，发现该网站有无限debugger：</p>
<p><img src="WX20200511-121718.png" srcset="/img/loading.gif" alt=""></p>
<p>在对应行右键选择 “Never pause here”, 然后点击屏幕上的箭头便可绕过</p>
<p>然后查看请求，在XHR中发现了目标信息和加密参数：</p>
<p><img src="WX20200511-122949.png" srcset="/img/loading.gif" alt=""></p>
<h4 id="定位加密位置"><a href="#定位加密位置" class="headerlink" title="定位加密位置"></a>定位加密位置</h4><p>通过搜索关键字“sign”可以发现这几个位置：</p>
<p><img src="WX20200511-123230.png" srcset="/img/loading.gif" alt=""></p>
<p>再搜索 <strong><em>_0x5b56f8</em></strong> 便可定位到加密位置，打上断点进行调试：</p>
<p><img src="WX20200511-123557.png" srcset="/img/loading.gif" alt=""></p>
<p><img src="WX20200511-124307.png" srcset="/img/loading.gif" alt=""></p>
<p><em>由此可知最终的加密操作是在 <strong>case 0</strong> 中完成的，通过断点调试会发现是对</em> <strong><em>一个特殊字符串</em></strong> 进行了md5加密，接下来我们分析这个字符串是怎么得出的</p>
<p>在 <strong><em>case 5</em></strong> 中同样对 <strong><em>_0x5b56f8</em></strong> 进行了操作，并且确定这里就是生成被加密字符串的位置</p>
<p><img src="WX20200511-140037.png" srcset="/img/loading.gif" alt=""></p>
<p>在分析这段代可知是对 <strong><em>_0x8c9894</em></strong> 和 <strong><em>_0x4ea2ce</em></strong>进行了一些列算数操作，接下来我们在分析这两个参数</p>
<p>分析 <strong><em>case 3</em></strong> 中发现 <strong><em>_0x4ea2ce</em></strong> 是固定值</p>
<p><img src="WX20200511-140550.png" srcset="/img/loading.gif" alt=""></p>
<p>分析 <strong><em>case 2</em></strong> 可知这里又做了一个md5加密，被加密字符串的组成结构是 account +  <strong><em>_0x4ea2ce</em></strong> + account + type值</p>
<p><img src="WX20200511-140843.png" srcset="/img/loading.gif" alt=""></p>
<p>至此我们已经找到获取加密参数的所有元素</p>
<h3 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h3><p>结合上面的逻辑，我们开始进行逆向测试</p>
<p>首先获取 <strong><em>_0x8c9894</em></strong> 的值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><br>_0x4ea2ce= <span class="hljs-string">'7176a337dffebf0ff2d30d65fda5af78'</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">md5value</span><span class="hljs-params">(s)</span>:</span><br>    a = md5(s.encode()).hexdigest()<br>    <span class="hljs-keyword">return</span> a<br><br>s = <span class="hljs-string">'%s%s%s0'</span> %(<span class="hljs-string">'这个帐号只是传说'</span>, _0x4ea2ce, <span class="hljs-string">'这个帐号只是传说'</span>)<br><br>_0x8c9894 = md5value(s) + <span class="hljs-string">' '</span><br>print(_0x8c9894)<br><span class="hljs-meta">&gt;&gt;&gt; </span>f81765c208bcc1a6892863af77bb4fae<br></code></pre></td></tr></table></figure>

<p>这里要注意 <strong>最后的结果还要加一个空格</strong> 应该是 <strong><em>“f81765c208bcc1a6892863af77bb4fae ”</em></strong></p>
<p>接下来获取 <strong><em>_0x5b56f8</em></strong> 的值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 方法映射</span><br>_0x36294a = &#123;<br>    <span class="hljs-string">"VIRpO"</span>: <span class="hljs-keyword">lambda</span> a, b: a &lt; b,<br>    <span class="hljs-string">"PRedm"</span>: <span class="hljs-keyword">lambda</span> a, b: a % b,<br>    <span class="hljs-string">"TTSVu"</span>: <span class="hljs-keyword">lambda</span> a, b: a + b,<br>    <span class="hljs-string">"rOuyL"</span>: <span class="hljs-keyword">lambda</span> a, b: a % b,<br>    <span class="hljs-string">"YJYZC"</span>: <span class="hljs-keyword">lambda</span> a, b: a * b,<br>    <span class="hljs-string">"LrwDB"</span>: <span class="hljs-keyword">lambda</span> a, b: a * b,<br>&#125;<br><br>_0x5b56f8 = <span class="hljs-string">''</span><br><br><span class="hljs-keyword">for</span> _0x1af38d <span class="hljs-keyword">in</span> range(<span class="hljs-number">32</span>):<br>    _0x5b56f8 += str(_0x36294a[<span class="hljs-string">"PRedm"</span>](_0x36294a[<span class="hljs-string">"TTSVu"</span>](_0x36294a[<span class="hljs-string">"TTSVu"</span>](_0x36294a[<span class="hljs-string">"TTSVu"</span>](ord(_0x4ea2ce[_0x1af38d]), _0x36294a[<span class="hljs-string">"rOuyL"</span>](_0x36294a[<span class="hljs-string">"YJYZC"</span>](ord(_0x4ea2ce[_0x1af38d]), ord(_0x4ea2ce[_0x1af38d])), <span class="hljs-number">0x20</span>)), ord(_0x8c9894[_0x1af38d])), _0x36294a[<span class="hljs-string">"LrwDB"</span>](_0x1af38d, _0x1af38d)), <span class="hljs-number">0x9</span>))<br><br>print(_0x5b56f8)<br>&gt;&gt;&gt;<span class="hljs-number">38856360307430874440750784857572</span><br></code></pre></td></tr></table></figure>

<p>这里看到已经成功获取了md5加密前的字符串，然后我们对其加密并进行比对</p>
<p><img src="WX20200511-151435.png" srcset="/img/loading.gif" alt=""></p>
<p>发现与前面目标请求的 <strong><em>sign</em></strong> 相同，至此已经成功获取了加密参数</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> aiohttp<br><span class="hljs-keyword">import</span> asyncio<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><br>url = <span class="hljs-string">'aHR0cHM6Ly90YW9kYXhpYW5nLmNvbS9jcmVkaXQy'</span><br><br><span class="hljs-comment"># 固定加密字符串</span><br>_0x4ea2ce= <span class="hljs-string">'7176a337dffebf0ff2d30d65fda5af78'</span><br><br><span class="hljs-comment"># sign 加密要用到的方法映射（模拟网站JS代码）</span><br>_0x36294a = &#123;<br>    <span class="hljs-string">"VIRpO"</span>: <span class="hljs-keyword">lambda</span> a, b: a &lt; b,<br>    <span class="hljs-string">"PRedm"</span>: <span class="hljs-keyword">lambda</span> a, b: a % b,<br>    <span class="hljs-string">"TTSVu"</span>: <span class="hljs-keyword">lambda</span> a, b: a + b,<br>    <span class="hljs-string">"rOuyL"</span>: <span class="hljs-keyword">lambda</span> a, b: a % b,<br>    <span class="hljs-string">"YJYZC"</span>: <span class="hljs-keyword">lambda</span> a, b: a * b,<br>    <span class="hljs-string">"LrwDB"</span>: <span class="hljs-keyword">lambda</span> a, b: a * b,<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_md5</span><span class="hljs-params">(s)</span>:</span><br>    <span class="hljs-string">"""</span><br><span class="hljs-string">    md5 加密</span><br><span class="hljs-string">    :param s:</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    """</span><br>    result = md5(s.encode()).hexdigest()<br>    <span class="hljs-keyword">return</span> result<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">set_data</span><span class="hljs-params">(account, typ)</span>:</span><br>    <span class="hljs-string">"""</span><br><span class="hljs-string">    构造请求参数</span><br><span class="hljs-string">    :param account:</span><br><span class="hljs-string">    :param typ:</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    """</span><br>    <span class="hljs-comment"># 设置 _0x8c9894 加密规则</span><br>    s = <span class="hljs-string">f"<span class="hljs-subst">&#123;account&#125;</span><span class="hljs-subst">&#123;_0x4ea2ce&#125;</span><span class="hljs-subst">&#123;account&#125;</span><span class="hljs-subst">&#123;typ&#125;</span>"</span><br><br>    _0x8c9894 = get_md5(s) + <span class="hljs-string">' '</span><br><br>    _0x5b56f8 = <span class="hljs-string">''</span><br><br>    <span class="hljs-comment"># 获取 sign 值</span><br>    <span class="hljs-keyword">for</span> _0x1af38d <span class="hljs-keyword">in</span> range(<span class="hljs-number">32</span>):<br>        _0x5b56f8 += str(_0x36294a[<span class="hljs-string">"PRedm"</span>](_0x36294a[<span class="hljs-string">"TTSVu"</span>](_0x36294a[<span class="hljs-string">"TTSVu"</span>](<br>            _0x36294a[<span class="hljs-string">"TTSVu"</span>](ord(_0x4ea2ce[_0x1af38d]), _0x36294a[<span class="hljs-string">"rOuyL"</span>](<br>                _0x36294a[<span class="hljs-string">"YJYZC"</span>](ord(_0x4ea2ce[_0x1af38d]), ord(_0x4ea2ce[_0x1af38d])), <span class="hljs-number">0x20</span>)),<br>            ord(_0x8c9894[_0x1af38d])), _0x36294a[<span class="hljs-string">"LrwDB"</span>](_0x1af38d, _0x1af38d)), <span class="hljs-number">0x9</span>))<br><br>    output = &#123;<br>        <span class="hljs-string">"account"</span>: account,<br>        <span class="hljs-string">"type"</span>: <span class="hljs-string">"0"</span>,<br>        <span class="hljs-string">"sign"</span>: _0x5b56f8<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> output<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_info</span><span class="hljs-params">(url, data)</span>:</span><br>    <span class="hljs-comment"># ssl证书设置</span><br>    conn = aiohttp.TCPConnector(ssl=<span class="hljs-literal">False</span>)<br>    <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> aiohttp.ClientSession(connector=conn) <span class="hljs-keyword">as</span> session:<br>        <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> session.post(url, data=data, proxy=proxy) <span class="hljs-keyword">as</span> resp:<br>            <span class="hljs-keyword">if</span> resp.status:<br>                info = <span class="hljs-keyword">await</span> resp.json(content_type=<span class="hljs-string">'text/html'</span>,encoding=<span class="hljs-string">'utf-8'</span>)<br>                <span class="hljs-keyword">return</span> info<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    accounts = [account1, account2]<br>    event_loop = asyncio.get_event_loop()<br>    tasks = [get_info(url, set_data(account, <span class="hljs-string">'0'</span>)) <span class="hljs-keyword">for</span> account <span class="hljs-keyword">in</span> accounts]<br>    event_loop.run_until_complete(asyncio.wait(tasks))<br>    event_loop.close()<br></code></pre></td></tr></table></figure>



<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>该网站的逆向并不难，通过全局搜索关键字就可以定位到加密位置，关键在于绕过无限Debugger和对混淆代码的分析</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>JS逆向</category>
      </categories>
      <tags>
        <tag>JS逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>红黑树（上）</title>
    <url>/2020/09/07/article-50/</url>
    <content><![CDATA[<p>为什么工程中都用红黑树这种二叉树？</p>
<a id="more"></a>

<p>我们学习数据结构和算法，要学习它的由来、特性、适用的场景以及它能解决的问题。对于红黑树，也不例外。你如果能搞懂这几个问题，其实就已经足够了。 由来及解决的问题：普通二叉树会在某些特殊情况下，有二叉树退化为链表，导致时间复杂度从O(logN)退化到O(n)。所以，产生了平衡二叉树。 适用的场景：需要频繁的进行动态的插入、删除以及查找。 红黑树的特性：红黑树不是严格的平衡二叉树（任意一节点的左子树与右子树高度差不超过1），红黑树有可能最短路径和最长路径相差一倍。但是红黑树的优势在于：红黑树的增删查的性能没有相比于平衡二叉树低太多。而维护插入、删除等平衡操作时，付出的成本要低于AVL等严格的平衡二叉树。所以在工程中更加常用。 红黑树的缺点：实现起来比较复杂，可能更多的会采用跳表来进行实现。</p>
<p>AVL 树是一种高度平衡的二叉树，所以查找的效率非常高，但是，有利就有弊，AVL 树为了维持这种高度的平衡，就要付出更多的代价。每次插入、删除都要做调整，就比较复杂、耗时。所以，对于有频繁的插入、删除操作的数据集合，使用 AVL 树的代价就有点高了。红黑树只是做到了近似平衡，并不是严格的平衡，所以在维护平衡的成本上，要比 AVL 树要低。所以，红黑树的插入、删除、查找各种操作性能都比较稳定。对于工程应用来说，要面对各种异常情况，为了支撑这种工业级的应用，我们更倾向于这种性能稳定的平衡二叉查找树。</p>
<h3 id="什么是“平衡二叉查找树”？"><a href="#什么是“平衡二叉查找树”？" class="headerlink" title="什么是“平衡二叉查找树”？"></a>什么是“平衡二叉查找树”？</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>二叉树中任意一个节点的左右子树的高度相差不能大于 1。从这个定义来看，上一节我们讲的完全二叉树、满二叉树其实都是平衡二叉树，但是非完全二叉树也有可能是平衡二叉树。</p>
<p><img src="dd9f5a4525f5029a8339c89ad1c8159b.jpg" srcset="/img/loading.gif" alt=""></p>
<h4 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h4><p><strong><em>发明平衡二叉查找树这类数据结构的初衷是，解决普通二叉查找树在频繁的插入、删除等动态更新的情况下，出现时间复杂度退化的问题。</em></strong></p>
<p>所以，平衡二叉查找树中“平衡”的意思，其实就是让整棵树左右看起来比较“对称”、比较“平衡”，不要出现左子树很高、右子树很矮的情况。这样就能让整棵树的高度相对来说低一些，相应的插入、删除、查找等操作的效率高一些。</p>
<h3 id="如何定义一棵“红黑树”？"><a href="#如何定义一棵“红黑树”？" class="headerlink" title="如何定义一棵“红黑树”？"></a>如何定义一棵“红黑树”？</h3><p>顾名思义，红黑树中的节点，一类被标记为黑色，一类被标记为红色。除此之外，一棵红黑树还需要满足这样几个要求：</p>
<ul>
<li>根节点是黑色的；</li>
<li>每个叶子节点都是黑色的空节点（NIL），也就是说，叶子节点不存储数据；</li>
<li>任何相邻的节点都不能同时为红色，也就是说，红色节点是被黑色节点隔开的；</li>
<li>每个节点，从该节点到达其可达叶子节点的所有路径，都包含相同数目的黑色节点；</li>
</ul>
<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><h4 id="动态数据结构支持动态的数据插入、删除、查找操作，除了红黑树，我们前面还学习过哪些呢？能对比一下各自的优势、劣势，以及应用场景吗？"><a href="#动态数据结构支持动态的数据插入、删除、查找操作，除了红黑树，我们前面还学习过哪些呢？能对比一下各自的优势、劣势，以及应用场景吗？" class="headerlink" title="动态数据结构支持动态的数据插入、删除、查找操作，除了红黑树，我们前面还学习过哪些呢？能对比一下各自的优势、劣势，以及应用场景吗？"></a>动态数据结构支持动态的数据插入、删除、查找操作，除了红黑树，我们前面还学习过哪些呢？能对比一下各自的优势、劣势，以及应用场景吗？</h4><p>动态数据结构有链表，栈，队列，哈希表等等。链表适合遍历的场景，插入和删除操作方便，栈和队列可以算一种特殊的链表，分别适用先进后出和先进先出的场景。哈希表适合插入和删除比较少（尽量少的扩容和缩容），查找比较多的时候。红黑树对数据要求有序，对数据增删查都有一定要求的时候。</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>红黑树（下）</title>
    <url>/2020/09/07/article-51/</url>
    <content><![CDATA[<p>掌握这些技巧，你也可以实现一个红黑树</p>
<a id="more"></a>

<h3 id="实现红黑树的基本思想"><a href="#实现红黑树的基本思想" class="headerlink" title="实现红黑树的基本思想"></a>实现红黑树的基本思想</h3><p>主体流程：遇到什么样的节点排布，我们就对应怎么去调整。</p>
<p>两个重要操作：<strong><em>左旋、右旋</em></strong></p>
<p><img src="0e37e597737012593a93105ebbf4591e.jpg" srcset="/img/loading.gif" alt=""></p>
<h3 id="插入操作的平衡调整"><a href="#插入操作的平衡调整" class="headerlink" title="插入操作的平衡调整"></a>插入操作的平衡调整</h3><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><p><strong><em>红黑树规定，插入的节点必须是红色的。而且，二叉查找树中新插入的节点都是放在叶子节点上。</em></strong>所以，关于插入操作的平衡调整，有这样两种特殊情况，但是也都非常好处理。</p>
<ul>
<li>如果插入节点的父节点是黑色的，那我们什么都不用做，它仍然满足红黑树的定义。</li>
<li>如果插入的节点是根节点，那我们直接改变它的颜色，把它变成黑色就可以了。</li>
</ul>
<p>除此之外，其他情况都会违背红黑树的定义，于是我们就需要进行调整，调整的过程包含两种基础的操作：<strong><em>左右旋转和改变颜色</em></strong>。</p>
<p>红黑树的平衡调整过程是一个迭代的过程。我们把正在处理的节点叫做<strong><em>关注节点</em></strong>。关注节点会随着不停地迭代处理，而不断发生变化。最开始的关注节点就是新插入的节点。</p>
<p>一般有三种情况：</p>
<h5 id="CASE-1："><a href="#CASE-1：" class="headerlink" title="CASE 1："></a>CASE 1：</h5><p>如果关注节点是 a，它的叔叔节点 d 是红色，我们就依次执行下面的操作：</p>
<ul>
<li>将关注节点 a 的父节点 b、叔叔节点 d 的颜色都设置成黑色；</li>
<li>将关注节点 a 的祖父节点 c 的颜色设置成红色；</li>
<li>关注节点变成 a 的祖父节点 c；</li>
<li>跳到 CASE 2 或者 CASE 3。</li>
</ul>
<p><img src="603cf91f54b5db21bd02c6c5678ecf40.jpg" srcset="/img/loading.gif" alt=""></p>
<h5 id="CASE-2："><a href="#CASE-2：" class="headerlink" title="CASE 2："></a>CASE 2：</h5><p>如果关注节点是 a，它的叔叔节点 d 是黑色，关注节点 a 是其父节点 b 的右子节点，我们就依次执行下面的操作：</p>
<ul>
<li>关注节点变成节点 a 的父节点 b；</li>
<li>围绕新的关注节点b 左旋；</li>
<li>跳到 CASE 3。</li>
</ul>
<p><img src="4480a314f9d83c343b8adbb28b6782ad.jpg" srcset="/img/loading.gif" alt=""></p>
<h5 id="CASE-3："><a href="#CASE-3：" class="headerlink" title="CASE 3："></a>CASE 3：</h5><p>如果关注节点是 a，它的叔叔节点 d 是黑色，关注节点 a 是其父节点 b 的左子节点，我们就依次执行下面的操作：</p>
<ul>
<li>围绕关注节点 a 的祖父节点 c 右旋；</li>
<li>将关注节点 a 的父节点 b、兄弟节点 c 的颜色互换。</li>
<li>调整结束。</li>
</ul>
<p><img src="04650d9470b1e67899f5b8b7b8e33212.jpg" srcset="/img/loading.gif" alt=""></p>
<h3 id="删除操作的平衡调整"><a href="#删除操作的平衡调整" class="headerlink" title="删除操作的平衡调整"></a>删除操作的平衡调整</h3><p>删除操作的平衡调整分为两步：</p>
<p>第一步是<strong><em>针对删除节点初步调整</em></strong>。初步调整只是保证整棵红黑树在一个节点删除之后，仍然满足最后一条定义的要求，也就是说，每个节点，从该节点到达其可达叶子节点的所有路径，都包含相同数目的黑色节点；</p>
<p>第二步是<strong><em>针对关注节点进行二次调整</em></strong>，让它满足红黑树的第三条定义，即不存在相邻的两个红色节点。</p>
<h4 id="针对删除节点初步调整"><a href="#针对删除节点初步调整" class="headerlink" title="针对删除节点初步调整"></a>针对删除节点初步调整</h4><p>红黑树的定义中“只包含红色节点和黑色节点”，经过初步调整之后，为了保证满足红黑树定义的最后一条要求，<strong><em>有些节点会被标记成两种颜色，“红 - 黑”或者“黑 - 黑”。如果一个节点被标记为了“黑 - 黑”</em></strong>，那在计算黑色节点个数的时候，要算成两个黑色节点。</p>
<h5 id="CASE-1：-1"><a href="#CASE-1：-1" class="headerlink" title="CASE 1："></a>CASE 1：</h5><p>如果要删除的节点是 a，它只有一个子节点 b，那我们就依次进行下面的操作：</p>
<ul>
<li>删除节点 a，并且把节点 b 替换到节点 a 的位置，这一部分操作跟普通的二叉查找树的删除操作一样；</li>
<li>节点 a 只能是黑色，节点 b 也只能是红色，其他情况均不符合红黑树的定义。这种情况下，我们把节点 b 改为黑色；</li>
<li>调整结束，不需要进行二次调整。</li>
</ul>
<p><img src="a6c4c347b7cbdf57662bab399ed36cc3.jpg" srcset="/img/loading.gif" alt=""></p>
<h5 id="CASE-2：-1"><a href="#CASE-2：-1" class="headerlink" title="CASE 2："></a>CASE 2：</h5><p><strong><em>如果要删除的节点 a 有两个非空子节点，并且它的后继节点就是节点 a 的右子节点 c。</em></strong>我们就依次进行下面的操作：</p>
<ul>
<li>如果节点 a 的后继节点就是右子节点 c，那右子节点 c 肯定没有左子树。我们把节点 a 删除，并且将节点 c 替换到节点 a 的位置。这一部分操作跟普通的二叉查找树的删除操作无异；</li>
<li>然后把节点 c 的颜色设置为跟节点 a 相同的颜色；</li>
<li>如果节点 c 是黑色，为了不违反红黑树的最后一条定义，我们给节点 c 的右子节点 d 多加一个黑色，这个时候节点 d 就成了“红 - 黑”或者“黑 - 黑”；</li>
<li>这个时候，关注节点变成了节点 d，第二步的调整操作就会针对关注节点来做。</li>
</ul>
<p><img src="48e3bd2cdd66cb635f8a4df8fb8fd64e.jpg" srcset="/img/loading.gif" alt=""></p>
<h5 id="CASE-3：-1"><a href="#CASE-3：-1" class="headerlink" title="CASE 3："></a>CASE 3：</h5><p><strong><em>如果要删除的是节点 a，它有两个非空子节点，并且节点 a 的后继节点不是右子节点</em></strong>，我们就依次进行下面的操作：</p>
<ul>
<li>找到后继节点 d，并将它删除，删除后继节点 d 的过程参照 CASE 1；</li>
<li>将节点 a 替换成后继节点 d；</li>
<li>把节点 d 的颜色设置为跟节点 a 相同的颜色；</li>
<li>如果节点 d 是黑色，为了不违反红黑树的最后一条定义，我们给节点 d 的右子节点 c 多加一个黑色，这个时候节点 c 就成了“红 - 黑”或者“黑 - 黑”；</li>
<li>这个时候，关注节点变成了节点 c，第二步的调整操作就会针对关注节点来做。</li>
</ul>
<p><img src="b93c1fa4de16aee5482424ddf49f3c29.jpg" srcset="/img/loading.gif" alt=""></p>
<h4 id="针对关注节点进行二次调整"><a href="#针对关注节点进行二次调整" class="headerlink" title="针对关注节点进行二次调整"></a>针对关注节点进行二次调整</h4><p>二次调整是为了让红黑树中不存在相邻的红色节点。</p>
<h5 id="CASE-1：-2"><a href="#CASE-1：-2" class="headerlink" title="CASE 1："></a>CASE 1：</h5><p><strong><em>如果关注节点是 a，它的兄弟节点 c 是红色的，</em></strong>我们就依次进行下面的操作：</p>
<ul>
<li>围绕关注节点 a 的父节点 b 左旋；</li>
<li>关注节点 a 的父节点 b 和祖父节点 c 交换颜色；</li>
<li>关注节点不变；</li>
<li>继续从四种情况中选择适合的规则来调整。</li>
</ul>
<p><img src="ac76d78c064a2486e2a5b4c4903acb91.jpg" srcset="/img/loading.gif" alt=""></p>
<h5 id="CASE-2：-2"><a href="#CASE-2：-2" class="headerlink" title="CASE 2："></a>CASE 2：</h5><p><strong><em>如果关注节点是 a，它的兄弟节点 c 是黑色的，并且节点 c 的左右子节点 d、e 都是黑色的，</em></strong>我们就依次进行下面的操作：</p>
<ul>
<li>将关注节点 a 的兄弟节点 c 的颜色变成红色；</li>
<li>从关注节点 a 中去掉一个黑色，这个时候节点 a 就是单纯的红色或者黑色；</li>
<li>给关注节点 a 的父节点 b 添加一个黑色，这个时候节点 b 就变成了“红 - 黑”或者“黑 - 黑”；</li>
<li>关注节点从 a 变成其父节点 b；</li>
<li>继续从四种情况中选择符合的规则来调整。</li>
</ul>
<p><img src="eca118d673c607eb2b103f3476fb24ec.jpg" srcset="/img/loading.gif" alt=""></p>
<h5 id="CASE-3：-2"><a href="#CASE-3：-2" class="headerlink" title="CASE 3："></a>CASE 3：</h5><p><strong><em>如果关注节点是 a，它的兄弟节点 c 是黑色，c 的左子节点 d 是红色，c 的右子节点 e 是黑色，</em></strong>我们就依次进行下面的操作：</p>
<ul>
<li>围绕关注节点 a 的兄弟节点 c 右旋；</li>
<li>节点 c 和节点 d 交换颜色；</li>
<li>关注节点不变；</li>
<li>跳转到 CASE 4，继续调整。</li>
</ul>
<p><img src="44075213100edd70315e1492422c92af.jpg" srcset="/img/loading.gif" alt=""></p>
<h5 id="CASE-4："><a href="#CASE-4：" class="headerlink" title="CASE 4："></a>CASE 4：</h5><p><strong><em>如果关注节点 a 的兄弟节点 c 是黑色的，并且 c 的右子节点是红色的，</em></strong>我们就依次进行下面的操作：</p>
<ul>
<li>围绕关注节点 a 的父节点 b 左旋；</li>
<li>将关注节点 a 的兄弟节点 c 的颜色，跟关注节点 a 的父节点 b 设置成相同的颜色；</li>
<li>将关注节点 a 的父节点 b 的颜色设置为黑色；</li>
<li>从关注节点 a 中去掉一个黑色，节点 a 就变成了单纯的红色或者黑色；</li>
<li>将关注节点 a 的叔叔节点 e 设置为黑色；</li>
<li>调整结束。</li>
</ul>
<p><img src="5f73f61bf77a7f2bb75f168cf432ec44.jpg" srcset="/img/loading.gif" alt=""></p>
<h3 id="内容总结"><a href="#内容总结" class="headerlink" title="内容总结"></a>内容总结</h3><p>第一点，<strong><em>把红黑树的平衡调整的过程比作魔方复原，不要过于深究这个算法的正确性。</em></strong></p>
<p>第二点，<strong><em>找准关注节点，不要搞丢、搞错关注节点。</em></strong></p>
<p>第三点，<strong><em>插入操作的平衡调整比较简单，但是删除操作就比较复杂。</em></strong></p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>递归树</title>
    <url>/2020/09/08/article-52/</url>
    <content><![CDATA[<p>如何借助树来求解递归算法的时间复杂度？</p>
<a id="more"></a>

<h3 id="递归树与时间复杂度分析"><a href="#递归树与时间复杂度分析" class="headerlink" title="递归树与时间复杂度分析"></a>递归树与时间复杂度分析</h3><p>如果我们把这个一层一层的分解过程画成图，它其实就是一棵树。我们给这棵树起一个名字，叫作<strong><em>递归树</em></strong>。</p>
<h3 id="实战一：分析快速排序的时间复杂度"><a href="#实战一：分析快速排序的时间复杂度" class="headerlink" title="实战一：分析快速排序的时间复杂度"></a>实战一：分析快速排序的时间复杂度</h3><p><img src="44972a3531dae0b7a0ccc935bc13f243.jpg" srcset="/img/loading.gif" alt=""></p>
<p>快速排序的过程中，每次分区都要遍历待分区区间的所有数据，所以，每一层分区操作所遍历的数据的个数之和就是 n。我们现在只要求出递归树的高度 h，这个快排过程遍历的数据个数就是 h∗n ，也就是说，<strong><em>时间复杂度就是 O(h∗n)</em></strong>。<strong><em>因为每次分区并不是均匀地一分为二，所以递归树并不是满二叉树。</em></strong></p>
<h3 id="实战二：分析斐波那契数列的时间复杂度"><a href="#实战二：分析斐波那契数列的时间复杂度" class="headerlink" title="实战二：分析斐波那契数列的时间复杂度"></a>实战二：分析斐波那契数列的时间复杂度</h3><p><img src="9ccbce1a70c7e2def52701dcf176a4ce.jpg" srcset="/img/loading.gif" alt=""></p>
<p>f(n) 分解为 f(n−1) 和 f(n−2)，每次数据规模都是 −1 或者 −2，叶子节点的数据规模是 1 或者 2。所以，从根节点走到叶子节点，每条路径是长短不一的。如果每次都是 −1，那最长路径大约就是 n；如果每次都是 −2，那最短路径大约就是 2n。</p>
<p>如果路径长度都为 n，那这个总和就是 2n−1。</p>
<p>如果路径长度都是 2n ，那整个算法的总的时间消耗就是 2^(n/2)−1。</p>
<p><strong><em>所以，这个算法的时间复杂度就介于 O(2n) 和 O(22n) 之间。</em></strong></p>
<h3 id="实战三：分析全排列的时间复杂度"><a href="#实战三：分析全排列的时间复杂度" class="headerlink" title="实战三：分析全排列的时间复杂度"></a>实战三：分析全排列的时间复杂度</h3><h4 id="python代码"><a href="#python代码" class="headerlink" title="python代码"></a>python代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">permutations</span><span class="hljs-params">(arrays, position, end)</span>:</span><br>    <span class="hljs-keyword">if</span> position == end:<br>        print(arrays)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> range(position, end):<br>            arrays[index], arrays[position] = arrays[position], arrays[index]<br>            permutations(arrays, position+<span class="hljs-number">1</span>, end)<br>            arrays[index], arrays[position] = arrays[position], arrays[index]<br></code></pre></td></tr></table></figure>

<p><img src="82f40bed489cf29b14192b44decf059b.jpg" srcset="/img/loading.gif" alt=""></p>
<p><strong><em>全排列时间复杂度大于O(n!) 小于 O(n*n!)</em></strong></p>
<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><h4 id="1-个细胞的生命周期是-3-小时，1-小时分裂一次。求-n-小时后，容器内有多少细胞？请你用已经学过的递归时间复杂度的分析方法，分析一下这个递归问题的时间复杂度。"><a href="#1-个细胞的生命周期是-3-小时，1-小时分裂一次。求-n-小时后，容器内有多少细胞？请你用已经学过的递归时间复杂度的分析方法，分析一下这个递归问题的时间复杂度。" class="headerlink" title="1 个细胞的生命周期是 3 小时，1 小时分裂一次。求 n 小时后，容器内有多少细胞？请你用已经学过的递归时间复杂度的分析方法，分析一下这个递归问题的时间复杂度。"></a>1 个细胞的生命周期是 3 小时，1 小时分裂一次。求 n 小时后，容器内有多少细胞？请你用已经学过的递归时间复杂度的分析方法，分析一下这个递归问题的时间复杂度。</h4><figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript"><span class="hljs-number">2</span>*f(n<span class="hljs-number">-1</span>) + f(n<span class="hljs-number">-4</span>) # 注意需要减去的是新生的细胞<br></code></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>堆和堆排序</title>
    <url>/2020/09/09/article-53/</url>
    <content><![CDATA[<p>为什么说堆排序没有快速排序快？</p>
<a id="more"></a>

<h4 id="堆排序数据访问的方式没有快速排序友好"><a href="#堆排序数据访问的方式没有快速排序友好" class="headerlink" title="堆排序数据访问的方式没有快速排序友好"></a>堆排序数据访问的方式没有快速排序友好</h4><p>对于快速排序来说，数据是顺序访问的。而对于堆排序来说，数据是跳着访问的。这样对CPU不友好。</p>
<h4 id="对于同样的数据，在排序过程中，堆排序算法的数据交换次数要多于快速排序"><a href="#对于同样的数据，在排序过程中，堆排序算法的数据交换次数要多于快速排序" class="headerlink" title="对于同样的数据，在排序过程中，堆排序算法的数据交换次数要多于快速排序"></a>对于同样的数据，在排序过程中，堆排序算法的数据交换次数要多于快速排序</h4><h3 id="如何理解“堆”？"><a href="#如何理解“堆”？" class="headerlink" title="如何理解“堆”？"></a>如何理解“堆”？</h3><p>“堆”必须满足两点：</p>
<ul>
<li>必须是完全二叉树</li>
<li>每一个节点都必须大于等于（小于等于）其左右子节点</li>
</ul>
<h3 id="如何实现一个堆？"><a href="#如何实现一个堆？" class="headerlink" title="如何实现一个堆？"></a>如何实现一个堆？</h3><p><img src="4d349f57947df6590a2dd1364c3b0b1e.jpg" srcset="/img/loading.gif" alt=""></p>
<p>从图中我们可以看到，数组中下标为 <strong><em>i</em></strong> 的节点的左子节点，就是下标为 <strong><em>2i</em></strong> 的节点，右子节点就是下标为 <strong><em>2i+1</em></strong> 的节点，父节点就是下标为 <strong><em>i//2</em></strong> 的节点。</p>
<h4 id="往堆中插入一个元素"><a href="#往堆中插入一个元素" class="headerlink" title="往堆中插入一个元素"></a>往堆中插入一个元素</h4><p>把新插入的元素放在最后，然后进行 <strong><em>堆化</em></strong>。</p>
<h5 id="自底向上堆化"><a href="#自底向上堆化" class="headerlink" title="自底向上堆化"></a>自底向上堆化</h5><p><img src="e578654f930002a140ebcf72b11eb722.jpg" srcset="/img/loading.gif" alt=""></p>
<p><img src="e3744661e038e4ae570316bc862b2c0e.jpg" srcset="/img/loading.gif" alt=""></p>
<h4 id="删除堆顶元素"><a href="#删除堆顶元素" class="headerlink" title="删除堆顶元素"></a>删除堆顶元素</h4><p>方法：将末尾节点填充至堆顶，然后<strong><em>自顶向下堆化</em></strong>。这样可以避免数组空洞。</p>
<p><img src="110d6f442e718f86d2a1d16095513260.jpg" srcset="/img/loading.gif" alt=""></p>
<p>一个包含 n 个节点的完全二叉树，树的高度不会超过 log2n。堆化的过程是顺着节点所在路径比较交换的，所以堆化的时间复杂度跟树的高度成正比，也就是 O(logn)。插入数据和删除堆顶元素的主要逻辑就是堆化，所以，往堆中插入一个元素和删除堆顶元素的时间复杂度都是 O(logn)。</p>
<h3 id="如何基于堆实现排序？"><a href="#如何基于堆实现排序？" class="headerlink" title="如何基于堆实现排序？"></a>如何基于堆实现排序？</h3><h4 id="建堆"><a href="#建堆" class="headerlink" title="建堆"></a>建堆</h4><p><strong><em>第一种是借助我们前面讲的，在堆中插入一个元素的思路。</em></strong></p>
<p>尽管数组中包含 n 个数据，但是我们可以假设，起初堆中只包含一个数据，就是下标为 1 的数据。然后，我们调用前面讲的插入操作，将下标从 2 到 n 的数据依次插入到堆中。这样我们就将包含 n 个数据的数组，组织成了堆。</p>
<p><strong><em>第二种实现思路，是从后往前处理数组，并且每个数据都是从上往下堆化。</em></strong></p>
<p>以下为例图，从第一个非叶子结点开始堆化</p>
<p><img src="50c1e6bc6fe68378d0a66bdccfff441e.jpg" srcset="/img/loading.gif" alt=""></p>
<p><img src="aabb8d15b1b92d5e040895589c60419d.jpg" srcset="/img/loading.gif" alt=""></p>
<h5 id="建堆时间复杂度分析"><a href="#建堆时间复杂度分析" class="headerlink" title="建堆时间复杂度分析"></a>建堆时间复杂度分析</h5><p>O(n)</p>
<h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>堆顶元素与最后一个元素交换，当堆顶元素移除之后，我们把下标为 n 的元素放到堆顶，然后再通过堆化的方法，将剩下的 n−1 个元素重新构建成堆。堆化完成之后，我们再取堆顶的元素，放到下标是 n−1 的位置，一直重复这个过程，直到最后堆中只剩下标为 1 的一个元素，排序工作就完成了。</p>
<p><img src="23958f889ca48dbb8373f521708408d1.jpg" srcset="/img/loading.gif" alt=""></p>
<p>因为存在堆顶元素与为元素交换的操作，所以<strong><em>堆排序是不稳定的排序</em></strong></p>
<h5 id="排序时间复杂度分析"><a href="#排序时间复杂度分析" class="headerlink" title="排序时间复杂度分析"></a>排序时间复杂度分析</h5><p>O(logn)</p>
<h4 id="总体时间复杂度分析"><a href="#总体时间复杂度分析" class="headerlink" title="总体时间复杂度分析"></a>总体时间复杂度分析</h4><p>O(blogs)</p>
<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><h4 id="关于堆，你还能想到它的其他应用吗？"><a href="#关于堆，你还能想到它的其他应用吗？" class="headerlink" title="关于堆，你还能想到它的其他应用吗？"></a>关于堆，你还能想到它的其他应用吗？</h4><p>1、从大数量级数据中筛选出top n 条数据； 比如：从几十亿条订单日志中筛选出金额靠前的1000条数据</p>
<p>2、在一些场景中，会根据不同优先级来处理网络请求，此时也可以用到优先队列(用堆实现的数据结构)；比如：网络框架Volley就用了Java中PriorityBlockingQueue，当然它是线程安全的</p>
<p>3、可以用堆来实现多路归并，从而实现有序，leetcode上也有相关的一题：Merge K Sorted Lists</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>图的表示</title>
    <url>/2020/09/09/article-54/</url>
    <content><![CDATA[<p>微博、微信等社交网络中的好友关系是如何存储的？</p>
<a id="more"></a>

<h3 id="如何理解“图”？"><a href="#如何理解“图”？" class="headerlink" title="如何理解“图”？"></a>如何理解“图”？</h3><p><img src="df85dc345a9726cab0338e68982fd1af.jpg" srcset="/img/loading.gif" alt=""></p>
<p>和树比起来，这是一种更加复杂的非线性表结构。</p>
<p>图中的元素我们就叫做<strong><em>顶点（vertex）</em></strong>。</p>
<p>图中的一个顶点可以与任意其他顶点建立连接关系。我们把这种建立的关系叫做<strong><em>边（edge）</em></strong>。</p>
<p>跟顶点相连接的边的条数，叫做<strong><em>度（degree）</em></strong>。</p>
<p>上面的图为 <strong><em>无向图</em></strong>， 还有一种 <strong><em>有向图</em></strong>。</p>
<p><img src="c31759a37d8a8719841f347bd479b796.jpg" srcset="/img/loading.gif" alt=""></p>
<p><strong><em>有向图中，我们把度分为入度（In-degree）和出度（Out-degree）</em></strong>。</p>
<p>此外还有一种图，<strong><em>带权图（weighted graph）</em></strong></p>
<p><img src="55d7e4806dc47950ae098d959b03ace8.jpg" srcset="/img/loading.gif" alt=""></p>
<h3 id="邻接矩阵存储方法"><a href="#邻接矩阵存储方法" class="headerlink" title="邻接矩阵存储方法"></a>邻接矩阵存储方法</h3><p>邻接矩阵的底层依赖一个二维数组。对于无向图来说，如果顶点 i 与顶点 j 之间有边，我们就将 A[i][j]和 A[j][i]标记为 1；对于有向图来说，如果顶点 i 到顶点 j 之间，有一条箭头从顶点 i 指向顶点 j 的边，那我们就将 A[i][j]标记为 1。同理，如果有一条箭头从顶点 j 指向顶点 i 的边，我们就将 A[j][i]标记为 1。对于带权图，数组中就存储相应的权重。</p>
<p><img src="625e7493b5470e774b5aa91fb4fdb9d2.jpg" srcset="/img/loading.gif" alt=""></p>
<p>邻接矩阵在存储 <strong><em>稀疏图</em></strong> 时会造成存储空间浪费的问题。</p>
<h3 id="邻接表存储方法"><a href="#邻接表存储方法" class="headerlink" title="邻接表存储方法"></a>邻接表存储方法</h3><p>针对上面邻接矩阵比较浪费内存空间的问题，我们来看另外一种图的存储方法，<strong><em>邻接表（Adjacency List）</em></strong>。</p>
<p><img src="039bc254b97bd11670cdc4bf2a8e1394.jpg" srcset="/img/loading.gif" alt=""></p>
<p><strong><em>邻接表存储起来比较节省空间，但是使用起来就比较耗时间。</em></strong></p>
<h3 id="内容总结"><a href="#内容总结" class="headerlink" title="内容总结"></a>内容总结</h3><p>邻接矩阵存储方法的缺点是比较浪费空间，但是优点是查询效率高，而且方便矩阵运算。邻接表存储方法中每个顶点都对应一个链表，存储与其相连接的其他顶点。尽管邻接表的存储方式比较节省存储空间，但链表不方便查找，所以查询效率没有邻接矩阵存储方式高。针对这个问题，邻接表还有改进升级版，即将链表换成更加高效的动态数据结构，比如平衡二叉查找树、跳表、散列表等。</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>深度和广度优先搜索</title>
    <url>/2020/09/09/article-55/</url>
    <content><![CDATA[<p>图上的搜索算法，最直接的理解就是，在图中找出从一个顶点出发，到另一个顶点的路径。</p>
<a id="more"></a>

<h3 id="什么是“搜索”算法？"><a href="#什么是“搜索”算法？" class="headerlink" title="什么是“搜索”算法？"></a>什么是“搜索”算法？</h3><p>图上的搜索算法，最直接的理解就是，在图中找出从一个顶点出发，到另一个顶点的路径。</p>
<h3 id="广度优先搜索（BFS）"><a href="#广度优先搜索（BFS）" class="headerlink" title="广度优先搜索（BFS）"></a>广度优先搜索（BFS）</h3><p>广度优先搜索（Breadth-First-Search），我们平常都简称 BFS。直观地讲，它其实就是一种“地毯式”层层推进的搜索策略，即先查找离起始顶点最近的，然后是次近的，依次往外搜索。</p>
<p><strong><em>时间复杂度O(V+E)， V表示顶点的个数，E表示边的个数</em></strong></p>
<p><strong><em>空间复杂度为O(V)，即需要额外存储顶点的个数</em></strong></p>
<p><img src="002e9e54fb0d4dbf5462226d946fa1ea.jpg" srcset="/img/loading.gif" alt=""></p>
<h3 id="深度优先搜索（DFS）"><a href="#深度优先搜索（DFS）" class="headerlink" title="深度优先搜索（DFS）"></a>深度优先搜索（DFS）</h3><p>深度优先搜索（Depth-First-Search），简称 DFS。</p>
<p>深度优先搜索用的是一种比较著名的算法思想，<strong><em>回溯思想</em></strong>。</p>
<p><strong><em>时间复杂度 O(E), E 表示边数</em></strong></p>
<p><strong><em>空间复杂度 O(V), V表示顶点个数</em></strong></p>
<p><img src="8778201ce6ff7037c0b3f26b83efba85.jpg" srcset="/img/loading.gif" alt=""></p>
<h3 id="内容小结"><a href="#内容小结" class="headerlink" title="内容小结"></a>内容小结</h3><p>广度优先搜索，通俗的理解就是，地毯式层层推进，从起始顶点开始，依次往外遍历。广度优先搜索需要借助队列来实现，遍历得到的路径就是，起始顶点到终止顶点的最短路径。深度优先搜索用的是回溯思想，非常适合用递归实现。换种说法，深度优先搜索是借助栈来实现的。在执行效率方面，深度优先和广度优先搜索的时间复杂度都是 O(E)，空间复杂度是 O(V)。</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串匹配基础（上）</title>
    <url>/2020/09/10/article-56/</url>
    <content><![CDATA[<p>BF 算法和 RK 算法</p>
<a id="more"></a>

<h3 id="BF-算法"><a href="#BF-算法" class="headerlink" title="BF 算法"></a>BF 算法</h3><p>中文叫作暴力匹配算法，也叫朴素匹配算法。</p>
<p>两个关键名词，<strong><em>主串和模式串</em></strong></p>
<p>比方说，我们在字符串 A 中查找字符串 B，那字符串 A 就是主串，字符串 B 就是模式串。我们把主串的长度记作 n，模式串的长度记作 m。因为我们是在主串中查找模式串，所以 n&gt;m。</p>
<p>BF 算法的思想可以用一句话来概括，那就是，<strong><em>我们在主串中，检查起始位置分别是 0、1、2…n-m 且长度为 m 的 n-m+1 个子串，看有没有跟模式串匹配的。</em></strong></p>
<p><img src="f36fed972a5bdc75331d59c36eb15aa2.jpg" srcset="/img/loading.gif" alt=""></p>
<p><strong><em>时间复杂度O(n*m)</em></strong></p>
<p>尽管时间复杂度很高，但依然是比较常用的算法，原因有两点：</p>
<ul>
<li>实际的软件开发中，大部分情况下，模式串和主串的长度都不会太长。而且每次模式串与主串中的子串匹配的时候，当中途遇到不能匹配的字符的时候，就可以就停止了，不需要把 m 个字符都比对一下。所以，尽管理论上的最坏情况时间复杂度是 O(n*m)，但是，统计意义上，大部分情况下，算法执行效率要比这个高很多。</li>
<li>朴素字符串匹配算法思想简单，代码实现也非常简单。简单意味着不容易出错，如果有 bug 也容易暴露和修复。在工程中，在满足性能要求的前提下，简单是首选。这也是我们常说的<strong><em>KISS（Keep it Simple and Stupid）</em></strong>设计原则。</li>
</ul>
<h3 id="RK-算法"><a href="#RK-算法" class="headerlink" title="RK 算法"></a>RK 算法</h3><p>设计思路：我们通过哈希算法对主串中的 n-m+1 个子串分别求哈希值，然后逐个与模式串的哈希值比较大小。如果某个子串的哈希值与模式串相等，那就说明对应的子串和模式串匹配了</p>
<h4 id="哈希算法设计的技巧"><a href="#哈希算法设计的技巧" class="headerlink" title="哈希算法设计的技巧"></a>哈希算法设计的技巧</h4><p>我们假设要匹配的字符串的字符集中只包含 K 个字符，我们可以用一个 K 进制数来表示一个子串，这个 K 进制数转化成十进制数，作为子串的哈希值。</p>
<h4 id="相邻两个子串的哈希值的计算公式有一定关系"><a href="#相邻两个子串的哈希值的计算公式有一定关系" class="headerlink" title="相邻两个子串的哈希值的计算公式有一定关系"></a>相邻两个子串的哈希值的计算公式有一定关系</h4><p><img src="f99c16f2f899d19935567102c59661f5.jpg" srcset="/img/loading.gif" alt=""></p>
<p>相邻两个子串 s[i-1]和 s[i]（i 表示子串在主串中的起始位置，子串的长度都为 m），对应的哈希值计算公式有交集，也就是说，我们可以使用 s[i-1]的哈希值很快的计算出 s[i]的哈希值。如果用公式表示的话，就是下面这个样子：</p>
<p><img src="c47b092408ebfddfa96268037d53aa9c.jpg" srcset="/img/loading.gif" alt=""></p>
<p>小细节：可以事先使用一个数组保存好进制的 0～m-1 次方，这样可以节约计算时间</p>
<p><img src="224b899c6e82ec54594e2683acc4552f.jpg" srcset="/img/loading.gif" alt=""></p>
<p><strong><em>时间复杂度 O(n)</em></strong></p>
<h4 id="子串过长导致哈希值超过计算机范围时怎么办"><a href="#子串过长导致哈希值超过计算机范围时怎么办" class="headerlink" title="子串过长导致哈希值超过计算机范围时怎么办"></a>子串过长导致哈希值超过计算机范围时怎么办</h4><p>设计一个允许哈希冲突的哈希算法，然后当哈希值相同时比较字符串内容。但注意冲突不能太多，否则会退化为O(n*m) 的算法。</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串匹配基础（中）</title>
    <url>/2020/09/10/article-57/</url>
    <content><![CDATA[<p>BM（Boyer-Moore）算法</p>
<a id="more"></a>

<h3 id="BM-算法的核心思想"><a href="#BM-算法的核心思想" class="headerlink" title="BM 算法的核心思想"></a>BM 算法的核心思想</h3><p><img src="cf362f9e59c01aaf40a34d2f10e1ef15.jpg" srcset="/img/loading.gif" alt=""></p>
<p>在这个例子里，主串中的 c，在模式串中是不存在的，所以，模式串向后滑动的时候，只要 c 与模式串有重合，肯定无法匹配。所以，我们可以一次性把模式串往后多滑动几位，把模式串移动到 c 的后面。</p>
<h3 id="BM-算法原理分析"><a href="#BM-算法原理分析" class="headerlink" title="BM 算法原理分析"></a>BM 算法原理分析</h3><p><strong>坏字符规则</strong> 和 <strong>好后缀规则</strong></p>
<h4 id="坏字符规则"><a href="#坏字符规则" class="headerlink" title="坏字符规则"></a>坏字符规则</h4><p>按照模式串下标从大到小的顺序，如下图</p>
<p><img src="540809418354024206d9989cb6cdd89e.jpg" srcset="/img/loading.gif" alt=""></p>
<h5 id="偏移规律"><a href="#偏移规律" class="headerlink" title="偏移规律"></a>偏移规律</h5><p>当发生不匹配的时候，我们把坏字符对应的模式串中的字符下标记作 si。如果坏字符在模式串中存在，我们把这个坏字符在模式串中的下标记作 xi。如果不存在，我们把 xi 记作 -1。那模式串往后移动的位数就等于 si-xi。（注意，我这里说的下标，都是字符在模式串的下标）。</p>
<p><img src="8f520fb9d9cec0f6ea641d4181eb432e.jpg" srcset="/img/loading.gif" alt=""></p>
<h5 id="特别注意"><a href="#特别注意" class="headerlink" title="特别注意"></a>特别注意</h5><p>如果坏字符在模式串里多处出现，那我们在计算 xi 的时候，<strong><em>选择最靠后的那个</em></strong>，因为这样不会让模式串滑动过多，导致本来可能匹配的情况被滑动略过。</p>
<p><strong><em>时间复杂度 O(n/m)</em></strong></p>
<h4 id="好后缀规则"><a href="#好后缀规则" class="headerlink" title="好后缀规则"></a>好后缀规则</h4><p><img src="d78990dbcb794d1aa2cf4a3c646ae58a.jpg" srcset="/img/loading.gif" alt=""></p>
<p>我们把已经匹配的 bc 叫作好后缀，记作{u}。我们拿它在模式串中查找，如果找到了另一个跟{u}相匹配的子串{u<em>}，那我们就将模式串滑动到子串{u</em>}与主串中{u}对齐的位置。</p>
<p>如果在模式串中找不到另一个等于{u}的子串，我们就直接将模式串，滑动到主串中{u}的后面，因为之前的任何一次往后滑动，都没有匹配主串中{u}的情况。</p>
<p>但是，出现了一个严重的问题， <strong><em>过度滑动</em></strong></p>
<p><img src="9b3fa3d1cd9c0d0f914a9b1f518ad070.jpg" srcset="/img/loading.gif" alt=""></p>
<p><strong>如果好后缀在模式串中不存在可匹配的子串，那在我们一步一步往后滑动模式串的过程中，只要主串中的{u}与模式串有重合，那肯定就无法完全匹配。但是当模式串滑动到前缀与主串中{u}的后缀有部分重合的时候，并且重合的部分相等的时候，就有可能会存在完全匹配的情况。</strong></p>
<p><strong><em>所以，针对这种情况，我们不仅要看好后缀在模式串中，是否有另一个匹配的子串，我们还要考察好后缀的后缀子串，是否存在跟模式串的前缀子串匹配的。</em></strong></p>
<h4 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择"></a>如何选择</h4><p>我们可以分别计算好后缀和坏字符往后滑动的位数，然后取两个数中最大的，作为模式串往后滑动的位数。这种处理方法还可以避免我们前面提到的，根据坏字符规则，计算得到的往后滑动的位数，有可能是负数的情况。</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串匹配基础（下）</title>
    <url>/2020/09/11/article-58/</url>
    <content><![CDATA[<p>借助BM算法理解KMP算法</p>
<a id="more"></a>

<h3 id="KMP-算法基本原理"><a href="#KMP-算法基本原理" class="headerlink" title="KMP 算法基本原理"></a>KMP 算法基本原理</h3><p><img src="da99c0349f8fac27e193af8d801dbb8f.jpg" srcset="/img/loading.gif" alt=""></p>
<p>我们只需要拿好前缀本身，在它的后缀子串中，查找最长的那个可以跟好前缀的前缀子串匹配的。假设最长的可匹配的那部分前缀子串是{v}，长度是 k。我们把模式串一次性往后滑动 j-k 位，相当于，每次遇到坏字符的时候，我们就把 j 更新为 k，i 不变，然后继续比较。</p>
<p>为了表述起来方便，我把好前缀的所有后缀子串中，最长的可匹配前缀子串的那个后缀子串，叫作<strong><em>最长可匹配后缀子串</em></strong>；对应的前缀子串，叫作<strong><em>最长可匹配前缀子串</em></strong>。</p>
<p><img src="9e59c0973ffb965abdd3be5eafb492ad.jpg" srcset="/img/loading.gif" alt=""></p>
<p>KMP匹配过程中可以不需要主串，可以提前构建一个数组，用来存储模式串中每个前缀（这些前缀都有可能是好前缀）的最长可匹配前缀子串的结尾字符下标。我们把这个数组定义为 <strong><em>next</em></strong> 数组，很多书中还给这个数组起了一个名字，叫<strong><em>失效函数（failure function）</em></strong>。</p>
<p>数组的下标是每个前缀结尾字符下标，<strong><em>数组的值是这个前缀的最长可以匹配前缀子串的结尾字符下标</em></strong>。</p>
<p><img src="1661d37cb190cb83d713749ff9feaea8.jpg" srcset="/img/loading.gif" alt=""></p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Trie树</title>
    <url>/2020/09/11/article-59/</url>
    <content><![CDATA[<p>搜索引擎最基本的原理-Trie树</p>
<a id="more"></a>

<h3 id="什么是“Trie-树”？"><a href="#什么是“Trie-树”？" class="headerlink" title="什么是“Trie 树”？"></a>什么是“Trie 树”？</h3><p>Trie 树的本质，就是利用字符串之间的公共前缀，将重复的前缀合并在一起。</p>
<p><img src="280fbc0bfdef8380fcb632af39e84b32.jpg" srcset="/img/loading.gif" alt=""></p>
<h3 id="如何实现一棵-Trie-树？"><a href="#如何实现一棵-Trie-树？" class="headerlink" title="如何实现一棵 Trie 树？"></a>如何实现一棵 Trie 树？</h3><h4 id="Trie-树主要有两个操作"><a href="#Trie-树主要有两个操作" class="headerlink" title="Trie 树主要有两个操作"></a>Trie 树主要有两个操作</h4><ul>
<li>一个是将字符串集合构造成 Trie 树</li>
<li>一个是在 Trie 树中查询一个字符串</li>
</ul>
<h4 id="如何存储一个-Trie-树？"><a href="#如何存储一个-Trie-树？" class="headerlink" title="如何存储一个 Trie 树？"></a>如何存储一个 Trie 树？</h4><h5 id="经典的存储方式"><a href="#经典的存储方式" class="headerlink" title="经典的存储方式"></a>经典的存储方式</h5><p>通过一个下标与字符一一映射的数组，来存储子节点的指针。</p>
<p><img src="f5a4a9cb7f0fe9dcfbf29eb1e5da6d35.jpg" srcset="/img/loading.gif" alt=""></p>
<p>时间复杂度 O(k)， k表示目标查询字符串长度</p>
<h4 id="Trie树的内存消耗"><a href="#Trie树的内存消耗" class="headerlink" title="Trie树的内存消耗"></a>Trie树的内存消耗</h4><p>Trie树非常内存消耗内存，采用的是空间换取时间的策略。</p>
<h3 id="Trie-树与散列表、红黑树的比较"><a href="#Trie-树与散列表、红黑树的比较" class="headerlink" title="Trie 树与散列表、红黑树的比较"></a>Trie 树与散列表、红黑树的比较</h3><ul>
<li>字符串中包含的字符集不能太大。我们前面讲到，如果字符集太大，那存储空间可能就会浪费很多。即便可以优化，但也要付出牺牲查询、插入效率的代价。</li>
<li>要求字符串的前缀重合比较多，不然空间消耗会变大很多。</li>
<li>如果要用 Trie 树解决问题，那我们就要自己从零开始实现一个 Trie 树，还要保证没有 bug，这个在工程上是将简单问题复杂化，除非必须，一般不建议这样做。</li>
<li>我们知道，通过指针串起来的数据块是不连续的，而 Trie 树中用到了指针，所以，对缓存并不友好，性能上会打个折扣。</li>
</ul>
<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><h4 id="如果现在给你一个很大的字符串集合，比如包含-1-万条记录，如何通过编程量化分析这组字符串集合是否比较适合用-Trie-树解决呢？也就是如何统计字符串的字符集大小，以及前缀重合的程度呢？"><a href="#如果现在给你一个很大的字符串集合，比如包含-1-万条记录，如何通过编程量化分析这组字符串集合是否比较适合用-Trie-树解决呢？也就是如何统计字符串的字符集大小，以及前缀重合的程度呢？" class="headerlink" title="如果现在给你一个很大的字符串集合，比如包含 1 万条记录，如何通过编程量化分析这组字符串集合是否比较适合用 Trie 树解决呢？也就是如何统计字符串的字符集大小，以及前缀重合的程度呢？"></a>如果现在给你一个很大的字符串集合，比如包含 1 万条记录，如何通过编程量化分析这组字符串集合是否比较适合用 Trie 树解决呢？也就是如何统计字符串的字符集大小，以及前缀重合的程度呢？</h4>]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>JS逆向学习-某厂藏某阁</title>
    <url>/2020/05/12/article-6/</url>
    <content><![CDATA[<p>首先感谢咸鱼大佬的分享 <a href="https://mp.weixin.qq.com/s/5pp1vd00O-JHeAf6loaYfg" target="_blank" rel="noopener">文章地址</a></p>
<p>懂得都懂：aHR0cHM6Ly9kd3ouY24vS0VGT01qOGg=</p>
<a id="more"></a>

<h3 id="网站分析"><a href="#网站分析" class="headerlink" title="网站分析"></a>网站分析</h3><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><p><img src="WX20200512-095031.png" srcset="/img/loading.gif" alt=""></p>
<p>通过查看html页面发现目标信息在id为 <strong><em>equip_desc_panel</em></strong> 的标签下，然后全局搜索这个id</p>
<p><img src="WX20200512-095918.png" srcset="/img/loading.gif" alt=""></p>
<p>发现这里是空的，但发现了另外一个有意思的点，下面 <strong><em>textarea</em></strong> 标签中的内容像极了加密内容，然后再查看其他位置</p>
<p><img src="WX20200511-185128.png" srcset="/img/loading.gif" alt=""></p>
<p>柳暗花明又一村，继续查找 <strong><em>get_equip_desc</em></strong></p>
<p><img src="WX20200511-185217.png" srcset="/img/loading.gif" alt=""></p>
<p>看来是在 <strong><em>decode_desc</em></strong> 中执行的加密，但是这个函数就搜不到了，然后在这里打断点</p>
<p><img src="WX20200511-190108.png" srcset="/img/loading.gif" alt=""></p>
<p>成功断点并跟进调试后发现是通过这样的方式设置了 <strong><em>decode_desc</em></strong> 函数，并且确认这里就是解密的位置</p>
<h4 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h4><p>然后就到了扣代码的环节</p>
<p>通过前面的断点调试得知只需要 <strong><em>function g()</em></strong> 的流程，通过node.js运行发现运行结果不符合预期，那就开始补坑</p>
<p><img src="WX20200511-191211.png" srcset="/img/loading.gif" alt=""></p>
<p><img src="WX20200511-191030.png" srcset="/img/loading.gif" alt=""></p>
<p><img src="WX20200511-191007.png" srcset="/img/loading.gif" alt=""></p>
<p><img src="WX20200511-191101.png" srcset="/img/loading.gif" alt=""></p>
<p><img src="WX20200511-191116.png" srcset="/img/loading.gif" alt=""></p>
<p>上面截图中标注的内容都是需要去替换的，但要注意的是 <strong>window.atob</strong> 在 <strong>node</strong> 中不可用，要这样写：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">Buffer.from(_0x1c0cdf,<span class="hljs-string">"base64"</span>).toString()<br></code></pre></td></tr></table></figure>



<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>修改后的js代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> _0x3a8e = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">_0xc40c11, _0x32bbb2</span>) </span>&#123;<br>    _0xc40c11 = _0xc40c11 - <span class="hljs-number">0x0</span>;<br>    <span class="hljs-keyword">var</span> _0x4e269a = _0x3012[_0xc40c11];<br>    <span class="hljs-keyword">return</span> _0x4e269a;<br>&#125;;<br><br><span class="hljs-keyword">var</span> _0x3012 = [<span class="hljs-string">'\x73\x75\x62\x73\x74\x72\x69\x6e\x67'</span>, <span class="hljs-string">'\x61\x74\x6f\x62'</span>, <span class="hljs-string">'\x63\x68\x61\x72\x43\x6f\x64\x65\x41\x74'</span>, <span class="hljs-string">'\x70\x75\x73\x68'</span>, <span class="hljs-string">'\x74\x65\x73\x74'</span>];<br>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">_0x3ed35c, _0x48b8fe</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> _0x1ad9d9 = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">_0x8eeda7</span>) </span>&#123;<br>        <span class="hljs-keyword">while</span> (--_0x8eeda7) &#123;<br>            _0x3ed35c[<span class="hljs-string">'push'</span>](_0x3ed35c[<span class="hljs-string">'shift'</span>]());<br>        &#125;<br>    &#125;;<br>    _0x1ad9d9(++_0x48b8fe);<br>&#125;(_0x3012, <span class="hljs-number">0x153</span>));<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">g</span>(<span class="hljs-params">_0x1c0cdf</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (_0x1c0cdf = _0x1c0cdf[<span class="hljs-string">'\x72\x65\x70\x6c\x61\x63\x65'</span>](<span class="hljs-regexp">/^\s+|\s+$/g</span>, <span class="hljs-string">''</span>),<br>        !<span class="hljs-regexp">/^@[\s\S]*@$/</span>[_0x3a8e(<span class="hljs-string">'0x0'</span>)](_0x1c0cdf))<br>        <span class="hljs-keyword">return</span> _0x1c0cdf;<br>    <span class="hljs-keyword">var</span> _0x36ab38 = <span class="hljs-string">''</span>;<br>    <span class="hljs-keyword">if</span> (_0x1c0cdf = _0x1c0cdf[<span class="hljs-string">'\x72\x65\x70\x6c\x61\x63\x65'</span>](<span class="hljs-regexp">/^@|@$/g</span>, <span class="hljs-string">''</span>),<br>        /^[^@]+@[\s\S]+<span class="hljs-regexp">/['\x74\x65\x73\x74'](_0x1c0cdf)) &#123;</span><br><span class="hljs-regexp">        var _0x33c80e = _0x1c0cdf['\x69\x6e\x64\x65\x78\x4f\x66']('\x40');</span><br><span class="hljs-regexp">        _0x36ab38 = _0x1c0cdf[_0x3a8e('0x1')](0x0, _0x33c80e),</span><br><span class="hljs-regexp">            _0x1c0cdf = _0x1c0cdf['\x73\x75\x62\x73\x74\x72\x69\x6e\x67'](_0x33c80e + 0x1);</span><br><span class="hljs-regexp">    &#125;</span><br><span class="hljs-regexp">    var _0x1b3f48 = function s(_0x1c0cdf) &#123;</span><br><span class="hljs-regexp">        try &#123;</span><br><span class="hljs-regexp">            return eval('\x28' + _0x1c0cdf + '\x29');</span><br><span class="hljs-regexp">        &#125; catch (_0x40b9c3) &#123;</span><br><span class="hljs-regexp">            return null;</span><br><span class="hljs-regexp">        &#125;</span><br><span class="hljs-regexp">    &#125;(_0x1c0cdf = Buffer.from(_0x1c0cdf,"base64").toString());</span><br><span class="hljs-regexp">    _0x1b3f48 &amp;&amp; '\x6f\x62\x6a\x65\x63\x74' == typeof _0x1b3f48 &amp;&amp; _0x1b3f48['\x64'] &amp;&amp; (_0x1b3f48 = _0x1b3f48['\x64']);</span><br><span class="hljs-regexp">    for (var _0x20b9fa = [], _0x10503c = 0x0, _0x1a524d = 0x0; _0x1a524d &lt; _0x1b3f48['\x6c\x65\x6e\x67\x74\x68']; _0x1a524d++) &#123;</span><br><span class="hljs-regexp">        var _0x3641ed = _0x1b3f48['\x63\x68\x61\x72\x43\x6f\x64\x65\x41\x74'](_0x1a524d)</span><br><span class="hljs-regexp">            , _0x341952 = _0x36ab38[_0x3a8e('0x3')](_0x10503c % _0x36ab38['\x6c\x65\x6e\x67\x74\x68']);</span><br><span class="hljs-regexp">        _0x10503c += 0x1,</span><br><span class="hljs-regexp">            _0x3641ed = 0x1 * _0x3641ed ^ _0x341952,</span><br><span class="hljs-regexp">            _0x20b9fa[_0x3a8e('0x4')](_0x3641ed['\x74\x6f\x53\x74\x72\x69\x6e\x67'](0x2));</span><br><span class="hljs-regexp">    &#125;</span><br><span class="hljs-regexp">    return function d(_0x1c0cdf) &#123;</span><br><span class="hljs-regexp">        for (var _0x36ab38 = [], _0x33c80e = 0x0; _0x33c80e &lt; _0x1c0cdf['\x6c\x65\x6e\x67\x74\x68']; _0x33c80e++)</span><br><span class="hljs-regexp">            /</span><span class="hljs-regexp">/ _0x36ab38['\x70\x75\x73\x68'](_0xcbc80b['\x53\x74\x72\x69\x6e\x67']['\x66\x72\x6f\x6d\x43\x68\x61\x72\x43\x6f\x64\x65'](_0xcbc80b['\x70\x61\x72\x73\x65\x49\x6e\x74'](_0x1c0cdf[_0x33c80e], 0x2)));</span><br><span class="hljs-regexp">            _0x36ab38['\x70\x75\x73\x68'](String.fromCharCode(parseInt(_0x1c0cdf[_0x33c80e], 0x2)));</span><br><span class="hljs-regexp">        return _0x36ab38['\x6a\x6f\x69\x6e']('');</span><br><span class="hljs-regexp">    &#125;(_0x20b9fa);</span><br><span class="hljs-regexp">&#125;</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">var a = "@ggRp9MYui9tDX6Fq@eyJkIjogIkRcdTAwMTVcdTdiMWJcdTdlZDdcdTAwMTl8a0VJXHUwMDE5XHU0ZWUwXHU4ODA4eFx1NmMwMmVcdTAwMDNEXHUwMDE1XHU0Zjc2XHU1YmMzXHUwMDE5ZmpMX1x1MDAxOVx1NTQwOVx1NGU2OXhcdTAwMWRwSVdEIFx1ODA2MFx1NGU3Y1x1NWVlYnlHWVx1MDAwZVRkXHU0ZmI2XHU3NDMwXHU1OTc3XHU4ZDU0R1ZcdTZiNzNTS1x1OTU3Nlx1NzBlNVx1N2IzY1x1N2VjZVx1MDAxOUV1eFx1MDAxNlx1OTUzMFx1NWQzZFx1NWJmYVx1Nzc5NHJcdTU5NWFcdTk2MGFcdTc3YmVcdTMwNThVXHU3ZWNiXHU3M2EyXHU3NDJkZ1x1MDAwMVx1MDAxNTRSXHUwMDA0U1x1MDAxNjJ4XHUwMDBibVx1NzIwY1x1NjUyMVx1ZmYyM1cnbHJcdTAwMDQwIVNcdTY1YjJcdTdlZDdcdTUyMTJcdTk2MWRcdTUyNmZWMFx1MDAxYVx1MDAwNmdcdTAwMWZcdTVmMzZcdThmOTZcdTViMjVcdTY1MTdcdWZmN2RmXHU1YjI0XHUwMDE2eVx1NWIwZFVBXHU1M2Y1QFx1NWIxMHFcdTAwMTVcdTAwMDFSXHUwMDE1XHU3YjQxXHU3N2ExSlx1MDAxOVx1NGYxZVx1OGQ3MVVCXGJUXHU0ZjYwXHU1YmViXHUwMDE2bUBJUnFcdTAwMWVcdTAwMWFcbnpcdTAwMDdcdTdiNGZcdTc3Y2FOZFx1NTJjM1x1OTFmOWZaVkdcdTZjNDZcdTg4MzBcdTAwMTlmaEVKV1dcdTAwMDN7RFx1N2I2MFx1Nzc4Ml1HXHU1MmM5XHU5MWJmXHUwMDE5ZmhVXHU2YzdkXHU4ODc5VG9pXHUwMDA2ZVx1MDAxZkQgcVx1MDAwMlx1N2IxZlx1NzdiZWNVXHU2YzdkXHU4ODc5VG9pXHUwMDAzZlx1OTA2ZVx1NWVjMUd5QVx1MDAxN3h6XHUwMDFiSn5XNlx1NjY0N1x1NGY3Ylx1ZmY1Y1x1OTA2ZVx1NWVjMUd5Qlx1MDAxYSN6MkpLXHU2NjZiXHU3NmJjXHU0ZWNhXHU1NDNlXHVmZjVjXHU0ZjIyXHU4ZDRmR3lCXHUwMDFhP3pcdTAwMTYsfEx2XHUwMDFkc1x1N2I2MFx1Nzc4Mlx1N2VhM1x1NTQ2ZmhQXHU1OWJiXHU2MTQyXHU5MTg4XHU3YmY4XHU3YjRmXHU3N2NhVzZcdTk1YjBcdTZkMDhcdTY3MjdcdTRlODdcdWZmN2RcdTgyZDZcdTY3Y2VcdTVjMDFcdTAwMTluK1x1OTA5ZFx1NGYyNFx1Njc1OFx1NGU4Mlx1ZmY1ZVx1NmIzZVx1NTY1ZWZSXHUwMDE1XHU1OGY5XHU1MmYyXHU5NTk4XHU2ZDA3XHU2MmNkXHU4MGE0XHU1OWY3XHU2MTY2XHU5MWU4XHU3YmY5XHU3YjBkXHU3ZWZmXHUwMDAyXHU3ZWUxUj5EIFNuXHU1MjdiXHU5MDc5XHU4MDcwXHVmZjczXHUzMDY5XHU2MzZlXHU2MDgxXHU4ZDQ1XHU4YmNjXHUwMGY2Uj5HciJ9@";</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">console.log(g(a))</span><br></code></pre></td></tr></table></figure>

<p>运行这个文件查看结果</p>
<p><img src="WX20200512-102800.png" srcset="/img/loading.gif" alt=""></p>
<p>我们得到了想要的一切</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这次逆向的重点是修改原来的js内容，其中有很多坑，比如base64实现的差异以及对混淆的处理，需要耐心调试才行。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>JS逆向</category>
      </categories>
      <tags>
        <tag>JS逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>AC自动机</title>
    <url>/2020/09/11/article-60/</url>
    <content><![CDATA[<p>用多模式串匹配实现敏感词过滤</p>
<a id="more"></a>

<h3 id="基于单模式串和-Trie-树实现的敏感词过滤"><a href="#基于单模式串和-Trie-树实现的敏感词过滤" class="headerlink" title="基于单模式串和 Trie 树实现的敏感词过滤"></a>基于单模式串和 Trie 树实现的敏感词过滤</h3><p>BF 算法、RK 算法、BM 算法、KMP 算法，还有 Trie 树这几种算法中，只有Trie树是多模式串匹配算法。</p>
<p>单模式串匹配中，匹配每个模式串时都需要遍历一遍主串，相比之下，多模式串匹配只需要遍历一遍主串，所以后者效率会更高。</p>
<h4 id="如何用-Trie-树实现敏感词过滤功能"><a href="#如何用-Trie-树实现敏感词过滤功能" class="headerlink" title="如何用 Trie 树实现敏感词过滤功能"></a>如何用 Trie 树实现敏感词过滤功能</h4><p>我们可以对敏感词字典进行预处理，构建成 Trie 树结构。这个预处理的操作只需要做一次，如果敏感词字典动态更新了，比如删除、添加了一个敏感词，那我们只需要动态更新一下 Trie 树就可以了。</p>
<p>当用户输入一个文本内容后，我们把用户输入的内容作为主串，从第一个字符（假设是字符 C）开始，在 Trie 树中匹配。当匹配到 Trie 树的叶子节点，或者中途遇到不匹配字符的时候，我们将主串的开始匹配位置后移一位，也就是从字符 C 的下一个字符开始，重新在 Trie 树中匹配。</p>
<p>基于 Trie 树的这种处理方法，有点类似单模式串匹配的 BF 算法。所以可以进一步改进–&gt;<strong><em>AC 自动机</em></strong></p>
<h3 id="经典的多模式串匹配算法：AC-自动机"><a href="#经典的多模式串匹配算法：AC-自动机" class="headerlink" title="经典的多模式串匹配算法：AC 自动机"></a>经典的多模式串匹配算法：AC 自动机</h3><h4 id="构建AC自动机"><a href="#构建AC自动机" class="headerlink" title="构建AC自动机"></a>构建AC自动机</h4><p>类似KMP算法的next失效数组构建方式，这里叫做<strong><em>失效指针</em></strong></p>
<p>我们可以逐层依次来求解每个节点的失败指针。</p>
<p>构建好的样子如下图：</p>
<p><img src="5150d176502dda4adfc63e9b2915b23c.jpg" srcset="/img/loading.gif" alt=""></p>
<h4 id="如何在-AC-自动机上匹配主串？"><a href="#如何在-AC-自动机上匹配主串？" class="headerlink" title="如何在 AC 自动机上匹配主串？"></a>如何在 AC 自动机上匹配主串？</h4><p>在匹配过程中，主串从 i=0 开始，AC 自动机从指针 p=root 开始，假设模式串是 b，主串是 a。</p>
<ul>
<li>如果 p 指向的节点有一个等于 b[i]的子节点 x，我们就更新 p 指向 x，这个时候我们需要通过失败指针，检测一系列失败指针为结尾的路径是否是模式串。这一句不好理解，你可以结合代码看。处理完之后，我们将 i 加一，继续这两个过程；</li>
<li>如果 p 指向的节点没有等于 b[i]的子节点，那失败指针就派上用场了，我们让 p=p-&gt;fail，然后继续这 2 个过程。</li>
</ul>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>贪心算法</title>
    <url>/2020/09/14/article-61/</url>
    <content><![CDATA[<p>用贪心算法实现Huffman压缩编码</p>
<a id="more"></a>

<h3 id="如何理解“贪心算法”？"><a href="#如何理解“贪心算法”？" class="headerlink" title="如何理解“贪心算法”？"></a>如何理解“贪心算法”？</h3><p>针对一组数据，我们定义了限制值和期望值，希望从中选出几个数据，在满足限制值的情况下，期望值最大。每次选择当前情况下，在对限制值同等贡献量的情况下，对期望值贡献最大的数据。</p>
<p>但是实际上，用贪心算法解决问题的思路，并不总能给出最优解。</p>
<h3 id="贪心算法实战分析"><a href="#贪心算法实战分析" class="headerlink" title="贪心算法实战分析"></a>贪心算法实战分析</h3><h4 id="分糖果"><a href="#分糖果" class="headerlink" title="分糖果"></a>分糖果</h4><p>我们有 m 个糖果和 n 个孩子。我们现在要把糖果分给这些孩子吃，但是糖果少，孩子多（m&lt;n），所以糖果只能分配给一部分孩子。如何分配糖果，能尽可能满足最多数量的孩子？</p>
<p>方案是：首先将孩子对糖果大小的需求排序，得到：g1 &lt;= g2 &lt;= g3，…； 再对糖果的大小进行排序：s1 &lt;= s2 &lt;= s3 …; 从g1开始遍历所有的g，找能够满足大于等于g的最小的糖果；由此，被满足的孩子个数是最多的。</p>
<h4 id="钱币找零"><a href="#钱币找零" class="headerlink" title="钱币找零"></a>钱币找零</h4><p>假设我们有 1 元、2 元、5 元、10 元、20 元、50 元、100 元这些面额的纸币，它们的张数分别是 c1、c2、c5、c10、c20、c50、c100。我们现在要用这些钱来支付 K 元，最少要用多少张纸币呢？</p>
<p>方案是：先用面值最大的来支付，如果不够，就继续用更小一点面值的，以此类推，最后剩下的用 1 元来补齐。</p>
<h4 id="区间覆盖"><a href="#区间覆盖" class="headerlink" title="区间覆盖"></a>区间覆盖</h4><p>假设我们有 n 个区间，区间的起始端点和结束端点分别是[l1, r1]，[l2, r2]，[l3, r3]，……，[ln, rn]。我们从这 n 个区间中选出一部分区间，这部分区间满足两两不相交（端点相交的情况不算相交），最多能选出多少个区间呢？</p>
<p><img src="f0a1b7978711651d9f084d19a70805cd.jpg" srcset="/img/loading.gif" alt=""></p>
<p>解决思路：我们假设这 n 个区间中最左端点是 lmin，最右端点是 rmax。这个问题就相当于，我们选择几个不相交的区间，从左到右将[lmin, rmax]覆盖上。我们按照起始端点从小到大的顺序对这 n 个区间排序。我们每次选择的时候，左端点跟前面的已经覆盖的区间不重合的，右端点又尽量小的，这样可以让剩下的未覆盖区间尽可能的大，就可以放置更多的区间。这实际上就是一种贪心的选择方法。</p>
<p><img src="ef2d0bd8284cb6e69294566a45b0e2b5.jpg" srcset="/img/loading.gif" alt=""></p>
<h3 id="霍夫曼编码"><a href="#霍夫曼编码" class="headerlink" title="霍夫曼编码"></a>霍夫曼编码</h3><p>霍夫曼编码不仅会考察文本中有多少个不同字符，还会考察每个字符出现的频率，根据频率的不同，选择不同长度的编码。霍夫曼编码试图用这种不等长的编码方法，来进一步增加压缩的效率。如何给不同频率的字符选择不同长度的编码呢？根据贪心的思想，我们可以把出现频率比较多的字符，用稍微短一些的编码；出现频率比较少的字符，用稍微长一些的编码。对于等长的编码来说，我们解压缩起来很简单。但是，霍夫曼编码是不等长的，每次应该读取 1 位还是 2 位、3 位等等来解压缩呢？这个问题就导致霍夫曼编码解压缩起来比较复杂。为了避免解压缩过程中的歧义，霍夫曼编码要求各个字符的编码之间，不会出现某个编码是另一个编码前缀的情况。</p>
<p>假设这 6 个字符出现的频率从高到低依次是 a、b、c、d、e、f。我们把它们编码下面这个样子，任何一个字符的编码都不是另一个的前缀，在解压缩的时候，我们每次会读取尽可能长的可解压的二进制串，所以在解压缩的时候也不会歧义。经过这种编码压缩之后，这 1000 个字符只需要 2100bits 就可以了。</p>
<p><img src="83921e609c8a4dc81ca5b90c8b4cd745.jpg" srcset="/img/loading.gif" alt=""></p>
<h4 id="如何根据字符出现频率的不同，给不同的字符进行不同长度的编码"><a href="#如何根据字符出现频率的不同，给不同的字符进行不同长度的编码" class="headerlink" title="如何根据字符出现频率的不同，给不同的字符进行不同长度的编码"></a>如何根据字符出现频率的不同，给不同的字符进行不同长度的编码</h4><p>我们把每个字符看作一个节点，并且附带着把频率放到优先级队列中。我们从队列中取出频率最小的两个节点 A、B，然后新建一个节点 C，把频率设置为两个节点的频率之和，并把这个新节点 C 作为节点 A、B 的父节点。最后再把 C 节点放入到优先级队列中。重复这个过程，直到队列中没有数据。</p>
<p><img src="7b6a08e7df45eac66820b959c64f877a.jpg" srcset="/img/loading.gif" alt=""></p>
<p>现在，我们给每一条边加上画一个权值，指向左子节点的边我们统统标记为 0，指向右子节点的边，我们统统标记为 1，那从根节点到叶节点的路径就是叶节点对应字符的霍夫曼编码。</p>
<p><img src="ccf15d048be005924a409574dce143ed.jpg" srcset="/img/loading.gif" alt=""></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>贪心算法适用的场景比较有限。这种算法思想更多的是指导设计基础算法。比如最小生成树算法、单源最短路径算法，这些算法都用到了贪心算法。</p>
<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><h4 id="在一个非负整数-a-中，我们希望从中移除-k-个数字，让剩下的数字值最小，如何选择移除哪-k-个数字呢？"><a href="#在一个非负整数-a-中，我们希望从中移除-k-个数字，让剩下的数字值最小，如何选择移除哪-k-个数字呢？" class="headerlink" title="在一个非负整数 a 中，我们希望从中移除 k 个数字，让剩下的数字值最小，如何选择移除哪 k 个数字呢？"></a>在一个非负整数 a 中，我们希望从中移除 k 个数字，让剩下的数字值最小，如何选择移除哪 k 个数字呢？</h4><p>由高位开始两两比较大小，若高位大，低位小，则删除高位；反之右移一位。循环k次。</p>
<h4 id="假设有-n-个人等待被服务，但是服务窗口只有一个，每个人需要被服务的时间长度是不同的，如何安排被服务的先后顺序，才能让这-n-个人总的等待时间最短？"><a href="#假设有-n-个人等待被服务，但是服务窗口只有一个，每个人需要被服务的时间长度是不同的，如何安排被服务的先后顺序，才能让这-n-个人总的等待时间最短？" class="headerlink" title="假设有 n 个人等待被服务，但是服务窗口只有一个，每个人需要被服务的时间长度是不同的，如何安排被服务的先后顺序，才能让这 n 个人总的等待时间最短？"></a>假设有 n 个人等待被服务，但是服务窗口只有一个，每个人需要被服务的时间长度是不同的，如何安排被服务的先后顺序，才能让这 n 个人总的等待时间最短？</h4><p>前面的被服务时间会影响，后面的被服务时间；总时间是后面的时间加上前面的时间和，所以，从服务时间最少的开始服务。</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>分治算法</title>
    <url>/2020/09/14/article-62/</url>
    <content><![CDATA[<p>大规模计算框架MapReduce中的分治思想</p>
<a id="more"></a>

<h3 id="如何理解分治算法？"><a href="#如何理解分治算法？" class="headerlink" title="如何理解分治算法？"></a>如何理解分治算法？</h3><p>分治算法（divide and conquer）的核心思想其实就是四个字，<strong>分而治之</strong> ，也就是将原问题划分成 n 个规模较小，并且结构与原问题相似的子问题，递归地解决这些子问题，然后再合并其结果，就得到原问题的解。</p>
<p><strong>分治算法是一种处理问题的思想，递归是一种编程技巧。</strong></p>
<p>分治算法的递归实现中，每一层递归都做了如下三个操作：</p>
<ul>
<li>分解：将原问题分解成一系列子问题；</li>
<li>解决：递归地求解各个子问题，若子问题足够小，则直接求解；</li>
<li>合并：将子问题的结果合并成原问题。</li>
</ul>
<p>分治算法解决问题需要满足的条件：</p>
<ul>
<li>原问题与分解成的小问题具有相同的模式；</li>
<li>原问题分解成的子问题可以独立求解，子问题之间没有相关性，这一点是分治算法跟动态规划的明显区别，等我们讲到动态规划的时候，会详细对比这两种算法；</li>
<li>具有分解终止条件，也就是说，当问题足够小时，可以直接求解；</li>
<li>可以将子问题合并成原问题，而这个合并操作的复杂度不能太高，否则就起不到减小算法总体复杂度的效果了。</li>
</ul>
<h3 id="分治算法应用举例分析"><a href="#分治算法应用举例分析" class="headerlink" title="分治算法应用举例分析"></a>分治算法应用举例分析</h3><h4 id="如何编程求出一组数据的有序对个数或者逆序对个数"><a href="#如何编程求出一组数据的有序对个数或者逆序对个数" class="headerlink" title="如何编程求出一组数据的有序对个数或者逆序对个数"></a>如何编程求出一组数据的有序对个数或者逆序对个数</h4><p>借助归并排序算法，设置一个计数变量，在排序过程中如果发现逆序对就执行技术操作。</p>
<p><img src="e835cab502bec3ebebab92381c667532.jpg" srcset="/img/loading.gif" alt=""></p>
<h4 id="MapReduce-的本质处理思想"><a href="#MapReduce-的本质处理思想" class="headerlink" title="MapReduce 的本质处理思想"></a>MapReduce 的本质处理思想</h4><p>通过将任务拆分并分发至各个block中进行处理后再合并。</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>回溯算法</title>
    <url>/2020/09/14/article-63/</url>
    <content><![CDATA[<p>八皇后及四色问题用到的算法–回溯</p>
<a id="more"></a>

<h3 id="如何理解“回溯算法”？"><a href="#如何理解“回溯算法”？" class="headerlink" title="如何理解“回溯算法”？"></a>如何理解“回溯算法”？</h3><p>为了有规律地枚举所有可能的解，避免遗漏和重复，我们把问题求解的过程分为多个阶段。每个阶段，我们都会面对一个岔路口，我们先随意选一条路走，当发现这条路走不通的时候（不符合期望的解），就回退到上一个岔路口，另选一种走法继续走。</p>
<h4 id="八皇后问题"><a href="#八皇后问题" class="headerlink" title="八皇后问题"></a>八皇后问题</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">board = [<span class="hljs-number">0</span>] * <span class="hljs-number">8</span><br><span class="hljs-comment"># pp(board)</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">check</span><span class="hljs-params">(board,row,col)</span>:</span><br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i &lt; row:<br>        <span class="hljs-keyword">if</span> abs(col-board[i]) <span class="hljs-keyword">in</span> (<span class="hljs-number">0</span>,abs(row-i)):<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        i += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">EightQueen</span><span class="hljs-params">(board,row)</span>:</span><br>    blen = len(board)<br>    <span class="hljs-keyword">if</span> row == blen:    <span class="hljs-comment"># 来到不存在的第九行了</span><br>        print(board)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    col = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> col &lt; blen:<br>        <span class="hljs-keyword">if</span> check(board,row,col):<br>            board[row] = col<br>            <span class="hljs-keyword">if</span> EightQueen(board,row+<span class="hljs-number">1</span>):<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        col += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printBoard</span><span class="hljs-params">(board)</span>:</span><br>    <span class="hljs-string">'''为了更友好地展示结果 方便观察'''</span><br>    <span class="hljs-keyword">import</span> sys<br>    <span class="hljs-keyword">for</span> i,col <span class="hljs-keyword">in</span> enumerate(board):<br>        sys.stdout.write(<span class="hljs-string">'□ '</span> * col + <span class="hljs-string">'■ '</span> + <span class="hljs-string">'□ '</span> * (len(board) - <span class="hljs-number">1</span> - col))<br>        print(<span class="hljs-string">''</span>)<br></code></pre></td></tr></table></figure>

<h3 id="两个回溯算法的经典应用"><a href="#两个回溯算法的经典应用" class="headerlink" title="两个回溯算法的经典应用"></a>两个回溯算法的经典应用</h3><h4 id="0-1-背包"><a href="#0-1-背包" class="headerlink" title="0-1 背包"></a>0-1 背包</h4><p>我们有一个背包，背包总的承载重量是 Wkg。现在我们有 n 个物品，每个物品的重量不等，并且不可分割。我们现在期望选择几件物品，装载到背包中。在不超过背包所能装载重量的前提下，如何让背包中物品的总重量最大？</p>
<p>这里就可以用回溯的方法。我们可以把物品依次排列，整个问题就分解为了 n 个阶段，每个阶段对应一个物品怎么选择。先对第一个物品进行处理，选择装进去或者不装进去，然后再递归地处理剩下的物品。描述起来很费劲，我们直接看代码，反而会更加清晰一些。</p>
<h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p>正则表达式中，最重要的就是通配符，通配符结合在一起，可以表达非常丰富的语义。为了方便讲解，我假设正则表达式中只包含“<em>”和“?”这两种通配符，并且对这两个通配符的语义稍微做些改变，其中，“</em>”匹配任意多个（大于等于 0 个）任意字符，“?”匹配零个或者一个任意字符。基于以上背景假设，我们看下，如何用回溯算法，判断一个给定的文本，能否跟给定的正则表达式匹配？</p>
<p>我们依次考察正则表达式中的每个字符，当是非通配符时，我们就直接跟文本的字符进行匹配，如果相同，则继续往下处理；如果不同，则回溯。</p>
<p>如果遇到特殊字符的时候，我们就有多种处理方式了，也就是所谓的岔路口，比如“*”有多种匹配方案，可以匹配任意个文本串中的字符，我们就先随意的选择一种匹配方案，然后继续考察剩下的字符。如果中途发现无法继续匹配下去了，我们就回到这个岔路口，重新选择一种匹配方案，然后再继续匹配剩下的字符。</p>
<h3 id="内容小结"><a href="#内容小结" class="headerlink" title="内容小结"></a>内容小结</h3><p>回溯算法的思想非常简单，大部分情况下，都是用来解决广义的搜索问题，也就是，从一组可能的解中，选择出一个满足要求的解。回溯算法非常适合用递归来实现，在实现的过程中，剪枝操作是提高回溯效率的一种技巧。利用剪枝，我们并不需要穷举搜索所有的情况，从而提高搜索效率。</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>初识动态规划</title>
    <url>/2020/09/15/article-64/</url>
    <content><![CDATA[<p>初识动态规划</p>
<a id="more"></a>

<h3 id="初识动态规划"><a href="#初识动态规划" class="headerlink" title="初识动态规划"></a>初识动态规划</h3><p>动态规划比较适合用来求解最优问题，比如求最大值、最小值等等。它可以非常显著地降低时间复杂度，提高代码的执行效率。</p>
<p>下面介绍来两个实例</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="0-1-背包问题"><a href="#0-1-背包问题" class="headerlink" title="0-1 背包问题"></a>0-1 背包问题</h4><p>背包最大承重为9，每个物品的重量分别是 2，2，4，6，3</p>
<p>回溯算法的递归树表示</p>
<p><img src="42ca6cec4ad034fc3e5c0605fbacecea.jpg" srcset="/img/loading.gif" alt=""></p>
<p>从递归树中，你应该能会发现，有些子问题的求解是重复的，比如图中 f(2, 2) 和 f(3,4) 都被重复计算了两次。当然，我们可以借助 <strong><em>备忘录</em></strong> 来记录状态。</p>
<p>但是，我们还可以用动态规划来处理这个问题。</p>
<p>我们把整个求解过程分为 n 个阶段，每个阶段会决策一个物品是否放到背包中。每个物品决策（放入或者不放入背包）完之后，背包中的物品的重量会有多种情况，也就是说，会达到多种不同的状态，对应到递归树中，就是有很多不同的节点。</p>
<p><img src="aaf51df520ea6b8056f4e62aed81a5b5.jpg" srcset="/img/loading.gif" alt=""></p>
<p><img src="bbbb934247219db8299bd46dba9dd47e.jpg" srcset="/img/loading.gif" alt=""></p>
<h5 id="由此推出动态规划解决问题的思路："><a href="#由此推出动态规划解决问题的思路：" class="headerlink" title="由此推出动态规划解决问题的思路："></a>由此推出动态规划解决问题的思路：</h5><p><strong>我们把问题分解为多个阶段，每个阶段对应一个决策。我们记录每一个阶段可达的状态集合（去掉重复的），然后通过当前阶段的状态集合，来推导下一个阶段的状态集合，动态地往前推进。</strong></p>
<h4 id="0-1-背包问题升级版"><a href="#0-1-背包问题升级版" class="headerlink" title="0-1 背包问题升级版"></a>0-1 背包问题升级版</h4><p>在原来的基础上加入物品价值的概念，分别为3，4，8，9，6</p>
<p>在满足背包最大重量限制的前提下，背包中可装入物品的总价值最大是多少呢？</p>
<p>先来看递归树</p>
<p><img src="bf0aa18f367db1b8dfd392906cb5693f.jpg" srcset="/img/loading.gif" alt=""></p>
<p>我们用一个二维数组 states[n][w+1]，来记录每层可以达到的不同状态。不过这里数组存储的值不再是 boolean 类型的了，而是当前状态对应的最大总价值。我们把每一层中 (i, cw) 重复的状态（节点）合并，只记录 cv 值最大的那个状态，然后基于这些状态来推导下一层的状态。</p>
<p><strong>时间复杂度</strong> O(n*w)</p>
<p><strong>空间复杂度</strong> O(n*w)</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划理论</title>
    <url>/2020/09/15/article-65/</url>
    <content><![CDATA[<p>搞懂最优子结构、无后效性和重复子问题</p>
<a id="more"></a>

<h3 id="“一个模型三个特征”理论讲解"><a href="#“一个模型三个特征”理论讲解" class="headerlink" title="“一个模型三个特征”理论讲解"></a>“一个模型三个特征”理论讲解</h3><h4 id="“一个模型”—多阶段决策最优解模型"><a href="#“一个模型”—多阶段决策最优解模型" class="headerlink" title="“一个模型”—多阶段决策最优解模型"></a>“一个模型”—多阶段决策最优解模型</h4><p>我们一般是用动态规划来解决最优问题。而解决问题的过程，需要经历多个决策阶段。每个决策阶段都对应着一组状态。然后我们寻找一组决策序列，经过这组决策序列，能够产生最终期望求解的最优值。</p>
<h4 id="三个特征"><a href="#三个特征" class="headerlink" title="三个特征"></a>三个特征</h4><h5 id="最优子结构"><a href="#最优子结构" class="headerlink" title="最优子结构"></a>最优子结构</h5><p>最优子结构指的是，问题的最优解包含子问题的最优解。反过来说就是，我们可以通过子问题的最优解，推导出问题的最优解。如果我们把最优子结构，对应到我们前面定义的动态规划问题模型上，那我们也可以理解为，后面阶段的状态可以通过前面阶段的状态推导出来。</p>
<h5 id="无后效性"><a href="#无后效性" class="headerlink" title="无后效性"></a>无后效性</h5><p>无后效性有两层含义，第一层含义是，在推导后面阶段的状态的时候，我们只关心前面阶段的状态值，不关心这个状态是怎么一步一步推导出来的。第二层含义是，某阶段状态一旦确定，就不受之后阶段的决策影响。无后效性是一个非常“宽松”的要求。只要满足前面提到的动态规划问题模型，其实基本上都会满足无后效性。</p>
<h5 id="重复子问题"><a href="#重复子问题" class="headerlink" title="重复子问题"></a>重复子问题</h5><p>不同的决策序列，到达某个相同的阶段时，可能会产生重复的状态。</p>
<h3 id="实例剖析"><a href="#实例剖析" class="headerlink" title="实例剖析"></a>实例剖析</h3><p>假设我们有一个 n 乘以 n 的矩阵 w[n][n]。矩阵存储的都是正整数。棋子起始位置在左上角，终止位置在右下角。我们将棋子从左上角移动到右下角。每次只能向右或者向下移动一位。从左上角到右下角，会有很多不同的路径可以走。我们把每条路径经过的数字加起来看作路径的长度。那从左上角移动到右下角的最短路径长度是多少呢？</p>
<p><img src="652dff86c5dcc6a0e2a0de9a814b079f.jpg" srcset="/img/loading.gif" alt=""></p>
<p><img src="b0da245a38fafbfcc590782486b85269.jpg" srcset="/img/loading.gif" alt=""></p>
<p>我们把状态定义为 min_dist(i, j)，其中 i 表示行，j 表示列。min_dist 表达式的值表示从 (0, 0) 到达 (i, j) 的最短路径长度。所以有如下表达式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><code class="hljs matlab">min_dist(<span class="hljs-built_in">i</span>, <span class="hljs-built_in">j</span>) = w[<span class="hljs-built_in">i</span>][<span class="hljs-built_in">j</span>] + <span class="hljs-built_in">min</span>(min_dist(<span class="hljs-built_in">i</span>, <span class="hljs-built_in">j</span><span class="hljs-number">-1</span>), min_dist(<span class="hljs-built_in">i</span><span class="hljs-number">-1</span>, <span class="hljs-built_in">j</span>))<br></code></pre></td></tr></table></figure>



<h3 id="两种动态规划解题思路总结"><a href="#两种动态规划解题思路总结" class="headerlink" title="两种动态规划解题思路总结"></a>两种动态规划解题思路总结</h3><h4 id="状态转移表法"><a href="#状态转移表法" class="headerlink" title="状态转移表法"></a>状态转移表法</h4><p>针对上面的问题，画出状态表</p>
<p><img src="b3f0de1c81533a0d24c43426eaf09aca.jpg" srcset="/img/loading.gif" alt=""></p>
<p><img src="05a48baf7fb4d251bf5078840079107d.jpg" srcset="/img/loading.gif" alt=""></p>
<h4 id="状态转移方程法"><a href="#状态转移方程法" class="headerlink" title="状态转移方程法"></a>状态转移方程法</h4><p>一种是<strong>递归加“备忘录”</strong>，另一种是<strong>迭代递推</strong></p>
<p>上面问题的状态转移公式：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><code class="hljs matlab">min_dist(<span class="hljs-built_in">i</span>, <span class="hljs-built_in">j</span>) = w[<span class="hljs-built_in">i</span>][<span class="hljs-built_in">j</span>] + <span class="hljs-built_in">min</span>(min_dist(<span class="hljs-built_in">i</span>, <span class="hljs-built_in">j</span><span class="hljs-number">-1</span>), min_dist(<span class="hljs-built_in">i</span><span class="hljs-number">-1</span>, <span class="hljs-built_in">j</span>))<br></code></pre></td></tr></table></figure>

<p><strong><em>状态转移方程是解决动态规划的关键</em></strong></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>状态转移表法解题思路大致可以概括为，<strong>回溯算法实现 - 定义状态 - 画递归树 - 找重复子问题 - 画状态转移表 - 根据递推关系填表 - 将填表过程翻译成代码</strong>。</p>
<p>状态转移方程法的大致思路可以概括为，<strong>找最优子结构 - 写状态转移方程 - 将状态转移方程翻译成代码</strong>。</p>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>基础篇</tag>
        <tag>数据结构与算法</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL基本操作</title>
    <url>/2020/05/19/article-7/</url>
    <content><![CDATA[<p>version：8.0.17</p>
<p>MySQL基本操作</p>
<a id="more"></a>



<h2 id="常用基础命令"><a href="#常用基础命令" class="headerlink" title="常用基础命令"></a>常用基础命令</h2><h3 id="使用帮助"><a href="#使用帮助" class="headerlink" title="使用帮助"></a>使用帮助</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">help create<br></code></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">Many <span class="hljs-built_in">help</span> items <span class="hljs-keyword">for</span> your request exist.<br>To make a more specific request, please <span class="hljs-built_in">type</span> <span class="hljs-string">'help &lt;item&gt;'</span>,<br><span class="hljs-built_in">where</span> &lt;item&gt; is one of the following<br>topics:<br>   CREATE DATABASE<br>   CREATE EVENT<br>   CREATE FUNCTION<br>   CREATE FUNCTION UDF<br>   CREATE INDEX<br>   CREATE LOGFILE GROUP<br>   CREATE PROCEDURE<br>   CREATE RESOURCE GROUP<br>   CREATE ROLE<br>   CREATE SCHEMA<br>   CREATE SERVER<br>   CREATE SPATIAL REFERENCE SYSTEM<br>   CREATE TABLE<br>   CREATE TABLESPACE<br>   CREATE TRIGGER<br>   CREATE USER<br>   CREATE VIEW<br>   SHOW<br>   SHOW CREATE DATABASE<br>   SHOW CREATE EVENT<br>   SHOW CREATE FUNCTION<br>   SHOW CREATE PROCEDURE<br>   SHOW CREATE SCHEMA<br>   SHOW CREATE TABLE<br>   SHOW CREATE USER<br>   SPATIAL INDEXES<br></code></pre></td></tr></table></figure>



<h3 id="创建、删除、查看数据库"><a href="#创建、删除、查看数据库" class="headerlink" title="创建、删除、查看数据库"></a><strong>创建、删除、查看数据库</strong></h3><h4 id="创建默认字符集的数据库（默认是拉丁字符集）"><a href="#创建默认字符集的数据库（默认是拉丁字符集）" class="headerlink" title="创建默认字符集的数据库（默认是拉丁字符集）"></a>创建默认字符集的数据库（默认是拉丁字符集）</h4><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">create database test_data;<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">show databases like &quot;test%&quot;;<br></code></pre></td></tr></table></figure>

<h4 id="创建gbk字符集的数据库"><a href="#创建gbk字符集的数据库" class="headerlink" title="创建gbk字符集的数据库"></a><strong>创建gbk字符集的数据库</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">create database test_gbk DEFAULT CHARACTER SET gbk COLLATE gbk_chinese_ci;<br></code></pre></td></tr></table></figure>

<h4 id="查看创建数据库的语句"><a href="#查看创建数据库的语句" class="headerlink" title="查看创建数据库的语句"></a>查看创建数据库的语句</h4><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">show create database test_gbk;<br></code></pre></td></tr></table></figure>

<h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">drop database test_data;<br></code></pre></td></tr></table></figure>

<h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><h4 id="进入指定数据库操作"><a href="#进入指定数据库操作" class="headerlink" title="进入指定数据库操作"></a>进入指定数据库操作</h4><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">use test_gbk;<br></code></pre></td></tr></table></figure>

<h4 id="查看当前连接的数据库"><a href="#查看当前连接的数据库" class="headerlink" title="查看当前连接的数据库"></a><strong>查看当前连接的数据库</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select database();<br></code></pre></td></tr></table></figure>

<h4 id="查看当前连接数据库的用户"><a href="#查看当前连接数据库的用户" class="headerlink" title="查看当前连接数据库的用户"></a><strong>查看当前连接数据库的用户</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select user();<br></code></pre></td></tr></table></figure>

<h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">create user if not exists &#39;testuser&#39;@&#39;localhost&#39; identified by &#39;123456&#39;;<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">create user if not exists &#39;company_read_only&#39;@&#39;localhost&#39; identified with mysql_native_password by &#39;company_pass&#39; with max_queries_per_hour 500 max_updates_per_hour 100;<br></code></pre></td></tr></table></figure>

<p>上述声明将为用户创建以下内容:</p>
<ul>
<li>用户名 : company read only</li>
<li>仅从localhost访问</li>
<li>可以限制对 IP范围的访问，例如 10.148.%.%。 通过给出%，用户可以从任何主机访问</li>
<li>密码：company_pass</li>
<li>使用 mysql_native_password（默认）身份验证</li>
<li>还可以指定任何可选的身份验证，例如 sha256_password、LDAP 或 Kerberos</li>
<li>用户可以在一小时内执行的最大查询数为 500</li>
<li>用户可以在一小时内执行的最大更新次数为 100次</li>
</ul>
<h3 id="授予和撤销用户的访问权限"><a href="#授予和撤销用户的访问权限" class="headerlink" title="授予和撤销用户的访问权限"></a>授予和撤销用户的访问权限</h3><p>你可以限制用户访问特定数据库或表，或限制特定操作，如 SELECT 、 INSERT 和UPDATE。 你需要拥有 GRANT 权限，才能为其他用户授予权限 。</p>
<h4 id="授予权限"><a href="#授予权限" class="headerlink" title="授予权限"></a>授予权限</h4><ul>
<li>将READ ONLY (SELECT)权限授予testuser用户</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">grant select on company.* to &#39;testuser&#39;@&#39;localhost&#39;;<br></code></pre></td></tr></table></figure>

<ul>
<li>限制查询指定的表。 将testuser用户限制为仅能查询employees 表 </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">grant select on employees.employees to &#39;testuser&#39;@&#39;localhost&#39;;<br></code></pre></td></tr></table></figure>

<ul>
<li>将访问权限限制为仅能查询指定列。限制testuser用户仅能访问employees表的first_name列和last_name列</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">grant select(first_name, last_name) on employees.employees to &#39;testuser&#39;@&#39;localhost&#39;;<br></code></pre></td></tr></table></figure>

<ul>
<li>扩展授权。可以通过执行新授权来扩展授权。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">grant select(salary) on employees.salaries to &#39;company_read_only&#39;@&#39;localhost&#39;;<br></code></pre></td></tr></table></figure>

<ul>
<li>创建 SUPER 用户 。 需要一个管理员账户来管理该服务器 。 ALL 表示除 GRANT 权限之外的所有权限 。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">create user &#39;super_admin&#39;@&#39;%&#39; identified with mysql_native_password by &#39;super@admin&#39;;<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">grant all on *.* to &#39;super_admin&#39;@&#39;%&#39;;<br></code></pre></td></tr></table></figure>

<ul>
<li>授予 GRANT特权。 用户拥有 GRANT OPTION权限才能授予其他用户权限。 可以将 GRANT 特权扩展到 super_admin 超级用户</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">grant grant option on *.* to &#39;super_admin&#39;@&#39;%&#39;;<br></code></pre></td></tr></table></figure>

<h4 id="检查授权"><a href="#检查授权" class="headerlink" title="检查授权"></a><strong>检查授权</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">show grants for &#39;super_admin&#39;@&#39;%&#39;;<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">show grants for &#39;company_read_only&#39;@&#39;localhost&#39;;<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">show grants for &#39;testuser&#39;@&#39;localhost&#39;;<br></code></pre></td></tr></table></figure>

<h4 id="撤销权限"><a href="#撤销权限" class="headerlink" title="撤销权限"></a>撤销权限</h4><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">revoke insert,update,select,delete on test_gbk.* from &#39;testuser&#39;@&#39;localhost&#39;;<br><br># 回收后查看权限<br>mysql&gt; show grants for &#39;testuser&#39;@&#39;localhost&#39;;<br>+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+<br>| Grants for testuser@localhost                                                                                                                                                                                |<br>+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+<br>| GRANT USAGE ON *.* TO &#96;testuser&#96;@&#96;localhost&#96;                                                                                                                                                                 |<br>| GRANT CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER ON &#96;test_gbk&#96;.* TO &#96;testuser&#96;@&#96;localhost&#96; |<br>+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure>

<p>撤销 company_read_only 用户对薪水列的访问权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">revoke select(salary) on employees.salaries from &#39;company_read_only&#39;@&#39;localhost&#39;;<br></code></pre></td></tr></table></figure>

<h4 id="修改-mysql-user-表"><a href="#修改-mysql-user-表" class="headerlink" title="修改 mysql.user 表"></a>修改 mysql.user 表</h4><p>所有用户信息及权限都存储在 mysql.user表中 。如果你有权访问 mysql.user表， 则可以直接通过修改 mysql.user 表来创建用户并授予权限 。</p>
<p>如果你使用 GRANT 、 REVOKE 、 SET PASSWORD 或 RENAME USER 等账户管理语句间 接修改授权表， 则 服务器会通知这些更改，并立即再次将授权表加载到内存中 。</p>
<p>如果使用 INSERT、 UPDATE 或 DELETE 等语句直接修改授权表，则更改不会影响权限检查，除非你重新启动服务器或指示其重新加载表 。 如果直接更改授权表，但忘记了重新加载表，那么在重新启动服务器之前，这些更改无效 。</p>
<p>可以通过执行 FLUSH PRIVILEGES 语句来完成 GRANT 表的重新加载 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">update mysql.user set host&#x3D;&#39;localhost&#39; where user&#x3D;&#39;super_admin&#39;;<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">flush privileges;<br></code></pre></td></tr></table></figure>

<h4 id="锁定用户"><a href="#锁定用户" class="headerlink" title="锁定用户"></a>锁定用户</h4><p>MySQL支持使用 CREATE USER或 ALTER USER 锁定用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">alter user &#39;company_read_only&#39;@&#39;localhost&#39; account lock;<br></code></pre></td></tr></table></figure>

<p>解锁</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">alter user &#39;company_read_only&#39;@&#39;localhost&#39; account unlock;<br></code></pre></td></tr></table></figure>

<h4 id="为用户创建角色"><a href="#为用户创建角色" class="headerlink" title="为用户创建角色"></a>为用户创建角色</h4><p>MySQL 的角色是一个权限的集合。 与用户账户一样，角色的权限可以被授予和撤销。 用户账户被授予角色后， 该角色就会将其拥有的权限授予该账户 。 之前，我们为不同的用 户创建了读取 、写入和管理权限。对于写入权限，我们已授予用户 INSERT、 DELETE 和 UPDATE 权限 。 现在你可以将这些权限授予某个角色， 然后为用户分配该角色。通过这种方式，可以避免为许多用户账户单独授予权限的麻烦。</p>
<ul>
<li>创建角色</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">create role &#39;app_read_only&#39;, &#39;app_writes&#39;, &#39;app_developer&#39;;<br></code></pre></td></tr></table></figure>

<ul>
<li>使用 GRANT 语句为角色分自己权限</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">grant select on employees.* to &#39;app_read_only&#39;;<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">grant insert, update, delete on employees.* to &#39;app_writes&#39;;<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">grant all on employees.* to &#39;app_developer&#39;;<br></code></pre></td></tr></table></figure>

<ul>
<li>创建用户。如果你不指定主机，则将采用 %(任意主机):</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">create user emp_read_only identified by &#39;123&#39;;<br>create user emp_write identified by &#39;123&#39;;<br>create user emp_develpoer identified by &#39;123&#39;;<br>create user emp_read_write identified by &#39;123&#39;;<br></code></pre></td></tr></table></figure>

<ul>
<li>使用 GRANT 语句为用户分配角色 。你可以为用户分配多个角色 。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">grant &#39;app_read_only&#39; to emp_read_only;<br>grant &#39;app_writes&#39; to emp_write;<br>grant &#39;app_developer&#39; to emp_develpoer;<br>grant &#39;app_read_only&#39;, &#39;app_writes&#39; to emp_read_write;<br></code></pre></td></tr></table></figure>

<h3 id="创建、删除表"><a href="#创建、删除表" class="headerlink" title="创建、删除表"></a>创建、删除表</h3><p>在表中定义列时，应该指定列的名称、数据类型(整型、浮点型、字符串等)和默认 值(如果有的话) 。 MySQL 支持各种数据类型。更多有关信息请参阅MySQL文档(<a href="https://dev.mysql.com/doc/refman/8.0/en/spatial-extensions.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/8.0/en/spatial-extensions.html</a> )。下面是所有数据类型的概述，其中 JSON 数据类型是一个新的扩展类型  。</p>
<ol>
<li><p>数字 : TINYINT 、 SMALLINT 、 MEDIUMINT 、 INT 、 BIGINT 和 BIT。</p>
</li>
<li><p>浮点数 : DECIMAL、 FLOAT 和 DOUBLE。</p>
</li>
<li><p>字符串: CHAR、 VARCHAR、 BINARY、 VARBINARY、 BLOB、 TEXT、 ENUM 和 SET。</p>
</li>
<li><p>Spatial 数据类型，更多详细信息请参阅 <a href="https://dev.mysql.com/doc/refman/8.0/en/spatial-extensions.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/8.0/en/spatial-extensions.html</a> 。</p>
</li>
<li><p>JSON 数据类型，将在后面单独讨论。</p>
</li>
</ol>
<p>你可以在一个数据库中创建多张表 。</p>
<h4 id="建表，并且建立两个字段"><a href="#建表，并且建立两个字段" class="headerlink" title="建表，并且建立两个字段"></a><strong>建表，并且建立两个字段</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">mysql&gt; create table test(<br>       id int(4) not null,<br>       name char(20) not null<br>       );<br></code></pre></td></tr></table></figure>

<h4 id="另一种方式"><a href="#另一种方式" class="headerlink" title="另一种方式"></a>另一种方式</h4><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">mysql&gt; create table if not exists test_gbk.customers(<br>       id int unsigned AUTO_INCREMENT PRIMARY KEY,<br>       first_name varchar(20),<br>       last_name varchar(20),<br>       country varchar(20)<br>       ) engine&#x3D;InnoDB;<br></code></pre></td></tr></table></figure>

<p>其中的选项解释如下 。</p>
<p>• 句点符号: 表可以使用 database.table 引用。 如果已经连接到数据库， 则可 以简单地使用 customers 而不是 company . customers。</p>
<p>• IF NOT EXISTS :如果存在一个具有相同名字的表 ， 并且你指定了这个子句， MySQL 只会抛出一个警告，告知表已经存在 。 否则 ， MySQL 将抛出 一个错误 。</p>
<p>• id:它被声明为一个整型数，因为它只包含整型数。除此之外，还有两个关键字， AUTO_INCREMENT 和 PRIMARY KEY 。</p>
<p>• AUTO INCREMENT: 自动生成线性递增序列，因此不必担心为每一行的 id分配 值。</p>
<p>• PRIMARY KEY: 每行都Fl’!一个非空的UNIQUE列标识。 只有一列应该在表中定 义。 如果一个表包含 AUTO INCREMENT列， 则它会被视为 PRIMARY KEY。</p>
<p>• first_name、 last_name 和country: 它们包含字符串 ， 因此它们被定义为 varchar 。</p>
<p>• Engine:与列定义一起，还应该指定存储引擎。一些类型的存储引擎包括 InnoDB、 MyISAM、FEDERATED、BLACKHOLE、CSV和MEMORY。在所有引擎中， InnoDB 是唯一的事务引擎， 也是默认引擎。</p>
<h4 id="查看表"><a href="#查看表" class="headerlink" title="查看表"></a>查看表</h4><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs MYSQL">show tables;<br></code></pre></td></tr></table></figure>

<h4 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a><strong>查看表结构</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">desc test;<br></code></pre></td></tr></table></figure>

<h4 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a><strong>删除表</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">drop table test;<br></code></pre></td></tr></table></figure>

<h4 id="查看建表"><a href="#查看建表" class="headerlink" title="查看建表"></a><strong>查看建表</strong></h4><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">show create table test1\G<br></code></pre></td></tr></table></figure>

<h4 id="克隆表结构"><a href="#克隆表结构" class="headerlink" title="克隆表结构"></a>克隆表结构</h4><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">create table new_customers like customers;<br></code></pre></td></tr></table></figure>

<h3 id="插入、更新和删除行"><a href="#插入、更新和删除行" class="headerlink" title="插入、更新和删除行"></a>插入、更新和删除行</h3><h4 id="INSERT-语句用于在表中创建新记录"><a href="#INSERT-语句用于在表中创建新记录" class="headerlink" title="INSERT 语句用于在表中创建新记录"></a>INSERT 语句用于在表中创建新记录</h4><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">mysql&gt; insert ignore into customers<br>       (first_name, last_name, country)<br>       values<br>       (&#39;Mike&#39;, &#39;Galler&#39;, &#39;USA&#39;),<br>       (&#39;Andy&#39;, &#39;Hollands&#39;, &#39;Australia&#39;),<br>       (&#39;Ravi&#39;, &#39;Vadantam&#39;, &#39;India&#39;),<br>       (&#39;Rajiv&#39;, &#39;Perera&#39;, &#39;Sri Lanka&#39;);<br></code></pre></td></tr></table></figure>

<p>或者可以明确地写出 id列，如果你想插入特定的 id:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">mysql&gt; insert ignore into customers<br>       (id, first_name, last_name, country)<br>       values<br>       (1, &#39;Mike&#39;, &#39;Galler&#39;, &#39;USA&#39;),<br>       (2, &#39;Andy&#39;, &#39;Hollands&#39;, &#39;Australia&#39;),<br>       (3, &#39;Ravi&#39;, &#39;Vadantam&#39;, &#39;India&#39;),<br>       (4, &#39;Rajiv&#39;, &#39;Perera&#39;, &#39;Sri Lanka&#39;);<br></code></pre></td></tr></table></figure>

<p>IGNORE:如果该行已经存在，并给出了 IGNORE子句，则新数据将被忽略， INSERT 语句仍然会执行成功，同时生成一个警告和重复数据的数目。 反之，如果未给出 IGNORE 子句，则 INSERT 语句会生成一条错误信息 。 行的唯一性由主键标识。</p>
<h4 id="UPDATE-语句用于修改表中的现有记录"><a href="#UPDATE-语句用于修改表中的现有记录" class="headerlink" title="UPDATE 语句用于修改表中的现有记录"></a>UPDATE 语句用于修改表中的现有记录</h4><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">update customer set first_name&#x3D;&#39;Rajiv&#39;, country&#x3D;&#39;UK&#39; where id&#x3D;4;<br></code></pre></td></tr></table></figure>

<p>WHERE : 这是用于过滤的子句 。 在 WHERE 子句后指定的任何条件都会用于过滤，被筛选出来的行都会被更新 。</p>
<h4 id="DELETE-语句用于删除表中记录"><a href="#DELETE-语句用于删除表中记录" class="headerlink" title="DELETE 语句用于删除表中记录"></a>DELETE 语句用于删除表中记录</h4><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">delete from customers where id&#x3D;5 and first_name&#x3D;&#39;Mike&#39;;<br></code></pre></td></tr></table></figure>

<h4 id="REPLACE-、INSERT-、ON-DUPLICATE-KEY-UPDATE"><a href="#REPLACE-、INSERT-、ON-DUPLICATE-KEY-UPDATE" class="headerlink" title="REPLACE 、INSERT 、ON DUPLICATE KEY UPDATE"></a>REPLACE 、INSERT 、ON DUPLICATE KEY UPDATE</h4><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">replace into customers values (1, &#39;Mike&#39;, &#39;Galler&#39;, &#39;America&#39;);<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">insert into payments values (&#39;Mike Galler&#39;, 200) on duplicate key update payment&#x3D;payment+values(payment);<br></code></pre></td></tr></table></figure>

<p>在很多情况下，我们需要处理重复项 。行的唯一性由主键标识 。如果行已经存在，则 REPLACE 会简单地删除行并插入新行;如果行不存在，则 REPLACE 等同于 INSERT。</p>
<p>如果你想在行已经存在的情况下处理重复项，则需要使用 ON DUPLICATE KEY UPDATE。 如果指定了 ON DUPLICATE KEY UPDATE 选项，并且 INSERT 语句在 PRIMARY KEY中引发了重复值， 则MySQL会用新值更新已有行。</p>
<p>区别：</p>
<p>（1）在没有主键或者唯一索引重复时，replace与insert .. on deplicate udpate相同。</p>
<p>（2）在主键或者唯一索引重复时，<strong>replace是delete老记录，而录入新的记录，所以原有的所有记录会被清除，这个时候，如果replace语句的字段不全的话，有些原有的比如c字段的值会被自动填充为默认值。</strong>而insert .. duplicate update则只执行update标记之后的sql，从表象上来看相当于一个简单的update语句。它保留了所有字段的旧值，只更新update后面的语句，而replace没有保留旧值，直接删除再insert新值。<br>从底层执行效率上来讲，replace要比insert .. on duplicate update效率要高，但是在写replace的时候，字段要写全，防止老的字段数据被删除。</p>
<h4 id="TRUNCATING-TABLE"><a href="#TRUNCATING-TABLE" class="headerlink" title="TRUNCATING TABLE"></a>TRUNCATING TABLE</h4><p>删除整个表需要很长时间，因为 MySQL 需要逐行执行操作。 删除表的所有行(保留 表结构)的最快方法是使用TRUNCATE TABLE语句。</p>
<p>TRUNCATING TABLE 是 MySQL 中的 DDL 操作，也就是说一旦数据被清空 ，就不能被回滚。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">truncate table test1;<br></code></pre></td></tr></table></figure>

<h3 id="加载示例数据"><a href="#加载示例数据" class="headerlink" title="加载示例数据"></a>加载示例数据</h3><h4 id="下载压缩文件"><a href="#下载压缩文件" class="headerlink" title="下载压缩文件"></a>下载压缩文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">wget <span class="hljs-string">'https://codeload.github.com/datacharmer/test_db/zip/master'</span> -O master.zip<br></code></pre></td></tr></table></figure>

<h4 id="解斥缩文件"><a href="#解斥缩文件" class="headerlink" title="解斥缩文件"></a>解斥缩文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">unzip master.zip<br></code></pre></td></tr></table></figure>

<h4 id="加载数据"><a href="#加载数据" class="headerlink" title="加载数据"></a>加载数据</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> test_db-master<br></code></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">mysql -u root -p &lt; employees.sql<br></code></pre></td></tr></table></figure>

<h4 id="验证数据"><a href="#验证数据" class="headerlink" title="验证数据"></a>验证数据</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">mysql -u root -p employees -A<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">mysql&gt; show tables;<br>+----------------------+<br>| Tables_in_employees  |<br>+----------------------+<br>| current_dept_emp     |<br>| departments          |<br>| dept_emp             |<br>| dept_emp_latest_date |<br>| dept_manager         |<br>| employees            |<br>| salaries             |<br>| titles               |<br>+----------------------+<br>8 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs msyql">mysql&gt; desc employees\G<br>*************************** 1. row ***************************<br>  Field: emp_no<br>   Type: int(11)<br>   Null: NO<br>    Key: PRI<br>Default: NULL<br>  Extra:<br>*************************** 2. row ***************************<br>  Field: birth_date<br>   Type: date<br>   Null: NO<br>    Key:<br>Default: NULL<br>  Extra:<br>*************************** 3. row ***************************<br>  Field: first_name<br>   Type: varchar(14)<br>   Null: NO<br>    Key:<br>Default: NULL<br>  Extra:<br>*************************** 4. row ***************************<br>  Field: last_name<br>   Type: varchar(16)<br>   Null: NO<br>    Key:<br>Default: NULL<br>  Extra:<br>*************************** 5. row ***************************<br>  Field: gender<br>   Type: enum(&#39;M&#39;,&#39;F&#39;)<br>   Null: NO<br>    Key:<br>Default: NULL<br>  Extra:<br>*************************** 6. row ***************************<br>  Field: hire_date<br>   Type: date<br>   Null: NO<br>    Key:<br>Default: NULL<br>  Extra:<br>6 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure>

<h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><h4 id="查询所有列"><a href="#查询所有列" class="headerlink" title="查询所有列"></a>查询所有列</h4><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select * from departments;<br></code></pre></td></tr></table></figure>

<h4 id="选择列"><a href="#选择列" class="headerlink" title="选择列"></a>选择列</h4><p>选择 dept_manager 的 emp_no 和 dept_no 列：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select emp_no,dept_no from dept_manager;<br></code></pre></td></tr></table></figure>

<h4 id="计数"><a href="#计数" class="headerlink" title="计数"></a>计数</h4><p>从 employees表中查找员工的数量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select count(*) from employees;<br></code></pre></td></tr></table></figure>

<h4 id="条件过滤"><a href="#条件过滤" class="headerlink" title="条件过滤"></a>条件过滤</h4><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select emp_no from employees where first_name&#x3D;&#39;Georgi&#39; and last_name&#x3D;&#39;Facello&#39;;<br></code></pre></td></tr></table></figure>

<h4 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h4><ul>
<li><p>IN: 检查一个值是存在一组值中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select count(*) from employees where last_name in (&#39;Christ&#39;, &#39;Lamba&#39;, &#39;Baba&#39;);<br></code></pre></td></tr></table></figure>
</li>
<li><p>BETWEEN …AND:检查一个值是否在一个范围内</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select count(*) from employees where hire_date between &#39;1986-12-01&#39; and &#39;1986-12-31&#39;;<br></code></pre></td></tr></table></figure>
</li>
<li><p>NOT 你可以简单地用 NOT 运算符来否定结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select count(*) from employees where hire_date not between &#39;1986-12-01&#39; and &#39;1986-12-31&#39;;<br></code></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="简单模式匹配"><a href="#简单模式匹配" class="headerlink" title="简单模式匹配"></a>简单模式匹配</h4><p>可以使用 LIKE 运算符来实现简单模式匹配。 使用下画线( _ )来精准匹配一个字符，使用( % ) 来匹配任意数量的字符 。</p>
<ul>
<li><p>找出名字以 Christ开头的所有员工的人数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select count(*) from employees where first_name like &#39;christ%&#39;;<br></code></pre></td></tr></table></figure>
</li>
<li><p>找出名字以 Christ开头并以 ed结尾的所有员工的人数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select count(*) from employees where first_name like &#39;christ%ed&#39;;<br></code></pre></td></tr></table></figure>
</li>
<li><p>找出名字中包含 sri的所有员工的人数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select count(*) from employees where first_name like &#39;%sri%&#39;;<br></code></pre></td></tr></table></figure>
</li>
<li><p>找到名字以 er 结尾的所有员工的人数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select count(*) from employees where first_name like &#39;%er&#39;;<br></code></pre></td></tr></table></figure>
</li>
<li><p>找出名字以任意两个字符开头、后面跟随 ka、再后面跟随任意数量字符的所有员工的人数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select count(*) from employees where first_name like &#39;__ka%&#39;;<br></code></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p>你可以利用 RLIKE 或 REGEXP 运算符在 WHERE 子句中使用正则表达式</p>
<ul>
<li><p>找出名字以 Christ开头的所有员工的人数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select count(*) from employees where first_name rlike &#39;^christ&#39;;<br></code></pre></td></tr></table></figure>
</li>
<li><p>找出姓氏以 ba结尾的所有员工的人数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select count(*) from employees where last_name regexp &#39;ba$&#39;;<br></code></pre></td></tr></table></figure>
</li>
<li><p>查找姓氏不包含元音 (a、 e、 i、 o和u)的所有员工的人数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select count(*) from employees where last_name not regexp &#39;[aeiou]&#39;;<br></code></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="限定结果"><a href="#限定结果" class="headerlink" title="限定结果"></a>限定结果</h4><p>查询hire date在1986年之前的任何10名员工的姓名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select first_name, last_name from employees where hire_date &lt; &#39;1986-01-01&#39; limit 10;<br></code></pre></td></tr></table></figure>

<h4 id="使用表别名"><a href="#使用表别名" class="headerlink" title="使用表别名"></a>使用表别名</h4><p>使用自别名来更改 COUNT (*)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">mysql&gt; select count(*) as count from employees where hire_date between &#39;1986-12-01&#39; and &#39;1986-12-31&#39;;<br>+-------+<br>| count |<br>+-------+<br>|  3081 |<br>+-------+<br>1 row in set (0.09 sec)<br></code></pre></td></tr></table></figure>

<h3 id="对结果排序"><a href="#对结果排序" class="headerlink" title="对结果排序"></a>对结果排序</h3><p>查找薪水最高的前 5名员工的员工编号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select emp_no, salary from salaries order by salary desc limit 5;<br></code></pre></td></tr></table></figure>

<p>你可以在 SELECT 语句中提及列的位置，而不是指定列名称</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select emp_no, salary from salaries order by 2 desc limit 5;<br></code></pre></td></tr></table></figure>

<h3 id="对结果分组-聚合函数"><a href="#对结果分组-聚合函数" class="headerlink" title="对结果分组(聚合函数)"></a>对结果分组(聚合函数)</h3><h4 id="COUNT"><a href="#COUNT" class="headerlink" title="COUNT"></a>COUNT</h4><ul>
<li><p>分别找出男性和女性员工的人数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select gender, count(*) as count from employees group by gender;<br></code></pre></td></tr></table></figure>
</li>
<li><p>如果你希望查找员工名字中最常见的10个名字，可以使用 GROUP BY first_name 对所有名字分组，然后使用COUNT(first_name)在各组内计数，最后使用ORDER BY计数对结果进行排序 并将返回结果行数限制为前 10行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select first_name,count(first_name) as count from employees group by first_name order by count desc limit 10;<br></code></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="SUM"><a href="#SUM" class="headerlink" title="SUM"></a>SUM</h4><p>查找每年给予员工的薪水总额并按薪水高低对结果进行排序。 YEAR ()函数将返回给定日期所在的年份</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select year(from_date) as date, sum(salary) as sum from salaries group by date order by sum desc;<br></code></pre></td></tr></table></figure>

<h4 id="AVERAGE"><a href="#AVERAGE" class="headerlink" title="AVERAGE"></a>AVERAGE</h4><p>查找平均工资最高的10名员工</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select emp_no, avg(salary) as avg from salaries group by emp_no order by avg desc limit 10;<br></code></pre></td></tr></table></figure>

<h4 id="DISTINCT"><a href="#DISTINCT" class="headerlink" title="DISTINCT"></a>DISTINCT</h4><p>可以使用 DISTINCT 子句过滤出表中的不同条目</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select distinct title from titles;<br></code></pre></td></tr></table></figure>

<h4 id="使用-HAVING-过滤"><a href="#使用-HAVING-过滤" class="headerlink" title="使用 HAVING 过滤"></a>使用 HAVING 过滤</h4><p>可以通过添加HAVING子句来过滤GROUP BY子句的结果。 例如，找到平均工资超过 140,000美元的员工</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select emp_no,avg(salary) as avg from salaries group by emp_no having avg &gt; 140000 order by avg desc;<br></code></pre></td></tr></table></figure>

<h3 id="查询数据并保存到文件和表中"><a href="#查询数据并保存到文件和表中" class="headerlink" title="查询数据并保存到文件和表中"></a>查询数据并保存到文件和表中</h3><p>我们可以使用 SELECT INTO OUTFILE 语句将输出保存到文件中。</p>
<p>可以指定列和行分隔符，然后可以将数据导入其他数据平台 。</p>
<h4 id="另存为文件"><a href="#另存为文件" class="headerlink" title="另存为文件"></a>另存为文件</h4><ul>
<li>要将输出结果保存到文件中，你需要拥有 FILE权限</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">create user user_to_file identified by &#39;123&#39;;<br>grant select on employees.* to user_to_file;<br>grant file on *.* to user_to_file;<br></code></pre></td></tr></table></figure>

<ul>
<li>在Ubuntu系统中， 默认情况下， MySQL不允许写人文件。 你应该在配置文件中 设置secure_file_priv并重新启动MySQL，配置方法如下</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在 my.cnf配置文件中添加如下信息 /usr/local/mysql/support-files/my.cnf</span><br>[mysqld]<br>secure-file-priv=<span class="hljs-string">"/tmp"</span><br></code></pre></td></tr></table></figure>

<p>​        如果没有配置文件 my.cnf 需手动创建</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo vim /etc/my.cnf<br></code></pre></td></tr></table></figure>

<p>​        然后在文件中添加如下信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[client]<br>default-character-set=utf8<br>[mysqld]<br>character-set-server=utf8<br><br><span class="hljs-comment">#sql_mode='NO_AUTO_VALUE_ON_ZERO,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION,PIPES_AS_CONCAT,ANSI_QUOTES'</span><br><br>sql_mode=<span class="hljs-string">'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION'</span><br><br>[mysql]<br>default-character-set=utf8<br></code></pre></td></tr></table></figure>

<p>​        最后重启mysql服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo /usr/<span class="hljs-built_in">local</span>/mysql/support-files/mysql.server restart<br></code></pre></td></tr></table></figure>

<p>​        进入mysql查看配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">mysql&gt; show variables like &#39;%secure%&#39;;<br>+--------------------------+---------------+<br>| Variable_name            | Value         |<br>+--------------------------+---------------+<br>| require_secure_transport | OFF           |<br>| secure_file_priv         | &#x2F;private&#x2F;tmp&#x2F; |<br>+--------------------------+---------------+<br>2 rows in set (0.01 sec)<br></code></pre></td></tr></table></figure>

<p>以下语句会将输出结果保存为 csv 格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select first_name, last_name into outfile &#39;&#x2F;tmp&#x2F;result.csv&#39; fields terminated by &#39;,&#39; optionally enclosed by &#39;&quot;&#39; lines terminated by  &#39;\n&#39; from employees where hire_date&lt;&#39;1986-01-01&#39; limit 10;<br></code></pre></td></tr></table></figure>

<h4 id="另存为表"><a href="#另存为表" class="headerlink" title="另存为表"></a>另存为表</h4><p>我们也可以将 SELECT 语句的结果保存到表中 。 即使表不存在， 也可以使用 CREATE 和 SELECT 来创建表并加载数据 。 如果表己存在，则可以使用 INSERT 和 SELECT 加载数据。</p>
<p>可以将标题保存到新的 titles_only 表中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">create table titles_only as select distinct title from titles;<br></code></pre></td></tr></table></figure>

<p>如果表已经存在，则可以使用 INSERT INTO SELECT 语句</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">insert into titles_only select distinct title from titles;<br></code></pre></td></tr></table></figure>

<h3 id="将数据加载到表中"><a href="#将数据加载到表中" class="headerlink" title="将数据加载到表中"></a>将数据加载到表中</h3><p>创建一个表来保存数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">mysql&gt; create table emplyee_names (<br>       first_name varchar(14) not null,<br>       last_name varchar(16) not null<br>       ) engine&#x3D;innodb;<br></code></pre></td></tr></table></figure>

<p>确保文件存在</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo ls -lhtr /tmp/result.csv<br></code></pre></td></tr></table></figure>

<p>使用 LOAD DATA INFILE 语句加载数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">mysql&gt; load data infile &#39;&#x2F;tmp&#x2F;result.csv&#39; into table emplyee_names<br>       fields terminated by &#39;,&#39;<br>       optionally enclosed by &#39;&quot;&#39;<br>       lines terminated by &#39;\n&#39;;<br></code></pre></td></tr></table></figure>

<p>该文件可以以完整路径名的形式给出，以指定其确切位置 。 如果以相对路径名的形式给出，则相对路径名将被解析为相对于客户机程序启动的目录 。</p>
<ul>
<li>如果文件开头包含一些你想忽略的行，可以用 IGNORE n Lines 指定</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">mysql&gt; load data infile &#39;&#x2F;tmp&#x2F;result.csv&#39; into table emplyee_names<br>       fields terminated by &#39;,&#39;<br>       optionally enclosed by &#39;&quot;&#39;<br>       lines terminated by &#39;\n&#39;<br>       ignore 1 lines;<br></code></pre></td></tr></table></figure>

<ul>
<li>可以用 REPLACE或者 IGNORE来处理重复的行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">mysql&gt; load data infile &#39;&#x2F;tmp&#x2F;result.csv&#39; replace into table emplyee_names<br>       fields terminated by &#39;,&#39;<br>       optionally enclosed by &#39;&quot;&#39;<br>       lines terminated by &#39;\n&#39;<br>       ignore 1 lines;<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">mysql&gt; load data infile &#39;&#x2F;tmp&#x2F;result.csv&#39; ignore into table emplyee_names<br>       fields terminated by &#39;,&#39;<br>       optionally enclosed by &#39;&quot;&#39;<br>       lines terminated by &#39;\n&#39;<br>       ignore 1 lines;<br></code></pre></td></tr></table></figure>

<h3 id="表关联"><a href="#表关联" class="headerlink" title="表关联"></a>表关联</h3><p>假设你想用 emp_no: 110022 找到员工的姓名和部门号码:</p>
<ul>
<li>部门编号和名称存储在 departments表中</li>
<li>员工编号和其他详细信息(例如 first_name 和 last_name )存储在 employees 表中 </li>
<li>员工和部门的映射关系存储在 dept_manager表中</li>
</ul>
<p>如果你不想使用 JOIN，可以这样做</p>
<ol>
<li><p>从 employee 表中查找 emp_no 为 110022 的员工姓名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select emp.emp_no, emp.first_name, emp.last_name from employees as emp where emp.emp_no&#x3D;110022;<br></code></pre></td></tr></table></figure>
</li>
<li><p>从 dept_manager 表中查找部门编号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select dept_no from dept_manager where emp_no&#x3D;&#39;110022&#39;;<br></code></pre></td></tr></table></figure>
</li>
<li><p>从 departments 表中查找部门名称</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select dept_name from departments dept where dept.dept_no&#x3D;&#39;d001&#39;;<br></code></pre></td></tr></table></figure>

</li>
</ol>
<h4 id="使用join操作"><a href="#使用join操作" class="headerlink" title="使用join操作"></a>使用join操作</h4><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">mysql&gt; select emp.emp_no, emp.first_name, emp.last_name, dept.dept_name from employees emp<br>       join dept_manager dept_mgr<br>           on emp.emp_no&#x3D;dept_mgr.emp_no and emp.emp_no&#x3D;110022<br>       join departments dept<br>           on dept_mgr.dept_no&#x3D;dept.dept_no;<br></code></pre></td></tr></table></figure>

<p>假设想了解每个部门的平均工资，你可以使用 AVG 函数并按照dept_no进行分组。要找出部门名称，可以将结果与departments 表通过dept_no 列进行关联</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select dept_name, avg(salary) as avg_salary<br>from<br>    salaries<br>join dept_emp<br>    on salaries.emp_no&#x3D;dept_emp.emp_no<br>join departments as dept<br>    on dept_emp.dept_no&#x3D;dept.dept_no<br>group by<br>    dept_emp.dept_no<br>order by <br>	avg_salary <br>desc<br>;<br></code></pre></td></tr></table></figure>

<h4 id="通过与自己关联来识别重复项"><a href="#通过与自己关联来识别重复项" class="headerlink" title="通过与自己关联来识别重复项"></a>通过与自己关联来识别重复项</h4><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select empl1.*<br>from<br>    employees as empl1<br>join employees empl2<br>    on empl1.first_name&#x3D;empl2.first_name<br>    and empl1.last_name&#x3D;empl2.last_name<br>    and empl1.gender&#x3D;empl2.gender<br>    and empl1.hire_date&#x3D;empl2.hire_date<br>    and empl1.emp_no!&#x3D;empl2.emp_no<br>order by<br>    first_name, last_name;<br></code></pre></td></tr></table></figure>

<h4 id="使用子查询"><a href="#使用子查询" class="headerlink" title="使用子查询"></a>使用子查询</h4><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select<br>    first_name, last_name<br>from <br>    employees<br>where<br>    emp_no<br>in<br>    (<br>        select <br>            emp_no <br>        from <br>            titles<br>        where<br>            title&#x3D;&quot;Senior Engineer&quot; and from_date&#x3D;&quot;1986-06-26&quot;<br>    )<br>;<br></code></pre></td></tr></table></figure>

<p>找到工资最高的员工</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select<br>    emp_no<br>from <br>    salaries<br>where <br>    salary&#x3D;(<br>        select <br>            max(salary) <br>        from <br>            salaries<br>    )<br>;<br></code></pre></td></tr></table></figure>

<h4 id="查找表之间不匹配的行"><a href="#查找表之间不匹配的行" class="headerlink" title="查找表之间不匹配的行"></a>查找表之间不匹配的行</h4><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">create table employees_list1 as select * from employees where first_name like &#39;aa%&#39;;<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">create table employees_list2 as select * from employees where emp_no between 400000 and 500000 and gender&#x3D;&#39;F&#39;;<br></code></pre></td></tr></table></figure>

<p>我们已经知道如何找到两个列表中都存在的员工了 ，代码如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select<br>    l1.*<br>from <br>    employees_list1 l1<br>join employees_list2 l2<br>    on l1.emp_no&#x3D;l2.emp_no<br>;<br></code></pre></td></tr></table></figure>

<p>现在要找出存在于 employees_listl 但不存在于 employees_list2 中的员工</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select <br>    *<br>from <br>    employees_list1 l1<br>where <br>    l1.emp_no <br>not in <br>    (<br>        select<br>            l2.emp_no<br>        from <br>            employees_list2 l2<br>    )<br>;<br></code></pre></td></tr></table></figure>

<p>或者也可以使用 OUTER JOIN</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select<br>    l1.*<br>from <br>    employees_list1 l1<br>left outer join employees_list2 l2<br>    on l1.emp_no&#x3D;l2.emp_no<br>where<br>    l2.emp_no is null<br>;<br></code></pre></td></tr></table></figure>

<p>outer join为第二个表中所有与第一个表中的行不匹配的行创建 NULL列。 如果使 用 RIGHT JOIN，则为第一个表中所有与第二个表中的行不匹配的行创建 NULL 列。</p>
<p>你也可以使用 OUTER JOIN 来查找民自己的行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select<br>    l1.*<br>from <br>    employees_list1 l1<br>left outer join employees_list2 l2<br>    on l1.emp_no&#x3D;l2.emp_no<br>where <br>    l2.emp_no is not null<br>;<br></code></pre></td></tr></table></figure>

<h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><p>存储过程处理的事一组SQL语句，且没有返回值</p>
<h4 id="如何操作"><a href="#如何操作" class="headerlink" title="如何操作"></a>如何操作</h4><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">&#x2F;* 删除已存在的存储过程 *&#x2F;<br>drop procedure if exists create_employee;<br>&#x2F;* 分隔符修改为 $$ *&#x2F;<br>delimiter $$<br><br>&#x2F;* IN 指定作为参数的变量，INOUT指定输出的变量 *&#x2F;<br>create procedure create_employee (<br>	Out new_emp_no INT,<br>	IN first_name varchar(20),<br>	IN last_name varchar(20),<br>	IN gender enum(&#39;M&#39;, &#39;F&#39;),<br>	IN birth_date date,<br>	IN emp_dept_name varchar(40),<br>	IN title varchar(50)<br>)<br>BEGIN<br>	&#x2F;* 为emp_dept_no 和 salary 声明变量 *&#x2F;<br>		declare emp_dept_no char(4);<br>		declare salary int default 60000;<br><br>	&#x2F;* 查询employees表中emp_no的最大值，赋值给变量 new_emp_no *&#x2F;<br>	select max(emp_no) into new_emp_no from employees;<br><br>	&#x2F;* 增加 new_emp_no *&#x2F;<br>	set new_emp_no &#x3D; new_emp_no + 1;<br><br>	&#x2F;* 插入数据到 employees 表中 *&#x2F;<br>	&#x2F;* curdate() 函数给出当前日期 *&#x2F;<br>	insert into employees values(new_emp_no, birth_date, first_name, last_name, gender, curdate());<br><br>	&#x2F;* 找到 dept_name对应的dept_no *&#x2F;<br>	select emp_dept_name;<br><br>	select dept_no into emp_dept_no from departments where dept_name&#x3D;emp_dept_name;<br><br>	select emp_dept_no;<br><br>	&#x2F;* 插入dept_emp *&#x2F;<br>	insert into dept_emp values(new_emp_no, emp_dept_no, curdate(), &#39;9999-01-01&#39;);<br><br>	&#x2F;* 插入 title *&#x2F;<br>	insert into titles values(new_emp_no, title, curdate(), &#39;9999-01-01&#39;);<br>	<br>	&#x2F;* 以title为条件查询的薪水 *&#x2F;<br>	if title &#x3D; &#39;Staff&#39;<br>		then set salary &#x3D; 100000;<br>	elseif title &#x3D; &#39;Senior Staff&#39;<br>		then set salary &#x3D; 120000;<br><br>	end if;<br><br>	&#x2F;* 插入 salaries *&#x2F;<br>	insert into salaries values(new_emp_no, salary, curdate(), &#39;9999-01-01&#39;);<br><br>END<br>$$<br><br>&#x2F;* 将分隔符改回 ; *&#x2F;<br>DELIMITER ;<br></code></pre></td></tr></table></figure>

<ul>
<li><p>在mysql命令行终端执行代码</p>
</li>
<li><p>保存为文件，使用命令 mysql -u root -p employees &lt; stored_procedure.sql</p>
</li>
<li><p>使用 source 从文件加载 mysql&gt; source stored_procedure.sql</p>
</li>
</ul>
<p>要使用存储过程，需要将 execute 权限授予 emp_read_only 用户：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">grant execute on employees.* to &#39;emp_read_only&#39;@&#39;%&#39;;<br></code></pre></td></tr></table></figure>

<p>使用CALL stored_procedure(OUT 变量， IN值) 语句和例程的名称调用存储过程。</p>
<p>使用emp_read_only 账户链接到MySQL</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">mysql -u emp_read_only -p123 employees -A<br></code></pre></td></tr></table></figure>

<p>把想要传递的输出值存储在@new_emp_no变量中的emp_no的值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select @new_emp_no;<br></code></pre></td></tr></table></figure>

<p>检查是否在employees表、salaries表和tiltes表创建了行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from employees where emp_no&#x3D;500001;<br>+--------+------------+------------+-----------+--------+------------+<br>| emp_no | birth_date | first_name | last_name | gender | hire_date  |<br>+--------+------------+------------+-----------+--------+------------+<br>| 500001 | 1984-06-19 | John       | Smith     | M      | 2020-07-15 |<br>+--------+------------+------------+-----------+--------+------------+<br>1 row in set (0.01 sec)<br><br>mysql&gt; select * from salaries where emp_no&#x3D;500001;<br>+--------+--------+------------+------------+<br>| emp_no | salary | from_date  | to_date    |<br>+--------+--------+------------+------------+<br>| 500001 | 100000 | 2020-07-15 | 9999-01-01 |<br>+--------+--------+------------+------------+<br>1 row in set (0.01 sec)<br><br>mysql&gt; select * from titles where emp_no&#x3D;500001;<br>+--------+-------+------------+------------+<br>| emp_no | title | from_date  | to_date    |<br>+--------+-------+------------+------------+<br>| 500001 | Staff | 2020-07-15 | 9999-01-01 |<br>+--------+-------+------------+------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure>



<h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3><p>触发器用于在触发器事件之前或之后激活某些内容。</p>
<h4 id="如何操作-1"><a href="#如何操作-1" class="headerlink" title="如何操作"></a>如何操作</h4><p>例如：假设你希望在将薪水插入 salaries 表之前对其进行四舍五入 。 NEW 指的是正在插入的新值 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">drop trigger if exists salary_round;<br>delimiter $$<br>create trigger salary_round before insert on salaries<br>for each row<br>BEGIN<br>	set NEW.salary&#x3D;ROUND(NEW.salary);<br>END<br>$$<br>delimiter ;<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">source &#x2F;tmp&#x2F;before_insert_trigger.sql<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">mysql&gt; insert into salaries values(10002, 100000.79, curdate(), &#39;9999-01-01&#39;);<br>Query OK, 1 row affected (0.01 sec)<br>mysql&gt; select * from salaries where emp_no&#x3D;10002 and from_date&#x3D;curdate();<br>+--------+--------+------------+------------+<br>| emp_no | salary | from_date  | to_date    |<br>+--------+--------+------------+------------+<br>|  10002 | 100001 | 2020-07-15 | 9999-01-01 |<br>+--------+--------+------------+------------+<br>1 row in set (0.01 sec)<br></code></pre></td></tr></table></figure>

<p>假设你要记录 salaries 表中新增的薪水记录：</p>
<p>创建审计表：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">create table salary_audit (emp_no int, user varchar(50), date_modified date);<br></code></pre></td></tr></table></figure>

<p>请注意， 以下触发器 PRECEDES salary_round 指定在 salary_round 触发器之前执行:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">delimiter $$<br>create trigger salary_audit<br>BEFORE INSERT<br>	on salaries for each row precedes salary_round<br>BEGIN<br>	insert into salary_audit value(NEW.emp_no, USER(), curdate());<br>END;$$<br>delimiter ;<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">mysql&gt; insert into salaries values(10003, 100000.79, curdate(), &#39;9999-01-01&#39;);<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; select * from salary_audit where emp_no&#x3D;10003;<br>+--------+----------------+---------------+<br>| emp_no | user           | date_modified |<br>+--------+----------------+---------------+<br>|  10003 | root@localhost | 2020-07-15    |<br>+--------+----------------+---------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure>

<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><p>视图是一个基于 SQL语句的结果集的虚拟表。我们可以使用视图来限制用户对特定行的访问 。</p>
<h4 id="如何操作-2"><a href="#如何操作-2" class="headerlink" title="如何操作"></a>如何操作</h4><p>创建只对salaries表的emp_no 和 salary 列，且from_date在 ‘2002-01-01’ 之后的数据的访问权限.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">create ALGORITHM&#x3D;UNDEFINED<br>DEFINER&#x3D;&#96;root&#96;@&#96;localhost&#96;<br>SQL security DEFINER view salary_view<br>as<br>select emp_no, salary from salaries where from_date &gt; &#39;2002-01-01&#39;;<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">mysql&gt; select emp_no, avg(salary) as avg from salary_view group by emp_no order by avg desc limit 5;<br>+--------+-------------+<br>| emp_no | avg         |<br>+--------+-------------+<br>|  43624 | 158220.0000 |<br>|  47978 | 155709.0000 |<br>| 253939 | 155513.0000 |<br>| 109334 | 155190.0000 |<br>|  80823 | 154459.0000 |<br>+--------+-------------+<br>5 rows in set (1.54 sec)<br></code></pre></td></tr></table></figure>

<p>列出所有视图</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">show full tables where table_type like &#39;VIEW&#39;;<br></code></pre></td></tr></table></figure>

<p>检查视图的定义</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">show create view salary_view\G<br></code></pre></td></tr></table></figure>

<p>我们可以更新没有子查询、 JOINS 、 GROUP BY 子句、 union 等的简单视阁 。 如果基础表有默认值， 那么 salary_view 就是一个可以被更新或插入的简单视图 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">mysql&gt; update salary_view set salary&#x3D;100000 where emp_no&#x3D;10001;<br>Query OK, 1 row affected (0.01 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">mysql&gt; insert into salary_view values(10001, 100001);<br>ERROR 1423 (HY000): Field of view &#39;employees.salary_view&#39; underlying table doesn&#39;t have a default value<br></code></pre></td></tr></table></figure>

<p>如果该表有 一个默认值，即使它不符合视图中的过滤器条件，你也可以向其中插入一行 。 为了避免这种情况，为了只允许插入符合视图条件的行，必须在定义里面提供 WITH CHECK OPTION。</p>
<p>VIEW算法:</p>
<ul>
<li>MERGE: MySQL 将输入查询和视图定义合并到一个查询中，然后执行组合查询。 仅允许在简单视图上使用 MERGE 算法 。</li>
<li>TEMPTABLE: MySQL将结果存储到临时表中，然后对这个临时表执行输入查询。</li>
<li>UNDEFINED: MySQL 自动选择MERGE 或 TEMPTABLE 算法。MySQL 把MERGE 算法作为首选的 TEMPTABLE 算法， 因为 MERGE 算法效率更高。</li>
</ul>
<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>就像 Linux 服务器上的 cron 一样， MySQL 的 EVENTS 是用来处理计划任务的 。MySQL 使用称为事件调度线程的特妹线程来执行所有预定事件。 默认情况下， 事件调度线程是未 启用(版本低于 8.0.3 )的状态，如果要启用它，执行以下命令 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">mysql&gt; set global event_scheduler &#x3D; ON;<br>Query OK, 0 rows affected (0.01 sec)<br></code></pre></td></tr></table></figure>

<h4 id="如何操作-3"><a href="#如何操作-3" class="headerlink" title="如何操作"></a>如何操作</h4><p>假设你不再需要保留一个月之前的薪水审计记录， 则可以设定一个每日运行的事件，用它从 salary audit 表中删除一个月之前的记录。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">drop EVENT if exists purge_salary_audit;<br>delimiter $$<br>create EVENT if not exists purge_salary_audit<br>on SCHEDULE<br>	every 1 week<br>	starts current_date<br>	DO BEGIN<br>		delete from salary_audit where date_modified &lt; date_add(curdate(), interval - 7 day);<br>	END;$$<br>delimiter ;<br></code></pre></td></tr></table></figure>

<p>检查事件:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">show EVENTS\G<br></code></pre></td></tr></table></figure>

<p>检查事件定义：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">show create EVENT purge_salary_audit\G<br></code></pre></td></tr></table></figure>

<p>禁用/启用事件:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">ALTER EVENT purge_salary_audit DISABLE;<br>ALTER EVENT purge_salary_audit ENABLE;<br></code></pre></td></tr></table></figure>

<h3 id="获取有关数据库和表的信息"><a href="#获取有关数据库和表的信息" class="headerlink" title="获取有关数据库和表的信息"></a>获取有关数据库和表的信息</h3><h4 id="TABLES"><a href="#TABLES" class="headerlink" title="TABLES"></a>TABLES</h4><p>例如，假设你想知道 employees 数据库中的 DATA LENGTH 、 INDEX LENGTH 和DATE FREE，代码如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select <br>	sum(data_length)&#x2F;1024&#x2F;1024 as data_size_mb, <br>	sum(index_length)&#x2F;1024&#x2F;2014 as index_size_mb, <br>	sum(data_free)&#x2F;1024&#x2F;1-24 as data_free_mb <br>from <br>	information_schema.tables <br>where <br>	table_schema&#x3D;&#39;employees&#39;;<br>+--------------+---------------+----------------+<br>| data_size_mb | index_size_mb | data_free_mb   |<br>+--------------+---------------+----------------+<br>| 142.85937500 |    2.82025819 | 20456.00000000 |<br>+--------------+---------------+----------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure>

<h4 id="COLUMNS"><a href="#COLUMNS" class="headerlink" title="COLUMNS"></a>COLUMNS</h4><p>列出每个表的所有列及其定义:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select * from columns where table_name&#x3D;&#39;employees&#39;\G<br></code></pre></td></tr></table></figure>

<h4 id="FILES"><a href="#FILES" class="headerlink" title="FILES"></a>FILES</h4><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select * from files where file_name like &#39;.&#x2F;employees&#x2F;employees.ibd&#39;\G<br></code></pre></td></tr></table></figure>

<h4 id="INNODB-TABLESPACES"><a href="#INNODB-TABLESPACES" class="headerlink" title="INNODB_TABLESPACES"></a>INNODB_TABLESPACES</h4><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select * from innodb_tablespaces where name&#x3D;&#39;employees&#x2F;employees&#39;\G<br></code></pre></td></tr></table></figure>

<h4 id="INNODB-TABLESTATS"><a href="#INNODB-TABLESTATS" class="headerlink" title="INNODB_TABLESTATS"></a>INNODB_TABLESTATS</h4><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select * from innodb_tablestats where name&#x3D;&#39;employees&#x2F;employees&#39;\G<br></code></pre></td></tr></table></figure>

<h4 id="PROCESSLIST"><a href="#PROCESSLIST" class="headerlink" title="PROCESSLIST"></a>PROCESSLIST</h4><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from processlist\G<br>*************************** 1. row ***************************<br>     ID: 4<br>   USER: event_scheduler<br>   HOST: localhost<br>     DB: NULL<br>COMMAND: Daemon<br>   TIME: 3290<br>  STATE: Waiting for next activation<br>   INFO: NULL<br>*************************** 2. row ***************************<br>     ID: 21<br>   USER: root<br>   HOST: localhost<br>     DB: information_schema<br>COMMAND: Query<br>   TIME: 0<br>  STATE: executing<br>   INFO: select * from processlist<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">mysql&gt; show processlist;<br>+----+-----------------+-----------+--------------------+---------+------+-----------------------------+------------------+<br>| Id | User            | Host      | db                 | Command | Time | State                       | Info             |<br>+----+-----------------+-----------+--------------------+---------+------+-----------------------------+------------------+<br>|  4 | event_scheduler | localhost | NULL               | Daemon  | 3337 | Waiting for next activation | NULL             |<br>| 21 | root            | localhost | information_schema | Query   |    0 | starting                    | show processlist |<br>+----+-----------------+-----------+--------------------+---------+------+-----------------------------+------------------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure>





<h2 id="进阶使用"><a href="#进阶使用" class="headerlink" title="进阶使用"></a>进阶使用</h2><h4 id="使用JSON"><a href="#使用JSON" class="headerlink" title="使用JSON"></a>使用JSON</h4><p>使用JSON保存更多的员工信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">create table emp_details(<br>	emp_no int primary key,<br>	details json<br>);<br></code></pre></td></tr></table></figure>

<h5 id="插入JSON"><a href="#插入JSON" class="headerlink" title="插入JSON"></a>插入JSON</h5><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">insert into emp_details(emp_no, details)<br>values (1,<br>	&#39;&#123;<br>		&quot;location&quot;: &quot;IN&quot;,<br>		&quot;phone&quot;: &quot;+86111111111&quot;,<br>		&quot;email&quot;: &quot;kiding@kid.com&quot;,<br>		&quot;address&quot;: &#123;<br>			&quot;line1&quot;: &quot;abc&quot;,<br>			&quot;line2&quot;: &quot;xyz street&quot;,<br>			&quot;city&quot;: &quot;Bangalore&quot;,<br>			&quot;pin&quot;: &quot;560103&quot;<br>		&#125;<br>	&#125;&#39;<br>);<br></code></pre></td></tr></table></figure>

<h5 id="检索JSON"><a href="#检索JSON" class="headerlink" title="检索JSON"></a>检索JSON</h5><p>使用 -&gt; 和 -&gt;&gt; 运算符检索JSON列的字段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">mysql&gt; select emp_no, details-&gt;&#39;$.address.pin&#39; pin from emp_details;<br>+--------+----------+<br>| emp_no | pin      |<br>+--------+----------+<br>|      1 | &quot;560103&quot; |<br>+--------+----------+<br>1 row in set (0.01 sec)<br></code></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">mysql&gt; select emp_no, details-&gt;&gt;&#39;$.address.pin&#39; pin from emp_details;<br>+--------+--------+<br>| emp_no | pin    |<br>+--------+--------+<br>|      1 | 560103 |<br>+--------+--------+<br>1 row in set (0.03 sec)<br></code></pre></td></tr></table></figure>

<h4 id="JSON函数"><a href="#JSON函数" class="headerlink" title="JSON函数"></a>JSON函数</h4><h5 id="优雅预览"><a href="#优雅预览" class="headerlink" title="优雅预览"></a>优雅预览</h5><figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">mysql&gt; select emp_no, JSON_PRETTY(details) from emp_details\G<br>*************************** 1. row ***************************<br>              emp_no: 1<br>JSON_PRETTY(details): &#123;<br>  &quot;email&quot;: &quot;kiding@kid.com&quot;,<br>  &quot;phone&quot;: &quot;+86111111111&quot;,<br>  &quot;address&quot;: &#123;<br>    &quot;pin&quot;: &quot;560103&quot;,<br>    &quot;city&quot;: &quot;Bangalore&quot;,<br>    &quot;line1&quot;: &quot;abc&quot;,<br>    &quot;line2&quot;: &quot;xyz street&quot;<br>  &#125;,<br>  &quot;location&quot;: &quot;IN&quot;<br>&#125;<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure>

<h5 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h5><p>可以在 WHERE 子句中使用 col-&gt;&gt;path 运算符来引用 JSON 的某一列 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select emp_no from emp_details where details-&gt;&gt;&#39;$.address.pin&#39; &#x3D; &quot;560103&quot;;<br></code></pre></td></tr></table></figure>

<p>也可以使用 <strong><em>JSON_CONTAINS</em></strong> 函数查询数据。如果找到了数据，则返回 1，否则返回 0:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select JSON_CONTAINS(details-&gt;&gt;&#39;$.adress.pin&#39;, &#39;560103&#39;) from emp_details;<br></code></pre></td></tr></table></figure>

<p>如何查询一个 key? 假设要检查 address.line1 是否存在:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">mysql&gt; select JSON_CONTAINS(details-&gt;&gt;&#39;$.adress.pin&#39;, &#39;560103&#39;) from emp_details;<br>+---------------------------------------------------+<br>| JSON_CONTAINS(details-&gt;&gt;&#39;$.adress.pin&#39;, &#39;560103&#39;) |<br>+---------------------------------------------------+<br>|                                              NULL |<br>+---------------------------------------------------+<br>1 row in set (0.01 sec)<br></code></pre></td></tr></table></figure>

<p>这里，one表示至少应该存在一个键。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">mysql&gt; select JSON_CONTAINS_PATH(details, &#39;one&#39;, &quot;$.address.line1&quot;) from emp_details;<br>+-------------------------------------------------------+<br>| JSON_CONTAINS_PATH(details, &#39;one&#39;, &quot;$.address.line1&quot;) |<br>+-------------------------------------------------------+<br>|                                                     1 |<br>+-------------------------------------------------------+<br>1 row in set (0.01 sec)<br></code></pre></td></tr></table></figure>

<p>如果要检查 address.line1 和 address. Line5 是否同时存在，可以使用 all，而不是 one:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">mysql&gt; select JSON_CONTAINS_PATH(details, &#39;all&#39;, &#39;$.address.line1&#39;, &#39;$.address.line5&#39;) from emp_details;<br>+--------------------------------------------------------------------------+<br>| JSON_CONTAINS_PATH(details, &#39;all&#39;, &#39;$.address.line1&#39;, &#39;$.address.line5&#39;) |<br>+--------------------------------------------------------------------------+<br>|                                                                        0 |<br>+--------------------------------------------------------------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure>

<h5 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h5><ul>
<li><p>JSON_SET(): 天环现有值并添加不存在的值。</p>
<p>假设要替换员工的pin码，并添加昵称的详细信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">update <br>	emp_details<br>set<br>	details &#x3D; JSON_SET(details, &quot;$.address.pin&quot;, &quot;560100&quot;, &quot;$.nickname&quot;, &quot;kai&quot;)<br>where<br>	emp_no &#x3D; 1;<br></code></pre></td></tr></table></figure>
</li>
<li><p>JSON_INSERT(): 插入值，但不替换现有值。</p>
<p>假设你希望添加新列而不更新现有值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">update<br>	emp_details<br>set <br>	details&#x3D;JSON_INSERT(details, &quot;$.address.pin&quot;, &quot;560132&quot;, &quot;$.address.line4&quot;, &quot;A Wing&quot;)<br>where<br>	emp_no&#x3D;1;<br></code></pre></td></tr></table></figure>
</li>
<li><p>JSON_REPLACE(): 仅替换现有值。</p>
<p>假设只需要替换现有字段，不需要添加新字段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">update <br>	emp_details<br>set <br>	details&#x3D;JSON_REPLACE(details, &quot;$.address.pin&quot;, &quot;560132&quot;, &quot;$.adress.line5&quot;, &quot;Landmark&quot;)<br>where<br>	emp_no&#x3D;1;<br></code></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><p>JSON_REMOVE 能从 JSON文档中删除数据。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">update <br>	emp_details<br>set<br>	details&#x3D;JSON_REMOVE(details, &quot;$.address.line5&quot;)<br>where<br>	emp_no&#x3D;1;<br></code></pre></td></tr></table></figure>

<h5 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h5><ul>
<li><p>JSON_KEYS(): 获取JSON文档中的所有键。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select <br>	JSON_KEYS(details) <br>from <br>	emp_details<br>where<br>	emp_no&#x3D;1;<br></code></pre></td></tr></table></figure>
</li>
<li><p>JSON_LENGTH(): 给出 JSON文档中的元素数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">select <br>	JSON_LENGTH(details) <br>from <br>	emp_details <br>where<br>	emp_no&#x3D;1;<br></code></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="公用表表达式-CTE"><a href="#公用表表达式-CTE" class="headerlink" title="公用表表达式(CTE)"></a>公用表表达式(CTE)</h3><p>MySQL8 支持公用表表达式 ，包括非递归和递归两种 。<br>公用表表达式允许使用命名的临时结果集， 这是通过允许在 SELECT 语句和某些其他语句前面使用 WITH 子句来实现的。</p>
<h4 id="非递归（CTE）"><a href="#非递归（CTE）" class="headerlink" title="非递归（CTE）"></a>非递归（CTE）</h4><p><strong>公用表表达式（CTE）</strong>与派生表类似，但它的声明会放在查询块之前，而不是FROM子句中。</p>
<h5 id="派生表"><a href="#派生表" class="headerlink" title="派生表"></a>派生表</h5><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><h3 id="ACID属性"><a href="#ACID属性" class="headerlink" title="ACID属性"></a>ACID属性</h3><h4 id="原子性（Atomicity）"><a href="#原子性（Atomicity）" class="headerlink" title="原子性（Atomicity）"></a>原子性（Atomicity）</h4><p>所有的SQL语句要么全部成功，要么全部失败，不会存在部分更新。</p>
<h4 id="一致性（Coonsistency）"><a href="#一致性（Coonsistency）" class="headerlink" title="一致性（Coonsistency）"></a>一致性（Coonsistency）</h4><p>事务只能以允许的方式改变受其影响的数据 。</p>
<h4 id="隔离性（Isolation）"><a href="#隔离性（Isolation）" class="headerlink" title="隔离性（Isolation）"></a>隔离性（Isolation）</h4><p>同时发生的事务(并发事务)不应该导致数据库处于不一致的状态中。系统中每个事务都应该像唯一事务一样执行。 任何事务都不应影响其他事务的存在。</p>
<h4 id="持久性（Durability）"><a href="#持久性（Durability）" class="headerlink" title="持久性（Durability）"></a>持久性（Durability）</h4><p>无论数据库或系统是否发生故障，数据都会永久保存在磁盘上，并且不会丢失。</p>
<h3 id="执行事务"><a href="#执行事务" class="headerlink" title="执行事务"></a>执行事务</h3><p>创建操作表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">create database bank;<br>use bank;<br><br>create table account(<br>	account_number varchar(10) primary key,<br>	balance int<br>);<br><br>insert into account values(&#39;A&#39;, 600), (&#39;B&#39;, 400);<br></code></pre></td></tr></table></figure>

<p>启动事务 <code>start TRANSACTION</code> 或者 <code>BEGIN</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">BEGIN<br><br>select <br>	balance INTO @a.bal <br>from <br>	account <br>where <br>	account_number&#x3D;&#39;A&#39;;<br><br>update<br>	account<br>set<br>	balance&#x3D;@a.bal-100 <br>where<br>	account_number&#x3D;&#39;A&#39;;<br><br>select<br>	balance INTO @b.bal<br>from <br>	account<br>where<br>	account_number&#x3D;&#39;B&#39;;<br><br>update<br>	account<br>set<br>	balance&#x3D;@b.bal+100<br>where<br>	account_number&#x3D;&#39;B&#39;;<br><br>COMMIT;<br></code></pre></td></tr></table></figure>

<p>如果遇到错误并希望中止事务， 可以发送 <strong>ROLLBACK</strong> 语句而非 <strong>COMMIT</strong> 语句 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">start TRANSACTION<br>select balance into @a.bal from account where account_number&#x3D;&#39;A&#39;;<br>update account set balance&#x3D;@a.bal-100 where account_number&#x3D;&#39;A&#39;;<br>select balance into @c.bal from account where account_number&#x3D;&#39;C&#39;;<br>show warnings;<br>select @c.bal;<br>rollback;<br></code></pre></td></tr></table></figure>

<p><strong>autocommit</strong></p>
<p>默认情况下，autocommit 的状态是ON，这意味着所有单独的语句一旦被执行就会 被提交，除非该语句在 BEGIN… COMMIT 块中 。 如果 autocommit 的状态为 OFF， 则需要明确发出 COMMIT 语句来提交事务 。 要禁用 autocommit ，请执行 :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">set autocommit&#x3D;0;<br></code></pre></td></tr></table></figure>

<p>DDL 语句，如数据库的 CREATE 或 DROP 语句，以及表或存储例程的 CREATE、DROP或 ALTER 语句，都是无法回滚的 。</p>
<h3 id="使用保存点"><a href="#使用保存点" class="headerlink" title="使用保存点"></a>使用保存点</h3><p>使用保存点可以回滚到事务中的某些点，而且无须中止事务。你可以使用 SAVEPOINT 标识符为 事务设置名称，并使用 ROLLBACK TO 标识语句将事务回滚到指定的保存点而不中止事务。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><code class="hljs mysql">BEGIN;<br>select balance INTO @a.bal from account where account_number&#x3D;&#39;A&#39;;<br>update account set balance&#x3D;@a.bal-100 where account_number&#x3D;&#39;A&#39;;<br>update account set balance&#x3D;balance+100 where account_number&#x3D;&#39;B&#39;;<br>SAVEPOINT transfer_to_b;<br>select balance INTO @a.bal from account where account_number&#x3D;&#39;A&#39;;<br>update account set balance&#x3D;balance+100 where account_number&#x3D;&#39;C&#39;;<br>ROLLBACK TO transfer_to_b;<br>commit;<br></code></pre></td></tr></table></figure>

<h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><p>当两个或多个事务同时发生时，隔离级别定义了一个事务与其他事务在资源或者数据修改方面的隔离程度 。有 4 种类型的隔离级别，要更改隔离级别，需要设置 tx_isolatio口变量，该变量是动态的并具有会话级别的作用范围。</p>
<p>更改隔离级别 ```SET @@ transaction_islocation=’READ-COMMITTED’;``</p>
<h4 id="读取未提交（read-uncommitted）"><a href="#读取未提交（read-uncommitted）" class="headerlink" title="读取未提交（read uncommitted）"></a>读取未提交（read uncommitted）</h4>]]></content>
      <categories>
        <category>技术</category>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>JS逆向学习-*博登陆加密参数</title>
    <url>/2020/06/02/article-8/</url>
    <content><![CDATA[<p>*博登陆加密参数</p>
<a id="more"></a>

<p>aHR0cHM6Ly93d3cud2VpYm8uY29tL2xvZ2luLnBocA==</p>
<h3 id="分析请求"><a href="#分析请求" class="headerlink" title="分析请求"></a>分析请求</h3><p>打开网页进入 Chrome 调试模式下并输入错误的用户名和密码发现有两个login请求</p>
<p><img src="WX20200602-150346.png" srcset="/img/loading.gif" alt=""></p>
<p><img src="WX20200602-150642.png" srcset="/img/loading.gif" alt=""></p>
<p>先对这两个请求进行模拟，分别需要对 <strong><em>su</em></strong> 和 <strong><em>sp</em></strong> 参数进行逆向</p>
<p>全局搜索 <strong><em>”su=“</em></strong> 定位到了下图中标记的位置，且 <strong><em>sp</em></strong> 的加密方式也定位到了</p>
<p><img src="WX20200602-151611.png" srcset="/img/loading.gif" alt=""></p>
<h3 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h3><p>通过上面的分析流程定位到了加密位置，且发现 <strong><em>su</em></strong> 其实是通过base64进行了编码</p>
<p>接下来我们通过断点查看 <strong><em>sp</em></strong> 的处理方式</p>
<p><img src="WX20200602-152501.png" srcset="/img/loading.gif" alt=""></p>
<p>这里可以看到加密需要的参数为 <strong><em>rsaPubkey</em></strong>、 <strong><em>servertime</em></strong>、 <strong><em>nonce</em></strong> 和 <strong><em>密码</em></strong>，接下来我们再看下面的截图</p>
<p><img src="WX20200602-152949.png" srcset="/img/loading.gif" alt=""></p>
<p>到这里已经找到加密需要的全部参数了，最后就是扣代码</p>
<p>将 <strong><em>sp</em></strong> 加密的代码复制到webstorm中并运行报错“sinaSSOEncoder is not defined”</p>
<p>找到sinaSSOEncoder的定义部分</p>
<p><img src="WX20200602-155623.png" srcset="/img/loading.gif" alt=""></p>
<p><img src="WX20200602-155709.png" srcset="/img/loading.gif" alt=""></p>
<p>1048 ～ 1981行都是sinaSSOEncoder的定义代码</p>
<p>然后再运行</p>
<p><img src="WX20200602-155858@2x.png" srcset="/img/loading.gif" alt=""></p>
<p>搞定</p>
<p>最后要注意的是后续的登陆流程是根据 <strong><em>sp</em></strong> 参数所属请求响应的 <strong><em>retcode</em></strong> 判断的，如下图：</p>
<p><img src="WX20200602-160244.png" srcset="/img/loading.gif" alt=""></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>其实参数加密没什么难度，完善后续登陆操作需要对验证码识别做优化</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>JS逆向</category>
      </categories>
      <tags>
        <tag>JS逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>JS逆向学习-某某快药登陆参数</title>
    <url>/2020/06/03/article-9/</url>
    <content><![CDATA[<p>某某快药登陆参数</p>
<a id="more"></a>

<p>aHR0cDovL3d3dy5kZGt5LmNvbS9wZXJDZW50ZXIuaHRtbD9kZGt5Y2FjaGU9OTJkODJmYmI2MjkxNWQ1MzU3OWQ1YTg3YzY1MTVjOTM</p>
<h3 id="分析请求"><a href="#分析请求" class="headerlink" title="分析请求"></a>分析请求</h3><p>先来看登陆操作，输入错误的用户名密码，查看请求</p>
<p><img src="WX20200603-155433.png" srcset="/img/loading.gif" alt=""></p>
<p>发现登陆需要两个加密参数 <strong><em>sign</em></strong> 和 <strong><em>password</em></strong> ，经验丰富的已经发现是md5加密的了，因为有一个md5.js文件</p>
<p>继续查看该请求的initiator，有一个名为 <strong><em>“denglu”</em></strong> 的记录，定位该位置并查看</p>
<p><img src="WX20200603-160112.png" srcset="/img/loading.gif" alt=""></p>
<p><img src="WX20200603-160158.png" srcset="/img/loading.gif" alt=""></p>
<p>然后进行断点调试</p>
<p><img src="WX20200603-160809.png" srcset="/img/loading.gif" alt=""></p>
<p>确定这里就是我们要找的东西，其中 <strong><em>passwod</em></strong> 通过 <strong><em>MD5</em></strong> 进行加密，<strong><em>getRequestURL</em></strong> 构建了登陆url，参数为固定字符串 <strong><em>“$$.urls.url_user”</em></strong> 和一个 <strong><em>s</em></strong> 对象</p>
<h3 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h3><p>和平常一样缺什么补什么，就不细讲了</p>
<h4 id="js代码"><a href="#js代码" class="headerlink" title="js代码"></a>js代码</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> MD5 = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">r</span>) </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">n</span>(<span class="hljs-params">r, n</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> r &lt;&lt; n | r &gt;&gt;&gt; <span class="hljs-number">32</span> - n<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">t</span>(<span class="hljs-params">r, n</span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> t, o, e, u, f;<br>        <span class="hljs-keyword">return</span> e = <span class="hljs-number">2147483648</span> &amp; r,<br>            u = <span class="hljs-number">2147483648</span> &amp; n,<br>            t = <span class="hljs-number">1073741824</span> &amp; r,<br>            o = <span class="hljs-number">1073741824</span> &amp; n,<br>            f = (<span class="hljs-number">1073741823</span> &amp; r) + (<span class="hljs-number">1073741823</span> &amp; n),<br>            t &amp; o ? <span class="hljs-number">2147483648</span> ^ f ^ e ^ u : t | o ? <span class="hljs-number">1073741824</span> &amp; f ? <span class="hljs-number">3221225472</span> ^ f ^ e ^ u : <span class="hljs-number">1073741824</span> ^ f ^ e ^ u : f ^ e ^ u<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">o</span>(<span class="hljs-params">r, n, t</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> r &amp; n | ~r &amp; t<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">e</span>(<span class="hljs-params">r, n, t</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> r &amp; t | n &amp; ~t<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">u</span>(<span class="hljs-params">r, n, t</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> r ^ n ^ t<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params">r, n, t</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> n ^ (r | ~t)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">i</span>(<span class="hljs-params">r, e, u, f, i, a, c</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> r = t(r, t(t(o(e, u, f), i), c)),<br>            t(n(r, a), e)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params">r, o, u, f, i, a, c</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> r = t(r, t(t(e(o, u, f), i), c)),<br>            t(n(r, a), o)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">c</span>(<span class="hljs-params">r, o, e, f, i, a, c</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> r = t(r, t(t(u(o, e, f), i), c)),<br>            t(n(r, a), o)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">C</span>(<span class="hljs-params">r, o, e, u, i, a, c</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> r = t(r, t(t(f(o, e, u), i), c)),<br>            t(n(r, a), o)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">g</span>(<span class="hljs-params">r</span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> n, t, o = <span class="hljs-string">""</span>, e = <span class="hljs-string">""</span>;<br>        <span class="hljs-keyword">for</span> (t = <span class="hljs-number">0</span>; t &lt;= <span class="hljs-number">3</span>; t++)<br>            n = r &gt;&gt;&gt; <span class="hljs-number">8</span> * t &amp; <span class="hljs-number">255</span>,<br>                e = <span class="hljs-string">"0"</span> + n.toString(<span class="hljs-number">16</span>),<br>                o += e.substr(e.length - <span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">return</span> o<br>    &#125;<br>    <span class="hljs-keyword">var</span> h, d, v, S, m, l, A, p, s, y = <span class="hljs-built_in">Array</span>();<br>    <span class="hljs-keyword">for</span> (r = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">r</span>) </span>&#123;<br>        r = r.replace(<span class="hljs-regexp">/\r\n/g</span>, <span class="hljs-string">"\n"</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> n = <span class="hljs-string">""</span>, t = <span class="hljs-number">0</span>; t &lt; r.length; t++) &#123;<br>            <span class="hljs-keyword">var</span> o = r.charCodeAt(t);<br>            o &lt; <span class="hljs-number">128</span> ? n += <span class="hljs-built_in">String</span>.fromCharCode(o) : o &gt; <span class="hljs-number">127</span> &amp;&amp; o &lt; <span class="hljs-number">2048</span> ? (n += <span class="hljs-built_in">String</span>.fromCharCode(o &gt;&gt; <span class="hljs-number">6</span> | <span class="hljs-number">192</span>),<br>                n += <span class="hljs-built_in">String</span>.fromCharCode(<span class="hljs-number">63</span> &amp; o | <span class="hljs-number">128</span>)) : (n += <span class="hljs-built_in">String</span>.fromCharCode(o &gt;&gt; <span class="hljs-number">12</span> | <span class="hljs-number">224</span>),<br>                n += <span class="hljs-built_in">String</span>.fromCharCode(o &gt;&gt; <span class="hljs-number">6</span> &amp; <span class="hljs-number">63</span> | <span class="hljs-number">128</span>),<br>                n += <span class="hljs-built_in">String</span>.fromCharCode(<span class="hljs-number">63</span> &amp; o | <span class="hljs-number">128</span>))<br>        &#125;<br>        <span class="hljs-keyword">return</span> n<br>    &#125;(r),<br>             y = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">r</span>) </span>&#123;<br>                 <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> n, t = r.length, o = t + <span class="hljs-number">8</span>, e = (o - o % <span class="hljs-number">64</span>) / <span class="hljs-number">64</span>, u = <span class="hljs-number">16</span> * (e + <span class="hljs-number">1</span>), f = <span class="hljs-built_in">Array</span>(u - <span class="hljs-number">1</span>), i = <span class="hljs-number">0</span>, a = <span class="hljs-number">0</span>; a &lt; t; )<br>                     n = (a - a % <span class="hljs-number">4</span>) / <span class="hljs-number">4</span>,<br>                         i = a % <span class="hljs-number">4</span> * <span class="hljs-number">8</span>,<br>                         f[n] = f[n] | r.charCodeAt(a) &lt;&lt; i,<br>                         a++;<br>                 <span class="hljs-keyword">return</span> n = (a - a % <span class="hljs-number">4</span>) / <span class="hljs-number">4</span>,<br>                     i = a % <span class="hljs-number">4</span> * <span class="hljs-number">8</span>,<br>                     f[n] = f[n] | <span class="hljs-number">128</span> &lt;&lt; i,<br>                     f[u - <span class="hljs-number">2</span>] = t &lt;&lt; <span class="hljs-number">3</span>,<br>                     f[u - <span class="hljs-number">1</span>] = t &gt;&gt;&gt; <span class="hljs-number">29</span>,<br>                     f<br>             &#125;(r),<br>             l = <span class="hljs-number">1732584193</span>,<br>             A = <span class="hljs-number">4023233417</span>,<br>             p = <span class="hljs-number">2562383102</span>,<br>             s = <span class="hljs-number">271733878</span>,<br>             h = <span class="hljs-number">0</span>; h &lt; y.length; h += <span class="hljs-number">16</span>)<br>        d = l,<br>            v = A,<br>            S = p,<br>            m = s,<br>            l = i(l, A, p, s, y[h + <span class="hljs-number">0</span>], <span class="hljs-number">7</span>, <span class="hljs-number">3614090360</span>),<br>            s = i(s, l, A, p, y[h + <span class="hljs-number">1</span>], <span class="hljs-number">12</span>, <span class="hljs-number">3905402710</span>),<br>            p = i(p, s, l, A, y[h + <span class="hljs-number">2</span>], <span class="hljs-number">17</span>, <span class="hljs-number">606105819</span>),<br>            A = i(A, p, s, l, y[h + <span class="hljs-number">3</span>], <span class="hljs-number">22</span>, <span class="hljs-number">3250441966</span>),<br>            l = i(l, A, p, s, y[h + <span class="hljs-number">4</span>], <span class="hljs-number">7</span>, <span class="hljs-number">4118548399</span>),<br>            s = i(s, l, A, p, y[h + <span class="hljs-number">5</span>], <span class="hljs-number">12</span>, <span class="hljs-number">1200080426</span>),<br>            p = i(p, s, l, A, y[h + <span class="hljs-number">6</span>], <span class="hljs-number">17</span>, <span class="hljs-number">2821735955</span>),<br>            A = i(A, p, s, l, y[h + <span class="hljs-number">7</span>], <span class="hljs-number">22</span>, <span class="hljs-number">4249261313</span>),<br>            l = i(l, A, p, s, y[h + <span class="hljs-number">8</span>], <span class="hljs-number">7</span>, <span class="hljs-number">1770035416</span>),<br>            s = i(s, l, A, p, y[h + <span class="hljs-number">9</span>], <span class="hljs-number">12</span>, <span class="hljs-number">2336552879</span>),<br>            p = i(p, s, l, A, y[h + <span class="hljs-number">10</span>], <span class="hljs-number">17</span>, <span class="hljs-number">4294925233</span>),<br>            A = i(A, p, s, l, y[h + <span class="hljs-number">11</span>], <span class="hljs-number">22</span>, <span class="hljs-number">2304563134</span>),<br>            l = i(l, A, p, s, y[h + <span class="hljs-number">12</span>], <span class="hljs-number">7</span>, <span class="hljs-number">1804603682</span>),<br>            s = i(s, l, A, p, y[h + <span class="hljs-number">13</span>], <span class="hljs-number">12</span>, <span class="hljs-number">4254626195</span>),<br>            p = i(p, s, l, A, y[h + <span class="hljs-number">14</span>], <span class="hljs-number">17</span>, <span class="hljs-number">2792965006</span>),<br>            A = i(A, p, s, l, y[h + <span class="hljs-number">15</span>], <span class="hljs-number">22</span>, <span class="hljs-number">1236535329</span>),<br>            l = a(l, A, p, s, y[h + <span class="hljs-number">1</span>], <span class="hljs-number">5</span>, <span class="hljs-number">4129170786</span>),<br>            s = a(s, l, A, p, y[h + <span class="hljs-number">6</span>], <span class="hljs-number">9</span>, <span class="hljs-number">3225465664</span>),<br>            p = a(p, s, l, A, y[h + <span class="hljs-number">11</span>], <span class="hljs-number">14</span>, <span class="hljs-number">643717713</span>),<br>            A = a(A, p, s, l, y[h + <span class="hljs-number">0</span>], <span class="hljs-number">20</span>, <span class="hljs-number">3921069994</span>),<br>            l = a(l, A, p, s, y[h + <span class="hljs-number">5</span>], <span class="hljs-number">5</span>, <span class="hljs-number">3593408605</span>),<br>            s = a(s, l, A, p, y[h + <span class="hljs-number">10</span>], <span class="hljs-number">9</span>, <span class="hljs-number">38016083</span>),<br>            p = a(p, s, l, A, y[h + <span class="hljs-number">15</span>], <span class="hljs-number">14</span>, <span class="hljs-number">3634488961</span>),<br>            A = a(A, p, s, l, y[h + <span class="hljs-number">4</span>], <span class="hljs-number">20</span>, <span class="hljs-number">3889429448</span>),<br>            l = a(l, A, p, s, y[h + <span class="hljs-number">9</span>], <span class="hljs-number">5</span>, <span class="hljs-number">568446438</span>),<br>            s = a(s, l, A, p, y[h + <span class="hljs-number">14</span>], <span class="hljs-number">9</span>, <span class="hljs-number">3275163606</span>),<br>            p = a(p, s, l, A, y[h + <span class="hljs-number">3</span>], <span class="hljs-number">14</span>, <span class="hljs-number">4107603335</span>),<br>            A = a(A, p, s, l, y[h + <span class="hljs-number">8</span>], <span class="hljs-number">20</span>, <span class="hljs-number">1163531501</span>),<br>            l = a(l, A, p, s, y[h + <span class="hljs-number">13</span>], <span class="hljs-number">5</span>, <span class="hljs-number">2850285829</span>),<br>            s = a(s, l, A, p, y[h + <span class="hljs-number">2</span>], <span class="hljs-number">9</span>, <span class="hljs-number">4243563512</span>),<br>            p = a(p, s, l, A, y[h + <span class="hljs-number">7</span>], <span class="hljs-number">14</span>, <span class="hljs-number">1735328473</span>),<br>            A = a(A, p, s, l, y[h + <span class="hljs-number">12</span>], <span class="hljs-number">20</span>, <span class="hljs-number">2368359562</span>),<br>            l = c(l, A, p, s, y[h + <span class="hljs-number">5</span>], <span class="hljs-number">4</span>, <span class="hljs-number">4294588738</span>),<br>            s = c(s, l, A, p, y[h + <span class="hljs-number">8</span>], <span class="hljs-number">11</span>, <span class="hljs-number">2272392833</span>),<br>            p = c(p, s, l, A, y[h + <span class="hljs-number">11</span>], <span class="hljs-number">16</span>, <span class="hljs-number">1839030562</span>),<br>            A = c(A, p, s, l, y[h + <span class="hljs-number">14</span>], <span class="hljs-number">23</span>, <span class="hljs-number">4259657740</span>),<br>            l = c(l, A, p, s, y[h + <span class="hljs-number">1</span>], <span class="hljs-number">4</span>, <span class="hljs-number">2763975236</span>),<br>            s = c(s, l, A, p, y[h + <span class="hljs-number">4</span>], <span class="hljs-number">11</span>, <span class="hljs-number">1272893353</span>),<br>            p = c(p, s, l, A, y[h + <span class="hljs-number">7</span>], <span class="hljs-number">16</span>, <span class="hljs-number">4139469664</span>),<br>            A = c(A, p, s, l, y[h + <span class="hljs-number">10</span>], <span class="hljs-number">23</span>, <span class="hljs-number">3200236656</span>),<br>            l = c(l, A, p, s, y[h + <span class="hljs-number">13</span>], <span class="hljs-number">4</span>, <span class="hljs-number">681279174</span>),<br>            s = c(s, l, A, p, y[h + <span class="hljs-number">0</span>], <span class="hljs-number">11</span>, <span class="hljs-number">3936430074</span>),<br>            p = c(p, s, l, A, y[h + <span class="hljs-number">3</span>], <span class="hljs-number">16</span>, <span class="hljs-number">3572445317</span>),<br>            A = c(A, p, s, l, y[h + <span class="hljs-number">6</span>], <span class="hljs-number">23</span>, <span class="hljs-number">76029189</span>),<br>            l = c(l, A, p, s, y[h + <span class="hljs-number">9</span>], <span class="hljs-number">4</span>, <span class="hljs-number">3654602809</span>),<br>            s = c(s, l, A, p, y[h + <span class="hljs-number">12</span>], <span class="hljs-number">11</span>, <span class="hljs-number">3873151461</span>),<br>            p = c(p, s, l, A, y[h + <span class="hljs-number">15</span>], <span class="hljs-number">16</span>, <span class="hljs-number">530742520</span>),<br>            A = c(A, p, s, l, y[h + <span class="hljs-number">2</span>], <span class="hljs-number">23</span>, <span class="hljs-number">3299628645</span>),<br>            l = C(l, A, p, s, y[h + <span class="hljs-number">0</span>], <span class="hljs-number">6</span>, <span class="hljs-number">4096336452</span>),<br>            s = C(s, l, A, p, y[h + <span class="hljs-number">7</span>], <span class="hljs-number">10</span>, <span class="hljs-number">1126891415</span>),<br>            p = C(p, s, l, A, y[h + <span class="hljs-number">14</span>], <span class="hljs-number">15</span>, <span class="hljs-number">2878612391</span>),<br>            A = C(A, p, s, l, y[h + <span class="hljs-number">5</span>], <span class="hljs-number">21</span>, <span class="hljs-number">4237533241</span>),<br>            l = C(l, A, p, s, y[h + <span class="hljs-number">12</span>], <span class="hljs-number">6</span>, <span class="hljs-number">1700485571</span>),<br>            s = C(s, l, A, p, y[h + <span class="hljs-number">3</span>], <span class="hljs-number">10</span>, <span class="hljs-number">2399980690</span>),<br>            p = C(p, s, l, A, y[h + <span class="hljs-number">10</span>], <span class="hljs-number">15</span>, <span class="hljs-number">4293915773</span>),<br>            A = C(A, p, s, l, y[h + <span class="hljs-number">1</span>], <span class="hljs-number">21</span>, <span class="hljs-number">2240044497</span>),<br>            l = C(l, A, p, s, y[h + <span class="hljs-number">8</span>], <span class="hljs-number">6</span>, <span class="hljs-number">1873313359</span>),<br>            s = C(s, l, A, p, y[h + <span class="hljs-number">15</span>], <span class="hljs-number">10</span>, <span class="hljs-number">4264355552</span>),<br>            p = C(p, s, l, A, y[h + <span class="hljs-number">6</span>], <span class="hljs-number">15</span>, <span class="hljs-number">2734768916</span>),<br>            A = C(A, p, s, l, y[h + <span class="hljs-number">13</span>], <span class="hljs-number">21</span>, <span class="hljs-number">1309151649</span>),<br>            l = C(l, A, p, s, y[h + <span class="hljs-number">4</span>], <span class="hljs-number">6</span>, <span class="hljs-number">4149444226</span>),<br>            s = C(s, l, A, p, y[h + <span class="hljs-number">11</span>], <span class="hljs-number">10</span>, <span class="hljs-number">3174756917</span>),<br>            p = C(p, s, l, A, y[h + <span class="hljs-number">2</span>], <span class="hljs-number">15</span>, <span class="hljs-number">718787259</span>),<br>            A = C(A, p, s, l, y[h + <span class="hljs-number">9</span>], <span class="hljs-number">21</span>, <span class="hljs-number">3951481745</span>),<br>            l = t(l, d),<br>            A = t(A, v),<br>            p = t(p, S),<br>            s = t(s, m);<br>    <span class="hljs-keyword">return</span> (g(l) + g(A) + g(p) + g(s)).toUpperCase()<br>&#125;;<br><br><span class="hljs-keyword">var</span> DMap = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">this</span>.data = &#123;&#125;,<br>        <span class="hljs-keyword">this</span>.len = <span class="hljs-number">0</span>,<br>        <span class="hljs-keyword">this</span>.size = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.len<br>        &#125;<br>        ,<br>        <span class="hljs-keyword">this</span>.isEmpty = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.len &lt; <span class="hljs-number">1</span><br>        &#125;<br>        ,<br>        <span class="hljs-keyword">this</span>.clear = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">this</span>.data = &#123;&#125;,<br>                <span class="hljs-keyword">this</span>.len = <span class="hljs-number">0</span><br>        &#125;<br>        ,<br>        <span class="hljs-keyword">this</span>.put = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e, t</span>) </span>&#123;<br>            <span class="hljs-keyword">this</span>.data[e] = <span class="hljs-keyword">void</span> <span class="hljs-number">0</span> == t || <span class="hljs-string">"null"</span> == t || <span class="hljs-string">""</span> == t ? <span class="hljs-string">""</span> : t,<br>                <span class="hljs-keyword">this</span>.len++<br>        &#125;<br>        ,<br>        <span class="hljs-keyword">this</span>.remove = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.data[e] = <span class="hljs-literal">null</span>,<br>                <span class="hljs-keyword">this</span>.len--,<br>                !<span class="hljs-number">0</span><br>        &#125;<br>        ,<br>        <span class="hljs-keyword">this</span>.get = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.data[e]<br>        &#125;<br>        ,<br>        <span class="hljs-keyword">this</span>.containsKey = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> !!<span class="hljs-keyword">this</span>.data[e]<br>        &#125;<br>        ,<br>        <span class="hljs-keyword">this</span>.containsValue = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> t <span class="hljs-keyword">in</span> <span class="hljs-keyword">this</span>.data)<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.data[t] == e)<br>                        <span class="hljs-keyword">return</span> !<span class="hljs-number">0</span><br>            &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>                <span class="hljs-keyword">return</span> !<span class="hljs-number">1</span><br>            &#125;<br>            <span class="hljs-keyword">return</span> !<span class="hljs-number">1</span><br>        &#125;<br>        ,<br>        <span class="hljs-keyword">this</span>.values = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">var</span> e = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> t <span class="hljs-keyword">in</span> <span class="hljs-keyword">this</span>.data)<br>                e.push(<span class="hljs-keyword">this</span>.data[t]);<br>            <span class="hljs-keyword">return</span> e<br>        &#125;<br>        ,<br>        <span class="hljs-keyword">this</span>.keys = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">var</span> e = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> t <span class="hljs-keyword">in</span> <span class="hljs-keyword">this</span>.data)<br>                e.push(t);<br>            <span class="hljs-keyword">return</span> e<br>        &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> getRequestURL = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e, t, i</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (i &amp;&amp; <span class="hljs-number">1</span> == i)<br>        <span class="hljs-keyword">var</span> r = <span class="hljs-string">"V8E26BD7FN76D08C349A43D6D3M51A1B"</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">var</span> r = <span class="hljs-string">"6C57AB91A1308E26B797F4CD382AC79D"</span>;<br>    _this = <span class="hljs-keyword">this</span>;<br>    <span class="hljs-keyword">var</span> s = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span><br>        , n = s.getFullYear()<br>        , o = s.getMonth() + <span class="hljs-number">1</span><br>        , a = s.getDate()<br>        , c = s.getHours()<br>        , h = s.getMinutes()<br>        , d = s.getSeconds()<br>        , u = n + <span class="hljs-string">"-"</span> + o + <span class="hljs-string">"-"</span> + a + <span class="hljs-string">" "</span> + c + <span class="hljs-string">":"</span> + h + <span class="hljs-string">":"</span> + d;<br>    t.put(<span class="hljs-string">"t"</span>, u),<br>        t.put(<span class="hljs-string">"v"</span>, <span class="hljs-string">"1.0"</span>),<br>    t.containsKey(<span class="hljs-string">"versionName"</span>) || t.put(<span class="hljs-string">"versionName"</span>, <span class="hljs-string">"4.6.0"</span>),<br>        t.put(<span class="hljs-string">"plat"</span>, <span class="hljs-string">"H5"</span>),<br>        t.put(<span class="hljs-string">"platform"</span>, <span class="hljs-string">"H5"</span>);<br>    <span class="hljs-comment">//     !t.containsKey("userId") || t.containsKey("loginToken") || t.containsKey("uDate") ? t.containsKey("userId") || _this.getUserId() &amp;&amp; (t.put("loginToken", _this.getLoginToken()),</span><br>    <span class="hljs-comment">//         t.put("uDate", _this.getUDate()),</span><br>    <span class="hljs-comment">//         t.put("userId", _this.getUserId())) : (t.put("loginToken", _this.getLoginToken()),</span><br>    <span class="hljs-comment">//         t.put("uDate", _this.getUDate()));</span><br>    <span class="hljs-keyword">var</span> l = t.keys().sort()<br>        , p = <span class="hljs-string">""</span>;<br>    l.length;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> g <span class="hljs-keyword">in</span> l) &#123;<br>        <span class="hljs-keyword">var</span> m = l[g];<br>        p += m + t.get(m)<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> f = t.get(<span class="hljs-string">"method"</span>) + p + r, y = MD5(f), v = e + <span class="hljs-string">"?sign="</span> + y, k = <span class="hljs-number">0</span>; k &lt; l.length; k++)<br>        (t.get(l[k]) + <span class="hljs-string">""</span>).indexOf(<span class="hljs-string">"+"</span>) &gt;= <span class="hljs-number">0</span> || <span class="hljs-number">-1</span> != (t.get(l[k]) + <span class="hljs-string">""</span>).indexOf(<span class="hljs-string">"&amp;"</span>) ? v += <span class="hljs-string">"&amp;"</span> + l[k] + <span class="hljs-string">"="</span> + <span class="hljs-built_in">encodeURIComponent</span>(t.get(l[k])) : <span class="hljs-string">"pageUrl"</span> == l[k] ? v += <span class="hljs-string">"&amp;"</span> + l[k] + <span class="hljs-string">"="</span> + <span class="hljs-built_in">encodeURIComponent</span>(t.get(l[k])) : v += <span class="hljs-string">"&amp;"</span> + l[k] + <span class="hljs-string">"="</span> + t.get(l[k]);<br>    <span class="hljs-keyword">return</span> v<br>&#125;<br><br><span class="hljs-keyword">var</span> codes = [<span class="hljs-string">"010101,010104"</span>, <span class="hljs-string">"010502,010503,010504,010505,010506,010507"</span>, <span class="hljs-string">"010401,010402,010403,010404,010406,010407"</span>, <span class="hljs-string">"010801,010802,010803,010804,010901,010902,010807"</span>, <span class="hljs-string">"011303,010609"</span>, <span class="hljs-string">"011501,011502,011503,011504,011505,010301,010302,0…,010706,010707,010709,010710,010711,011101,011106"</span>, <span class="hljs-string">"020101,020103,020105,020201,020202,020203"</span>, <span class="hljs-string">"020403,020404,020406,020409,020414"</span>, <span class="hljs-string">"030101,030102,030103,030107,030108,030109,030110,030111,030113"</span>, <span class="hljs-string">"030201,030202,030204"</span>, <span class="hljs-string">"040101,040501,040502,040404,040201,040204"</span>, <span class="hljs-string">"060901,061103,060603,060604,060607,060609,060610,0…,060804,060805,060402,060403,060201,060701,060702"</span>, <span class="hljs-string">"060104"</span>]<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">denglu</span>(<span class="hljs-params">username, password</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> e = username<br>    <span class="hljs-keyword">var</span> s = <span class="hljs-keyword">new</span> DMap;<br>    <span class="hljs-keyword">var</span> url_user = <span class="hljs-string">"http://wxapi.ddky.com/user/rest.htm"</span><br>    s.put(<span class="hljs-string">"userName"</span>, e),<br>        s.put(<span class="hljs-string">"password"</span>, MD5(password).toLowerCase()),<br>        s.put(<span class="hljs-string">"method"</span>, <span class="hljs-string">"ddsy.user.reg.login"</span>);<br>    <span class="hljs-keyword">var</span> a = getRequestURL(url_user, s);<br><br>    <span class="hljs-keyword">return</span> a<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">loadProduct</span>(<span class="hljs-params">index</span>) </span>&#123;<br>    <span class="hljs-keyword">var</span> _url = <span class="hljs-number">1</span> ? <span class="hljs-string">'http://product.ddky.com/product/queryOrgcodeProductListForB2C.htm'</span> : <span class="hljs-string">'http://192.168.89.38/product/queryOrgcodeProductListForB2C.htm'</span>;<br>    <span class="hljs-keyword">var</span> params = <span class="hljs-keyword">new</span> DMap();<br>    params.put(<span class="hljs-string">'orgcode'</span>, codes[index]);<br>    params.put(<span class="hljs-string">'orderTypeId'</span>, <span class="hljs-string">'0'</span>);<br>    params.put(<span class="hljs-string">'shopId'</span>, <span class="hljs-string">"-1"</span>);<br>    params.put(<span class="hljs-string">'pageNo'</span>, <span class="hljs-string">'1'</span>);<br>    params.put(<span class="hljs-string">'pageSize'</span>, <span class="hljs-string">'100'</span>);<br>    params.put(<span class="hljs-string">'otcMark'</span>, <span class="hljs-string">'1,2,99'</span>);<br>    params.put(<span class="hljs-string">'method'</span>, <span class="hljs-string">'ddsy.product.query.orgcode.product.list.b2c'</span>);<br>    params.put(<span class="hljs-string">'versionName'</span>, <span class="hljs-string">'3.2.0'</span>);<br>    <span class="hljs-keyword">var</span> req = getRequestURL(_url, params);<br>    <span class="hljs-keyword">return</span> req<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>真的没什么难度，只是需要注意不添加请求中的 <strong><em>callback</em></strong> 参数会直接返回可以使用JSON解析的数据格式。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>JS逆向</category>
      </categories>
      <tags>
        <tag>JS逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>hello world</title>
    <url>/2020/04/26/article/</url>
    <content><![CDATA[<p>This is my first blog.</p>
<p>Everything is OK!</p>
]]></content>
  </entry>
  <entry>
    <title>Python面试题收集</title>
    <url>/2020/07/30/article-30/</url>
    <content><![CDATA[<p>Python面试题收集</p>
<a id="more"></a>

<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><h4 id="将”hello-world”转换为首字母大写”Hello-World”"><a href="#将”hello-world”转换为首字母大写”Hello-World”" class="headerlink" title="将”hello world”转换为首字母大写”Hello World”"></a>将”hello world”转换为首字母大写”Hello World”</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-string">"hello world"</span>.title()<br></code></pre></td></tr></table></figure>



<h4 id="如何检测字符串中只含有数字"><a href="#如何检测字符串中只含有数字" class="headerlink" title="如何检测字符串中只含有数字?"></a>如何检测字符串中只含有数字?</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-string">""</span>.isdigit()<br></code></pre></td></tr></table></figure>



<h4 id="将字符串”ilovechina”进行反转"><a href="#将字符串”ilovechina”进行反转" class="headerlink" title="将字符串”ilovechina”进行反转"></a>将字符串”ilovechina”进行反转</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-string">"ilovechina"</span>[::<span class="hljs-number">-1</span>]<br></code></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">tmp = <span class="hljs-string">"ilovechina"</span><br>output = <span class="hljs-string">""</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tmp:<br>  output = i + output<br></code></pre></td></tr></table></figure>



<h4 id="Python-中的字符串格式化方式你知道哪些？"><a href="#Python-中的字符串格式化方式你知道哪些？" class="headerlink" title="Python 中的字符串格式化方式你知道哪些？"></a>Python 中的字符串格式化方式你知道哪些？</h4><p>%s, format, fstring</p>
<h4 id="有一个字符串开头和末尾都有空格，比如“-adabdw-”，要求写一个函数把这个字符串的前后空格都去掉。"><a href="#有一个字符串开头和末尾都有空格，比如“-adabdw-”，要求写一个函数把这个字符串的前后空格都去掉。" class="headerlink" title="有一个字符串开头和末尾都有空格，比如“ adabdw ”，要求写一个函数把这个字符串的前后空格都去掉。"></a>有一个字符串开头和末尾都有空格，比如“ adabdw ”，要求写一个函数把这个字符串的前后空格都去掉。</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">clean_space</span><span class="hljs-params">(tmp)</span>:</span><br>  <span class="hljs-keyword">return</span> tmp.strip()<br></code></pre></td></tr></table></figure>



<h4 id="获取字符串”123456“最后的两个字符。"><a href="#获取字符串”123456“最后的两个字符。" class="headerlink" title="获取字符串”123456“最后的两个字符。"></a>获取字符串”123456“最后的两个字符。</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-string">"123456"</span>[<span class="hljs-number">-2</span>:]<br></code></pre></td></tr></table></figure>



<h4 id="一个编码为-GBK-的字符串-S，要将其转成-UTF-8-编码的字符串，应如何操作？"><a href="#一个编码为-GBK-的字符串-S，要将其转成-UTF-8-编码的字符串，应如何操作？" class="headerlink" title="一个编码为 GBK 的字符串 S，要将其转成 UTF-8 编码的字符串，应如何操作？"></a>一个编码为 GBK 的字符串 S，要将其转成 UTF-8 编码的字符串，应如何操作？</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">S.encode(<span class="hljs-string">'gbk'</span>).decode(<span class="hljs-string">'utf8'</span>, <span class="hljs-string">'ignore'</span>)<br></code></pre></td></tr></table></figure>



<h4 id="（1）s-”info：xiaoZhang-33-shandong”，用正则切分字符串输出-‘info’-‘xiaoZhang’-‘33’-‘shandong’-。（2）a-“你好-中国-“，去除多余空格只留一个空格。"><a href="#（1）s-”info：xiaoZhang-33-shandong”，用正则切分字符串输出-‘info’-‘xiaoZhang’-‘33’-‘shandong’-。（2）a-“你好-中国-“，去除多余空格只留一个空格。" class="headerlink" title="（1）s=”info：xiaoZhang 33 shandong”，用正则切分字符串输出[‘info’, ‘xiaoZhang’, ‘33’, ‘shandong’]。（2）a = “你好 中国 “，去除多余空格只留一个空格。"></a>（1）s=”info：xiaoZhang 33 shandong”，用正则切分字符串输出[‘info’, ‘xiaoZhang’, ‘33’, ‘shandong’]。（2）a = “你好 中国 “，去除多余空格只留一个空格。</h4><p>(1)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br>s = <span class="hljs-string">"info：xiaoZhang 33 shandong"</span><br>output = re.split(<span class="hljs-string">r"：| "</span>, s)<br>print(output)<br></code></pre></td></tr></table></figure>

<p>(2)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">"你好   中国 "</span><br>output = <span class="hljs-string">' '</span>.join(a.split())<br>print(output)<br></code></pre></td></tr></table></figure>



<h4 id="1-怎样将字符串转换为小写。-2-单引号、双引号、三引号的区别？"><a href="#1-怎样将字符串转换为小写。-2-单引号、双引号、三引号的区别？" class="headerlink" title="(1) 怎样将字符串转换为小写。 (2) 单引号、双引号、三引号的区别？"></a>(1) 怎样将字符串转换为小写。 (2) 单引号、双引号、三引号的区别？</h4><p>(1)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-string">""</span>.lower()<br></code></pre></td></tr></table></figure>



<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="已知-AList-1-2-3-1-2-，对-AList-列表元素去重，写出具体过程。"><a href="#已知-AList-1-2-3-1-2-，对-AList-列表元素去重，写出具体过程。" class="headerlink" title="已知 AList = [1,2,3,1,2]，对 AList 列表元素去重，写出具体过程。"></a>已知 AList = [1,2,3,1,2]，对 AList 列表元素去重，写出具体过程。</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">List(set(Alist))<br></code></pre></td></tr></table></figure>



<h4 id="如何实现-“1-2-3”-变成-“1”-”2”-”3”"><a href="#如何实现-“1-2-3”-变成-“1”-”2”-”3”" class="headerlink" title="如何实现 “1,2,3” 变成 [“1”,”2”,”3”]"></a>如何实现 “1,2,3” 变成 [“1”,”2”,”3”]</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-string">"1,2,3"</span>.split(<span class="hljs-string">","</span>)<br></code></pre></td></tr></table></figure>



<h4 id="给定两个-list，A-和-B，找出相同元素和不同元素"><a href="#给定两个-list，A-和-B，找出相同元素和不同元素" class="headerlink" title="给定两个 list，A 和 B，找出相同元素和不同元素"></a>给定两个 list，A 和 B，找出相同元素和不同元素</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">print(set(A) &amp; set(B))<br></code></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">print(set(A) ^ set(B))<br></code></pre></td></tr></table></figure>



<h4 id="1-2-3-4-5-6-一行代码展开该列表，得出-1-2-3-4-5-6"><a href="#1-2-3-4-5-6-一行代码展开该列表，得出-1-2-3-4-5-6" class="headerlink" title="[[1,2],[3,4],[5,6]] 一行代码展开该列表，得出 [1,2,3,4,5,6]"></a>[[1,2],[3,4],[5,6]] 一行代码展开该列表，得出 [1,2,3,4,5,6]</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">tmp = [[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]]<br>print([j <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tmp <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> i])<br></code></pre></td></tr></table></figure>



<h4 id="合并列表-1-5-7-9-和-2-2-6-8"><a href="#合并列表-1-5-7-9-和-2-2-6-8" class="headerlink" title="合并列表 [1,5,7,9] 和 [2,2,6,8]"></a>合并列表 [1,5,7,9] 和 [2,2,6,8]</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">a =  [<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>]<br>b =  [<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>]<br>a.extend(b)<br></code></pre></td></tr></table></figure>



<h4 id="如何打乱一个列表的元素？"><a href="#如何打乱一个列表的元素？" class="headerlink" title="如何打乱一个列表的元素？"></a>如何打乱一个列表的元素？</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><br>tmp = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>random.shuffle(tmp)<br>print(tmp)<br></code></pre></td></tr></table></figure>



<h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><h4 id="字典操作中-del-和-pop-有什么区别"><a href="#字典操作中-del-和-pop-有什么区别" class="headerlink" title="字典操作中 del 和 pop 有什么区别"></a>字典操作中 del 和 pop 有什么区别</h4><p>del 可以根据索引（元素所在位置）来删除的，没有返回值。 pop 可以根据索引弹出一个值，然后可以接收它的返回值。</p>
<h4 id="按照字典的内的年龄排序"><a href="#按照字典的内的年龄排序" class="headerlink" title="按照字典的内的年龄排序"></a>按照字典的内的年龄排序</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">d1 = [<br>    &#123;<span class="hljs-string">'name'</span>:<span class="hljs-string">'alice'</span>, <span class="hljs-string">'age'</span>:<span class="hljs-number">38</span>&#125;,<br>    &#123;<span class="hljs-string">'name'</span>:<span class="hljs-string">'bob'</span>, <span class="hljs-string">'age'</span>:<span class="hljs-number">18</span>&#125;,<br>    &#123;<span class="hljs-string">'name'</span>:<span class="hljs-string">'Carl'</span>, <span class="hljs-string">'age'</span>:<span class="hljs-number">28</span>&#125;,<br>]<br><br>print(sorted(d1, key=<span class="hljs-keyword">lambda</span> d:d[<span class="hljs-string">'age'</span>]))<br></code></pre></td></tr></table></figure>



<h4 id="请合并下面两个字典-a-“A”：1-”B”：2-b-“C”：3-”D”：4"><a href="#请合并下面两个字典-a-“A”：1-”B”：2-b-“C”：3-”D”：4" class="headerlink" title="请合并下面两个字典 a = {“A”：1,”B”：2},b = {“C”：3,”D”：4}"></a>请合并下面两个字典 a = {“A”：1,”B”：2},b = {“C”：3,”D”：4}</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">a = &#123;<span class="hljs-string">"A"</span>:<span class="hljs-number">1</span>,<span class="hljs-string">"B"</span>:<span class="hljs-number">2</span>&#125;<br>b = &#123;<span class="hljs-string">"C"</span>:<span class="hljs-number">3</span>,<span class="hljs-string">"D"</span>:<span class="hljs-number">4</span>&#125;<br>a.update(b)<br>print(a)<br></code></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">print(&#123;**a, **b&#125;)<br></code></pre></td></tr></table></figure>



<h4 id="如何使用生成式的方式生成一个字典，写一段功能代码。"><a href="#如何使用生成式的方式生成一个字典，写一段功能代码。" class="headerlink" title="如何使用生成式的方式生成一个字典，写一段功能代码。"></a>如何使用生成式的方式生成一个字典，写一段功能代码。</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">tmp = [[<span class="hljs-string">'name'</span>, <span class="hljs-string">'Boss'</span>], [<span class="hljs-string">'age'</span>, <span class="hljs-number">18</span>]]<br><br>output = &#123;k:v <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> tmp&#125;<br>print(output)<br></code></pre></td></tr></table></figure>



<h4 id="如何把元组-“a”-”b”-和元组-1-2-，变为字典-“a”：1-”b”：2"><a href="#如何把元组-“a”-”b”-和元组-1-2-，变为字典-“a”：1-”b”：2" class="headerlink" title="如何把元组 (“a”,”b”) 和元组 (1,2)，变为字典 {“a”：1,”b”：2}"></a>如何把元组 (“a”,”b”) 和元组 (1,2)，变为字典 {“a”：1,”b”：2}</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">a = (<span class="hljs-string">"a"</span>,<span class="hljs-string">"b"</span>)<br>b = (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br>output = dict(zip(a, b))<br>print(output)<br></code></pre></td></tr></table></figure>



<h3 id="数据类型-综合"><a href="#数据类型-综合" class="headerlink" title="数据类型 - 综合"></a>数据类型 - 综合</h3><h4 id="下列字典对象键类型不正确的是？"><a href="#下列字典对象键类型不正确的是？" class="headerlink" title="下列字典对象键类型不正确的是？"></a>下列字典对象键类型不正确的是？</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">A：&#123;<span class="hljs-number">1</span>：<span class="hljs-number">0</span>,<span class="hljs-number">2</span>：<span class="hljs-number">0</span>,<span class="hljs-number">3</span>：<span class="hljs-number">0</span>&#125;<br>B：&#123;<span class="hljs-string">"a"</span>：<span class="hljs-number">0</span>, <span class="hljs-string">"b"</span>：<span class="hljs-number">0</span>, <span class="hljs-string">"c"</span>：<span class="hljs-number">0</span>&#125;<br>C： &#123;(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)：<span class="hljs-number">0</span>, (<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)：<span class="hljs-number">0</span>&#125;<br>D： &#123;[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>]：<span class="hljs-number">0</span>, [<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]：<span class="hljs-number">0</span>&#125;<br></code></pre></td></tr></table></figure>

<p>D, 字典的key必须是可哈希的，list是可变数据类型，不符合</p>
<h4 id="如何交换字典-“A”：1-”B”：2-的键和值"><a href="#如何交换字典-“A”：1-”B”：2-的键和值" class="headerlink" title="如何交换字典 {“A”：1,”B”：2}的键和值"></a>如何交换字典 {“A”：1,”B”：2}的键和值</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">tmp = &#123;<span class="hljs-string">"A"</span>:<span class="hljs-number">1</span>,<span class="hljs-string">"B"</span>:<span class="hljs-number">2</span>&#125;<br><br><span class="hljs-comment"># 方法一</span><br>output = &#123;v:k <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> tmp.items()&#125;<br><br><span class="hljs-comment"># 方法二</span><br>output = dict(zip(tmp.values(), tmp.keys()))<br><br>print(output)<br></code></pre></td></tr></table></figure>



<h4 id="Python-里面如何实现-tuple-和-list-的转换？"><a href="#Python-里面如何实现-tuple-和-list-的转换？" class="headerlink" title="Python 里面如何实现 tuple 和 list 的转换？"></a>Python 里面如何实现 tuple 和 list 的转换？</h4><p>Python 中的类型转换，一般通过类型强转即可完成 tuple 转 list 是 list() 方法 list 转 tuple 使用 tuple() 方法</p>
<h4 id="我们知道对于列表可以使用切片操作进行部分元素的选择，那么如何对生成器类型的对象实现相同的功能呢？"><a href="#我们知道对于列表可以使用切片操作进行部分元素的选择，那么如何对生成器类型的对象实现相同的功能呢？" class="headerlink" title="我们知道对于列表可以使用切片操作进行部分元素的选择，那么如何对生成器类型的对象实现相同的功能呢？"></a>我们知道对于列表可以使用切片操作进行部分元素的选择，那么如何对生成器类型的对象实现相同的功能呢？</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> islice<br><br>gen = iter(range(<span class="hljs-number">10</span>))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> islice(gen, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>):<br>  	print(i)<br></code></pre></td></tr></table></figure>

<p>这个题目考察了 Python 标准库的 itertools 模快的掌握情况，该模块提供了操作生成器的一些方法。 对于生成器类型我们使用 islice 方法来实现切片的功能。</p>
<h4 id="请将-i-for-i-in-range-3-改成生成器"><a href="#请将-i-for-i-in-range-3-改成生成器" class="headerlink" title="请将 [i for i in range(3)] 改成生成器"></a>请将 [i for i in range(3)] 改成生成器</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">(i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">3</span>))<br></code></pre></td></tr></table></figure>



<h4 id="a-”hello”-和-b-”你好”-编码成-bytes-类型"><a href="#a-”hello”-和-b-”你好”-编码成-bytes-类型" class="headerlink" title="a=”hello” 和 b=”你好” 编码成 bytes 类型"></a>a=”hello” 和 b=”你好” 编码成 bytes 类型</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">a = <span class="hljs-string">b"hello"</span><br>b = bytes(<span class="hljs-string">"你好"</span>, <span class="hljs-string">"utf-8"</span>)<br>c = <span class="hljs-string">"你好"</span>.encode(<span class="hljs-string">"utf-8"</span>)<br>print(a, b, c)<br></code></pre></td></tr></table></figure>



<h4 id="下面的代码输出结果是什么？"><a href="#下面的代码输出结果是什么？" class="headerlink" title="下面的代码输出结果是什么？"></a>下面的代码输出结果是什么？</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">a = (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>],<span class="hljs-number">8</span>)<br>a[<span class="hljs-number">2</span>] = <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure>

<p>出现异常</p>
<h4 id="下面的代码输出的结果是什么"><a href="#下面的代码输出的结果是什么" class="headerlink" title="下面的代码输出的结果是什么?"></a>下面的代码输出的结果是什么?</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">a = (<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>],<span class="hljs-number">8</span>)<br>a[<span class="hljs-number">3</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,[<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>],<span class="hljs-number">8</span>)<br></code></pre></td></tr></table></figure>



<h4 id="在读文件操作的时候会使用-read、readline-或者-readlines，简述它们各自的作用"><a href="#在读文件操作的时候会使用-read、readline-或者-readlines，简述它们各自的作用" class="headerlink" title="在读文件操作的时候会使用 read、readline 或者 readlines，简述它们各自的作用"></a>在读文件操作的时候会使用 read、readline 或者 readlines，简述它们各自的作用</h4><p>read() 每次读取整个文件，它通常用于将文件内容放到一个字符串变量中。如果希望一行一行的输出那么就可以使用 readline()，该方法会把文件的内容加载到内存，所以对于对于大文件的读取操作来说非常的消耗内存资源，此时就可以通过 readlines 方法，将文件的句柄生成一个生产器，然后去读就可以了。</p>
<h4 id="json-序列化时，可以处理的数据类型有哪些？如何定制支持-datetime-类型？"><a href="#json-序列化时，可以处理的数据类型有哪些？如何定制支持-datetime-类型？" class="headerlink" title="json 序列化时，可以处理的数据类型有哪些？如何定制支持 datetime 类型？"></a>json 序列化时，可以处理的数据类型有哪些？如何定制支持 datetime 类型？</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> date, datetime<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DateJson</span><span class="hljs-params">(json.JSONEncoder)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">default</span><span class="hljs-params">(self, o)</span>:</span><br>        <span class="hljs-keyword">if</span> isinstance(o, datetime):<br>            <span class="hljs-keyword">return</span> o.strftime(<span class="hljs-string">'%Y-%m-%d %H:%M:%S'</span>)<br>        <span class="hljs-keyword">elif</span> isinstance(o, date):<br>            <span class="hljs-keyword">return</span> o.strftime(<span class="hljs-string">"%Y-%m-%d"</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> json.JSONEncoder.default(o)<br><br>d1 = &#123;<br>    <span class="hljs-string">'name'</span>: <span class="hljs-string">"Boss"</span>,<br>    <span class="hljs-string">'date'</span>: datetime.now()<br>&#125;<br><br>print(json.dumps(d1, cls=DateJson))<br></code></pre></td></tr></table></figure>



<h4 id="json-序列化时，默认遇到中文会转换成-unicode，如果想要保留中文怎么办？"><a href="#json-序列化时，默认遇到中文会转换成-unicode，如果想要保留中文怎么办？" class="headerlink" title="json 序列化时，默认遇到中文会转换成 unicode，如果想要保留中文怎么办？"></a>json 序列化时，默认遇到中文会转换成 unicode，如果想要保留中文怎么办？</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><br>d = &#123;<span class="hljs-string">'name'</span>: <span class="hljs-string">'张三'</span>,<span class="hljs-string">'desc'</span>: <span class="hljs-string">'法外狂徒'</span>&#125;<br>print(json.dumps(d, ensure_ascii=<span class="hljs-literal">False</span>))<br></code></pre></td></tr></table></figure>



<h4 id="有两个磁盘文件-A-和-B，各存放一行字母，要求把这两个文件中的信息合并-按字母顺序排列-，输出到一个新文件-C-中。"><a href="#有两个磁盘文件-A-和-B，各存放一行字母，要求把这两个文件中的信息合并-按字母顺序排列-，输出到一个新文件-C-中。" class="headerlink" title="有两个磁盘文件 A 和 B，各存放一行字母，要求把这两个文件中的信息合并(按字母顺序排列)，输出到一个新文件 C 中。"></a>有两个磁盘文件 A 和 B，各存放一行字母，要求把这两个文件中的信息合并(按字母顺序排列)，输出到一个新文件 C 中。</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> open(<span class="hljs-string">'A.text'</span>, <span class="hljs-string">'r'</span>) <span class="hljs-keyword">as</span> f:<br>    a_text = f.readline()<br><br><span class="hljs-keyword">with</span> open(<span class="hljs-string">'B.text'</span>, <span class="hljs-string">'r'</span>) <span class="hljs-keyword">as</span> f:<br>    b_text = f.readline()<br><br>output = a_text + b_text<br><br>c_list = sorted(output)<br><br><span class="hljs-keyword">with</span> open(<span class="hljs-string">'c.text'</span>, <span class="hljs-string">'a+'</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(<span class="hljs-string">''</span>.join(c_list))<br></code></pre></td></tr></table></figure>



<h4 id="如果当前的日期为-20190530，要求写一个函数输出-N-天后的日期，-比如-N-为-2，则输出-20190601-。"><a href="#如果当前的日期为-20190530，要求写一个函数输出-N-天后的日期，-比如-N-为-2，则输出-20190601-。" class="headerlink" title="如果当前的日期为 20190530，要求写一个函数输出 N 天后的日期，(比如 N 为 2，则输出 20190601)。"></a>如果当前的日期为 20190530，要求写一个函数输出 N 天后的日期，(比如 N 为 2，则输出 20190601)。</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">from</span> dateutil.relativedelta <span class="hljs-keyword">import</span> relativedelta<br><span class="hljs-comment"># timedelta 最大只能精确到天数，relativedelta可以传入年月</span><br><br>now_date = <span class="hljs-string">"20190530"</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">date_add</span><span class="hljs-params">(now_date ,N)</span>:</span><br>    date = datetime.strptime(now_date, <span class="hljs-string">"%Y%m%d"</span>)<br>    new_date = date + relativedelta(days=<span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">return</span> new_date.strftime(<span class="hljs-string">'%Y%m%d'</span>)<br><br>print(date_add(now_date, <span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure>



<h4 id="写一个函数，接收整数参数-n，返回一个函数，函数的功能是把函数的参数和-n-相乘并把结果返回。"><a href="#写一个函数，接收整数参数-n，返回一个函数，函数的功能是把函数的参数和-n-相乘并把结果返回。" class="headerlink" title="写一个函数，接收整数参数 n，返回一个函数，函数的功能是把函数的参数和 n 相乘并把结果返回。"></a>写一个函数，接收整数参数 n，返回一个函数，函数的功能是把函数的参数和 n 相乘并把结果返回。</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func_out</span><span class="hljs-params">(n)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func_inner</span><span class="hljs-params">(val)</span>:</span><br>        <span class="hljs-keyword">return</span> n * val<br><br>    <span class="hljs-keyword">return</span> func_inner<br><br>run = func_out(<span class="hljs-number">8</span>)<br>print(run(<span class="hljs-number">5</span>))<br></code></pre></td></tr></table></figure>



<h4 id="下面代码会存在什么问题，如何改进？"><a href="#下面代码会存在什么问题，如何改进？" class="headerlink" title="下面代码会存在什么问题，如何改进？"></a>下面代码会存在什么问题，如何改进？</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">strappend</span><span class="hljs-params">(num)</span>：</span><br>    str='first'<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(num)：<br>        str+=str(i)<br>    <span class="hljs-keyword">return</span> str<br></code></pre></td></tr></table></figure>

<p>首先不应该使用 Python 的内置类似 str 作为变量名这里我把它改为了 s,另外在Python,str 是个不可变对象，每次迭代都会生成新的存储空间，num 越大，创建的 str 对象就会越多，内存消耗越大。使用 yield 改成生成器即可, 还有一点就是命名规范的位置，函数名改为_分割比较好</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">str_append</span><span class="hljs-params">(num)</span>:</span><br>    s = <span class="hljs-string">'first'</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(num):<br>        s += str(i)<br>        <span class="hljs-keyword">yield</span> s<br></code></pre></td></tr></table></figure>



<h4 id="一行代码输出-1-100-之间的所有偶数。"><a href="#一行代码输出-1-100-之间的所有偶数。" class="headerlink" title="一行代码输出 1-100 之间的所有偶数。"></a>一行代码输出 1-100 之间的所有偶数。</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 方法一</span><br>print(list(filter(<span class="hljs-keyword">lambda</span> num: num % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>, range(<span class="hljs-number">1</span>, <span class="hljs-number">101</span>))))<br><br><span class="hljs-comment"># 方法二</span><br>print(list(range(<span class="hljs-number">2</span>, <span class="hljs-number">101</span>, <span class="hljs-number">2</span>)))<br><br><span class="hljs-comment"># 方法三</span><br>print([i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, <span class="hljs-number">101</span>) <span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure>



<h4 id="with-语句的作用，写一段代码？"><a href="#with-语句的作用，写一段代码？" class="headerlink" title="with 语句的作用，写一段代码？"></a>with 语句的作用，写一段代码？</h4><p>with 语句适用于对资源进行访问的场合，确保不管使用过程中是否发生异常都会执行必要的“清理”操作，释放资源，比如文件使用后自动关闭、线程中锁的自动获取和释放等。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#一般访问文件资源时我们会这样处理：</span><br><br>f = open(<br>    <span class="hljs-string">'c：\test.txt'</span>, <span class="hljs-string">'r'</span>)<br>data = f.read()<br>f.close()<br><span class="hljs-comment"># 这样写没有错，但是容易犯两个毛病：</span><br><span class="hljs-comment"># 1. 如果在读写时出现异常而忘了异常处理。</span><br><span class="hljs-comment"># 2. 忘了关闭文件句柄</span><br><br><span class="hljs-comment">#以下的加强版本的写法：</span><br><br>f = open(<span class="hljs-string">'c：\test.txt'</span>, <span class="hljs-string">'r'</span>)<br><span class="hljs-keyword">try</span>：<br>    data = f.read()<br><span class="hljs-keyword">finally</span>：<br>    f.close()<br><br><span class="hljs-comment">#以上的写法就可以避免因读取文件时异常的发生而没有关闭问题的处理了。代码长了一些。</span><br><span class="hljs-comment">#但使用 with 有更优雅的写法：</span><br><br><span class="hljs-keyword">with</span> open(<span class="hljs-string">r'c：\test.txt'</span>, <span class="hljs-string">'r'</span>) <span class="hljs-keyword">as</span> f：<br>    data = f.read()<br><span class="hljs-comment">#with 的实现</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span>：</span><br><span class="hljs-class">    <span class="hljs-title">def</span> <span class="hljs-title">__enter__</span><span class="hljs-params">(self)</span>：</span><br><span class="hljs-class">        <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">'__enter__() is call!'</span>)</span></span><br><span class="hljs-class">        <span class="hljs-title">return</span> <span class="hljs-title">self</span></span><br><span class="hljs-class"></span><br><span class="hljs-class">    <span class="hljs-title">def</span> <span class="hljs-title">dosomething</span><span class="hljs-params">(self)</span>：</span><br><span class="hljs-class">        <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">'dosomethong!'</span>)</span></span><br><span class="hljs-class"></span><br><span class="hljs-class">    <span class="hljs-title">def</span> <span class="hljs-title">__exit__</span><span class="hljs-params">(self, exc_type, exc_value, traceback)</span>：</span><br><span class="hljs-class">        <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">'__exit__() is call!'</span>)</span></span><br><span class="hljs-class">        <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">f'type：<span class="hljs-subst">&#123;exc_type&#125;</span>'</span>)</span></span><br><span class="hljs-class">        <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">f'value：<span class="hljs-subst">&#123;exc_value&#125;</span>'</span>)</span></span><br><span class="hljs-class">        <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">f'trace：<span class="hljs-subst">&#123;traceback&#125;</span>'</span>)</span></span><br><span class="hljs-class">        <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">'__exit()__ is call!'</span>)</span></span><br><span class="hljs-class"></span><br><span class="hljs-class"><span class="hljs-title">with</span> <span class="hljs-title">Test</span><span class="hljs-params">()</span> <span class="hljs-title">as</span> <span class="hljs-title">sample</span>：</span><br><span class="hljs-class">      <span class="hljs-title">pass</span></span><br><span class="hljs-class"></span><br><span class="hljs-class">#当对象被实例化时，就会主动调用<span class="hljs-title">__enter__</span><span class="hljs-params">()</span>方法，任务执行完成后就会调用<span class="hljs-title">__exit__</span><span class="hljs-params">()</span>方法，</span><br>#另外，注意到，__exit__()方法是带有三个参数的(exc_type, exc_value, traceback),<br><span class="hljs-comment">#依据上面的官方说明：如果上下文运行时没有异常发生，那么三个参数都将置为 None, </span><br><span class="hljs-comment">#这里三个参数由于没有发生异常，的确是置为了 None, 与预期一致.</span><br><br><span class="hljs-comment"># 修改后不出异常了</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span>：</span><br><span class="hljs-class">    <span class="hljs-title">def</span> <span class="hljs-title">__enter__</span><span class="hljs-params">(self)</span>：</span><br><span class="hljs-class">        <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">'__enter__() is call!'</span>)</span></span><br><span class="hljs-class">        <span class="hljs-title">return</span> <span class="hljs-title">self</span></span><br><span class="hljs-class"></span><br><span class="hljs-class">    <span class="hljs-title">def</span> <span class="hljs-title">dosomething</span><span class="hljs-params">(self)</span>：</span><br>        x = 1/0<br>        print(<span class="hljs-string">'dosomethong!'</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__exit__</span><span class="hljs-params">(self, exc_type, exc_value, traceback)</span>：</span><br><span class="hljs-function">        <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">'__exit__() is call!'</span>)</span></span><br><span class="hljs-function">        <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">f'type：<span class="hljs-subst">&#123;exc_type&#125;</span>'</span>)</span></span><br><span class="hljs-function">        <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">f'value：<span class="hljs-subst">&#123;exc_value&#125;</span>'</span>)</span></span><br><span class="hljs-function">        <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">f'trace：<span class="hljs-subst">&#123;traceback&#125;</span>'</span>)</span></span><br><span class="hljs-function">        <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">'__exit()__ is call!'</span>)</span></span><br><span class="hljs-function">        <span class="hljs-title">return</span> <span class="hljs-title">True</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">with</span> <span class="hljs-title">Test</span><span class="hljs-params">()</span> <span class="hljs-title">as</span> <span class="hljs-title">sample</span>：</span><br></code></pre></td></tr></table></figure>



<h4 id="Python-字典和-json-字符串相互转化方法"><a href="#Python-字典和-json-字符串相互转化方法" class="headerlink" title="Python 字典和 json 字符串相互转化方法"></a>Python 字典和 json 字符串相互转化方法</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># dict -&gt; json</span><br>d = &#123;<br>  <span class="hljs-string">'name'</span>: <span class="hljs-string">'Bob'</span>,<br>  <span class="hljs-string">'age'</span>: <span class="hljs-number">18</span><br>&#125;<br>output = json.dumps(d)<br>print(output)<br><br><span class="hljs-comment"># json -&gt; dict </span><br>s = <span class="hljs-string">'&#123;"name": "Bob", "age": 18&#125;'</span><br>output = json.loads(s)<br>print(output)<br></code></pre></td></tr></table></figure>

<p>注意：json.loads(jsonstr) 这里面的参数只能是 jsonstr 格式的字符串. 当我们使用 str 将字典 dic 转化为字符串以后，得到的结果为:”{‘a’: 123, ‘b’: ‘456’, ‘c’: ‘liming’}”。 如果直接使用 json.loads(str(dic)) 你会发现出现错误，原因就是，单引号的字符串不符合Json的标准格式所以再次使用了 replace(“‘“, “\“”)。</p>
<h4 id="请写一个-Python-逻辑，计算一个文件中的大写字母数量"><a href="#请写一个-Python-逻辑，计算一个文件中的大写字母数量" class="headerlink" title="请写一个 Python 逻辑，计算一个文件中的大写字母数量"></a>请写一个 Python 逻辑，计算一个文件中的大写字母数量</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> open(<span class="hljs-string">'test.text'</span>, <span class="hljs-string">'r'</span>) <span class="hljs-keyword">as</span> f:<br>    content = f.read()<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pre_count</span><span class="hljs-params">(content)</span>:</span><br>    content = content.replace(<span class="hljs-string">' '</span>, <span class="hljs-string">''</span>)<br>    <span class="hljs-keyword">return</span> content<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">do_count</span><span class="hljs-params">(content)</span>:</span><br>    COUNT = <span class="hljs-number">0</span><br>    content = pre_count(content)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> content:<br>        <span class="hljs-keyword">if</span> i.isupper():<br>            COUNT += <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">return</span> COUNT<br><br>print(do_count(content))<br></code></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> open(<span class="hljs-string">'A.txt'</span>) <span class="hljs-keyword">as</span> fs：<br>    count = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> fs.read()：<br>        <span class="hljs-keyword">if</span> i.isupper()：<br>            count += <span class="hljs-number">1</span><br>print(count)<br></code></pre></td></tr></table></figure>



<h4 id="请写一段-Python连接Mongo数据库，然后查询的代码。"><a href="#请写一段-Python连接Mongo数据库，然后查询的代码。" class="headerlink" title="请写一段 Python连接Mongo数据库，然后查询的代码。"></a>请写一段 Python连接Mongo数据库，然后查询的代码。</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pymongo <span class="hljs-keyword">import</span> MongoClient<br><br>mongo = MongoClient(<br>    host=<span class="hljs-string">'localhost'</span>,<br>    port=<span class="hljs-number">27017</span>,<br>)<br><br>db = mongo.tutorial<br>collection = db.QuoteItem<br><br>result = collection.find()<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> result:<br>    print(i)<br><br>mongo.close()<br></code></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymongo<br>db_configs = &#123;<br>    <span class="hljs-string">'type'</span>: <span class="hljs-string">'mongo'</span>,<br>    <span class="hljs-string">'host'</span>: <span class="hljs-string">'地址'</span>,<br>    <span class="hljs-string">'port'</span>: <span class="hljs-string">'端口'</span>,<br>    <span class="hljs-string">'user'</span>: <span class="hljs-string">'spider_data'</span>,<br>    <span class="hljs-string">'passwd'</span>: <span class="hljs-string">'密码'</span>,<br>    <span class="hljs-string">'db_name'</span>: <span class="hljs-string">'spider_data'</span><br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mongo</span><span class="hljs-params">()</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, db=db_configs[<span class="hljs-string">"db_name"</span>], username=db_configs[<span class="hljs-string">"user"</span>],</span></span><br><span class="hljs-function"><span class="hljs-params">                 password=db_configs[<span class="hljs-string">"passwd"</span>])</span>:</span><br>        self.client = pymongo.MongoClient(<span class="hljs-string">f'mongodb://<span class="hljs-subst">&#123;db_configs[<span class="hljs-string">"host"</span>]&#125;</span>:db_configs["port"]'</span>)<br>        self.username = username<br>        self.password = password<br>        <span class="hljs-keyword">if</span> self.username <span class="hljs-keyword">and</span> self.password:<br>            self.db1 = self.client[db].authenticate(self.username, self.password)<br>        self.db1 = self.client[db]<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find_data</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-comment"># 获取状态为0的数据</span><br>        data = self.db1.test.find(&#123;<span class="hljs-string">"status"</span>: <span class="hljs-number">0</span>&#125;)<br>        gen = (item <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> data)<br>        <span class="hljs-keyword">return</span> gen<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    m = Mongo()<br>    print(m.find_data())<br></code></pre></td></tr></table></figure>



<h4 id="说一说Redis的基本类型"><a href="#说一说Redis的基本类型" class="headerlink" title="说一说Redis的基本类型"></a>说一说Redis的基本类型</h4><p>Redis 支持五种数据类型： string（字符串） 、 hash（哈希）、list（列表） 、 set（集合） 及 zset(sorted set： 有序集合)。</p>
<h4 id="请写一段-Python连接Redis数据库的代码。"><a href="#请写一段-Python连接Redis数据库的代码。" class="headerlink" title="请写一段 Python连接Redis数据库的代码。"></a>请写一段 Python连接Redis数据库的代码。</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> redis <span class="hljs-keyword">import</span> ConnectionPool, StrictRedis<br><br>pool = ConnectionPool.from_url(<span class="hljs-string">"redis://127.0.0.1:6379/2"</span>, decode_components=<span class="hljs-literal">True</span>)<br>conn = StrictRedis(connection_pool=pool)<br></code></pre></td></tr></table></figure>



<h4 id="请写一段-Python连接Mysql数据库的代码。"><a href="#请写一段-Python连接Mysql数据库的代码。" class="headerlink" title="请写一段 Python连接Mysql数据库的代码。"></a>请写一段 Python连接Mysql数据库的代码。</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pymysql<br><br>conn = pymysql.connect(<br>    host=<span class="hljs-string">"localhost"</span>,<br>    port=<span class="hljs-number">3306</span>,<br>    user=<span class="hljs-string">"root"</span>,<br>    password=<span class="hljs-string">"251314wq"</span>,<br>    db=<span class="hljs-string">"spider"</span><br>)<br></code></pre></td></tr></table></figure>



<h4 id="了解Redis的事务么"><a href="#了解Redis的事务么" class="headerlink" title="了解Redis的事务么"></a>了解Redis的事务么</h4><p>简单理解，可以认为 redis 事务是一些列 redis 命令的集合，并且有如下两个特点： 1.事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。 2.事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。 一般来说，事务有四个性质称为ACID，分别是原子性，一致性，隔离性和持久性。 一个事务从开始到执行会经历以下三个阶段：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> redis<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span><span class="hljs-params">()</span>:</span>   <br>    <span class="hljs-keyword">try</span>:<br>        conn=redis.StrictRedis(<span class="hljs-string">'192.168.80.41'</span>)<br>       <span class="hljs-comment"># Python中redis事务是通过pipeline的封装实现的</span><br>        pipe=conn.pipeline()<br>        pipe.sadd(<span class="hljs-string">'s001'</span>,<span class="hljs-string">'a'</span>)<br>        sys.exit()<br>        <span class="hljs-comment">#在事务还没有提交前退出，所以事务不会被执行。</span><br>        pipe.sadd(<span class="hljs-string">'s001'</span>,<span class="hljs-string">'b'</span>)<br>        pipe.execute()<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> err:<br>        print(err)<br>        <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">"__main__"</span>:<br>      run()<br></code></pre></td></tr></table></figure>



<h4 id="了解数据库的三范式么？"><a href="#了解数据库的三范式么？" class="headerlink" title="了解数据库的三范式么？"></a>了解数据库的三范式么？</h4><p>经过研究和对使用中问题的总结，对于设计数据库提出了一些规范，这些规范被称为范式 一般需要遵守下面3范式即可: 第一范式（1NF）：强调的是列的原子性，即列不能够再分成其他几列。 第二范式（2NF）：首先是 1NF，另外包含两部分内容，一是表必须有一个主键；二是没有包含在主键中的列必须完全依赖于主键，而不能只依赖于主键的一部分。 第三范式（3NF）：首先是 2NF，另外非主键列必须直接依赖于主键，不能存在传递依赖。即不能存在：非主键列 A 依赖于非主键列 B，非主键列 B 依赖于主键的情况。</p>
<h4 id="了解分布式锁么"><a href="#了解分布式锁么" class="headerlink" title="了解分布式锁么"></a>了解分布式锁么</h4><p>分布式锁是控制分布式系统之间的同步访问共享资源的一种方式。 对于分布式锁的目标，我们必须首先明确三点：</p>
<ul>
<li>任何一个时间点必须只能够有一个客户端拥有锁。</li>
<li>不能够有死锁，也就是最终客户端都能够获得锁，尽管可能会经历失败。</li>
<li>错误容忍性要好，只要有大部分的Redis实例存活，客户端就应该能够获得锁。 分布式锁的条件 互斥性：分布式锁需要保证在不同节点的不同线程的互斥 可重入性：同一个节点上的同一个线程如果获取了锁之后，能够再次获取这个锁。 锁超时：支持超时释放锁，防止死锁 高效，高可用：加锁和解锁需要高效，同时也需要保证高可用防止分布式锁失效，可以增加降级。 支持阻塞和非阻塞：可以实现超时获取失败，tryLock(long timeOut) 支持公平锁和非公平锁</li>
</ul>
<p>分布式锁的实现方案 1、数据库实现（乐观锁） 2、基于zookeeper的实现 3、基于Redis的实现（推荐）</p>
<h4 id="用-Python-实现一个-Reids-的分布式锁的功能"><a href="#用-Python-实现一个-Reids-的分布式锁的功能" class="headerlink" title="用 Python 实现一个 Reids 的分布式锁的功能"></a>用 Python 实现一个 Reids 的分布式锁的功能</h4><p>REDIS分布式锁实现的方式：SETNX + GETSET,NX是Not eXists的缩写，如SETNX命令就应该理解为：SET if Not eXists。 多个进程执行以下Redis命令：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">SETNX <span class="hljs-keyword">lock</span>.foo &lt;<span class="hljs-keyword">current</span> Unix <span class="hljs-type">time</span> + <span class="hljs-keyword">lock</span> timeout + <span class="hljs-number">1</span>&gt;<br></code></pre></td></tr></table></figure>

<p>如果 SETNX 返回1，说明该进程获得锁，SETNX将键 lock.foo 的值设置为锁的超时时间（当前时间 + 锁的有效时间）。 如果 SETNX 返回0，说明其他进程已经获得了锁，进程不能进入临界区。进程可以在一个循环中不断地尝试 SETNX 操作，以获得锁。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> redis<br><span class="hljs-keyword">from</span> conf.config <span class="hljs-keyword">import</span> REDIS_HOST, REDIS_PORT, REDIS_PASSWORD<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RedisLock</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span><br>        self.conn = redis.Redis(host=REDIS_HOST, port=REDIS_PORT, password=REDIS_PASSWORD, db=<span class="hljs-number">1</span>)<br>        self._lock = <span class="hljs-number">0</span><br>        self.lock_key = <span class="hljs-string">""</span><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">my_float</span><span class="hljs-params">(timestamp)</span>:</span><br>        <span class="hljs-string">"""</span><br><span class="hljs-string">        Args:</span><br><span class="hljs-string">            timestamp:</span><br><span class="hljs-string">        Returns:</span><br><span class="hljs-string">            float或者0</span><br><span class="hljs-string">            如果取出的是None，说明原本锁并没人用，getset已经写入，返回0，可以继续操作。</span><br><span class="hljs-string">        """</span><br>        <span class="hljs-keyword">if</span> timestamp:<br>            <span class="hljs-keyword">return</span> float(timestamp)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment">#防止取出的值为None，转换float报错</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>          <br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_lock</span><span class="hljs-params">(cls, key, timeout=<span class="hljs-number">10</span>)</span>:</span><br>        cls.lock_key = <span class="hljs-string">f"<span class="hljs-subst">&#123;key&#125;</span>_dynamic_lock"</span><br>        <span class="hljs-keyword">while</span> cls._lock != <span class="hljs-number">1</span>:<br>            timestamp = time.time() + timeout + <span class="hljs-number">1</span><br>            cls._lock = cls.conn.setnx(cls.lock_key, timestamp)<br>            <span class="hljs-comment"># if 条件中，可能在运行到or之后被释放，也可能在and之后被释放</span><br>            <span class="hljs-comment"># 将导致 get到一个None，float失败。</span><br>            <span class="hljs-keyword">if</span> cls._lock == <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> (<br>                            time.time() &gt; cls.my_float(cls.conn.get(cls.lock_key)) <span class="hljs-keyword">and</span><br>                            time.time() &gt; cls.my_float(cls.conn.getset(cls.lock_key, timestamp))):<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">else</span>:<br>                time.sleep(<span class="hljs-number">0.3</span>)<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">release</span><span class="hljs-params">(cls)</span>:</span><br>        <span class="hljs-keyword">if</span> cls.conn.get(cls.lock_key) <span class="hljs-keyword">and</span> time.time() &lt; cls.conn.get(cls.lock_key):<br>            cls.conn.delete(cls.lock_key)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">redis_lock_deco</span><span class="hljs-params">(cls)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_deco</span><span class="hljs-params">(func)</span>:</span><br>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__deco</span><span class="hljs-params">(*args, **kwargs)</span>:</span><br>            cls.get_lock(cls, args[<span class="hljs-number">1</span>])<br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-keyword">return</span> func(*args, **kwargs)<br>            <span class="hljs-keyword">finally</span>:<br>                cls.release(cls)<br>        <span class="hljs-keyword">return</span> __deco<br>    <span class="hljs-keyword">return</span> _deco<br><br><br><span class="hljs-meta">@redis_lock_deco(RedisLock())</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">my_func</span><span class="hljs-params">()</span>:</span><br>    print(<span class="hljs-string">"myfunc() called."</span>)<br>    time.sleep(<span class="hljs-number">20</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:<br>    my_func()<br></code></pre></td></tr></table></figure>



<h4 id="写一段-Python-使用-mongo-数据库创建索引的代码"><a href="#写一段-Python-使用-mongo-数据库创建索引的代码" class="headerlink" title="写一段 Python 使用 mongo 数据库创建索引的代码:"></a>写一段 Python 使用 mongo 数据库创建索引的代码:</h4><h3 id="高级特性"><a href="#高级特性" class="headerlink" title="高级特性"></a>高级特性</h3><h4 id="函数装饰器有什么作用？请列举说明？"><a href="#函数装饰器有什么作用？请列举说明？" class="headerlink" title="函数装饰器有什么作用？请列举说明？"></a>函数装饰器有什么作用？请列举说明？</h4><p>装饰器就是一个函数，它可以在不需要做任何代码变动的前提下给一个函数增加额外功能，启动装饰的效果。 它经常用于有切面需求的场景，比如：插入日志、性能测试、事务处理、缓存、权限校验等场景。 下面是一个日志功能的装饰器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> wraps<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">log</span><span class="hljs-params">(label)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decorate</span><span class="hljs-params">(func)</span>:</span><br><span class="hljs-meta">        @wraps(func)</span><br>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_wrap</span><span class="hljs-params">(*args, **kwargs)</span>:</span><br>            <span class="hljs-keyword">try</span>:<br>                func(*args, **kwargs)<br>                print(<span class="hljs-string">'name'</span>, func.__name__)<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                print(e)<br><br>        <span class="hljs-keyword">return</span> _wrap<br>    <span class="hljs-keyword">return</span> decorate<br><br><span class="hljs-meta">@log('info')</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">foo</span><span class="hljs-params">(a, b, c)</span>:</span><br>    print(a + b +c)<br>    print(<span class="hljs-string">"in foo"</span>)<br><br>foo(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure>





<h4 id="Python-垃圾回收机制？"><a href="#Python-垃圾回收机制？" class="headerlink" title="Python 垃圾回收机制？"></a>Python 垃圾回收机制？</h4><p>python的GC模块主要运用了“引用计数(reference counting)”来跟踪和回收垃圾。在引用计数的基础上，还可以通过标记清除(mark and sweep)解决容器(这里的容器值指的不是docker，而是数组，字典，元组这样的对象)对象可能产生的循环引用的问题。通过“分代回收(generation collection)”以空间换取时间来进一步提高垃圾回收的效率。</p>
<p>1.引用计数机制 </p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">在Python中，大多数对象的生命周期都是通过对象的引用计数来管理的， 广义上讲，它也是一种垃圾回收机制，而且是一种最直观最简单的垃圾回收机制。<br><br>　　原理：当一个对象被创建引用或者被复制的时候，对象的引用计数会加一，当一个对象的引用被销毁时，对象的引用计数会减一，当对象的引用计数减为<span class="hljs-number">0</span>的时候，就意味着对象已经没有被任何人使用了，可以将其所占用的内存释放了。<br><br>　　虽然引用计数必须在每次分配和释放内存的时候加入管理引用计数的这个动作，然而与其他主流垃圾收集机制相比， 最大的一个优点是实时性， 及任何内存，一旦没有指向他的引用，就会立即被回收，其他的垃圾回收机制必须在某种特殊条件下(内存分配失败)才能进行无效内存的回收。<br><br>　　执行效率问题： 引用计数机制带来的维护引用计数带来的额外操作与python运行中所运行的内存分配和释放，引用赋值的次数是成正比的。相比其他机制，比如“标记-清除”，“停止-复制”，是一个弱点，因为这些技术所带来的操作基本上只是与待回收的数量有关。<br><br>　　引用计数还存在的一个致命的弱点是循环引用，这使得垃圾回收机制从来没有将引用计数包含在内。这就需要我们用新的方法了， 即标记清除。<br></code></pre></td></tr></table></figure>



<p>2.标记-清除 </p>
<p>标记清除主要是用来解决循环引用产生的问题的，循环引用只会在容器对象中才会产生，比如数组、字典、元组等，首先是为了追踪对象，需要每个容器对象维护两个额外的指针，用来将容器对象组成一个链表，指针分别指向前后两个容器对象，这样就可以将对象的循环引用环摘除，就可以得出两个对象的有效计数。</p>
<p>问题说明：</p>
<p>　　循环引用可以使得一组对象的引用计数不是0， 然而这些对象实际上并没有被外部对象所引用，这就意味着不会再有人使用这组对象， 应该回收这组对象所占用的内存空间，然而由于相互引用的存在，每一个对象的引用计数不为0，因为这些对象所占用的内存永远不会被释放。比如下面的代码：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript">a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]<br>b = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br>a.append(b)<br>b.append(a)<br>del a<br>del b<br># B<br>c = [<span class="hljs-number">3</span>, <span class="hljs-number">5</span>]<br>d = [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>]<br>c.append(d)<br>d.append(c)<br>del c<br></code></pre></td></tr></table></figure>

<p>OKAY,现在就这个做一下解释，这是个集中营， 一个是root object(链表)，另一个是unreachable链表。</p>
<p>对于上面的第一组， 在未执行del语句的时候，a，b的引用计数都是2(init + append= 2)，但是在DEL执行完毕之后，a，b的引用次数互相减一。a，b陷入循环引用的圈子中，然后标记清除算法开始出来做事，找到其中一端a，开始拆a，b的引用环(我们从a出发，因为它对B有一个引用，则将B的引用计数减一，然后顺着引用到达B，因为B有一个对A的引用，同样将A的引用减一，这样就完成了循环引用对象之间的对象环摘除)， 去掉以后发现a，c循环引用变成了0，所以a，b就被处理到unreachable链表中直接被做掉。</p>
<p>对于第二组，简单一看d取环后引用计数还是1，但是a取环后就是0了这时的c已经进入了unreachable的链表中，被判了死刑，但是此时在root表中还有d，d还在引用着c，如果c被搞掉，世界就没有了正义。root链表中的d会被引用检测引用了c，如果c没了，那么b也就凉凉了，所以c又拉回到了root链表中。</p>
<p>解剖这两个链表的原因是现在在unreachable中可能存在被root链表中的对象，直接或者间接引用的对象，这些对象是不能被回收的，一旦在标记的过程中，发现这样的对象就将其移动到root链表中，完成标记后，unreachable链表中剩下的就是名副其实的垃圾对象了，接下来垃圾回收只需要限制在unreachable链表中即可。</p>
<p>优点：<br>    解决了引用计数无法解决的循环引用的问题<br>缺点：<br>  过程需要中断程序<br>  产生大量零碎的空闲空间碎片</p>
<p>3.分代回收</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><code class="hljs livecodeserver">对象存在时间越长，越不可能是垃圾，应该越少去收集。这样在执行标记-清除算法时可以有效减少遍历的对象数，从而提高垃圾回收的速度。<br><br>Python gc 给对象定义了三种 generation （<span class="hljs-literal">zero</span>，<span class="hljs-literal">one</span>，<span class="hljs-literal">two</span>），每一个新生对象在 generation <span class="hljs-literal">zero</span> 中，如果它在一轮 gc 扫描中活了下来，那么它将被移至 generation <span class="hljs-literal">one</span>，在那里他将较少的被扫描，如果他有活过了一轮 gc，它将被移至 generation <span class="hljs-literal">two</span>，在那里他被扫描的次数将会更少。<br><br>gc的扫描在什么时候触发呢？当某一 generation 中被分配的对象与被释放的对象之差达到某一阈值的时候，就会触发对该 generation 的扫描（同时也会扫描比该 generation 年轻的 generation ）。<br><br>优点：<br>	改善 GC 所花费的时间，提高 GC 效率<br>缺点：<br>	额外的空间开销<br></code></pre></td></tr></table></figure>



<h4 id="魔法函数-call-怎么使用"><a href="#魔法函数-call-怎么使用" class="headerlink" title="魔法函数 _call_怎么使用?"></a>魔法函数 _<em>call</em>_怎么使用?</h4><p> <em><em>call</em></em> 可以把类实例当做函数调用。 使用示例如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Duck</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__call__</span><span class="hljs-params">(self, *args, **kwargs)</span>:</span><br>        print(<span class="hljs-string">'I am a duck!'</span>)<br><br>d = Duck()<br>d()<br></code></pre></td></tr></table></figure>



<h4 id="如何判断一个对象是函数还是方法？"><a href="#如何判断一个对象是函数还是方法？" class="headerlink" title="如何判断一个对象是函数还是方法？"></a>如何判断一个对象是函数还是方法？</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> types <span class="hljs-keyword">import</span> MethodType, FunctionType<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bar</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">foo</span><span class="hljs-params">(self)</span>:</span><br>        print(<span class="hljs-string">'method'</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span>:</span><br>    print(<span class="hljs-string">'function'</span>)<br><br>print(isinstance(Bar().foo, MethodType))<br>print(isinstance(Bar().foo, FunctionType))<br>print(isinstance(foo, MethodType))<br>print(isinstance(foo, FunctionType))<br></code></pre></td></tr></table></figure>



<h4 id="classmethod-和-staticmethod-用法和区别"><a href="#classmethod-和-staticmethod-用法和区别" class="headerlink" title="@classmethod 和 @staticmethod 用法和区别"></a>@classmethod 和 @staticmethod 用法和区别</h4><p>相同之处：@staticmethod 和@classmethod 都可以直接类名.方法名()来调用，不用在示例化一个类。</p>
<p>@classmethod</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">iget_no_of_instance</span><span class="hljs-params">(ins_obj)</span>：</span><br><span class="hljs-function">    <span class="hljs-title">return</span> <span class="hljs-title">ins_obj</span>.<span class="hljs-title">__class__</span>.<span class="hljs-title">no_inst</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-title">class</span> <span class="hljs-title">Kls</span><span class="hljs-params">(object)</span>：</span><br>    no_inst = 0<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>：</span><br>        Kls.no_inst = Kls.no_inst + 1<br><br><br>ik1 = Kls()<br>ik2 = Kls()<br>print(iget_no_of_instance(ik1))<br></code></pre></td></tr></table></figure>

<p>@staticmethod 经常有一些跟类有关系的功能但在运行时又不需要实例和类参与的情况下需要用到静态方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">IND = <span class="hljs-string">'ON'</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Kls</span><span class="hljs-params">(object)</span>：</span><br><span class="hljs-class">    <span class="hljs-title">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, data)</span>：</span><br>        self.data = data<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">check_ind</span><span class="hljs-params">()</span>：</span><br><span class="hljs-function">        <span class="hljs-title">return</span> <span class="hljs-params">(IND == <span class="hljs-string">'ON'</span>)</span></span><br><span class="hljs-function"></span><br><span class="hljs-function">    <span class="hljs-title">def</span> <span class="hljs-title">do_reset</span><span class="hljs-params">(self)</span>：</span><br><span class="hljs-function">        <span class="hljs-title">if</span> <span class="hljs-title">self</span>.<span class="hljs-title">check_ind</span><span class="hljs-params">()</span>：</span><br><span class="hljs-function">            <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">'Reset done for：'</span>, self.data)</span></span><br><span class="hljs-function"></span><br><span class="hljs-function">    <span class="hljs-title">def</span> <span class="hljs-title">set_db</span><span class="hljs-params">(self)</span>：</span><br><span class="hljs-function">        <span class="hljs-title">if</span> <span class="hljs-title">self</span>.<span class="hljs-title">check_ind</span><span class="hljs-params">()</span>：</span><br>            self.db = 'New db connection'<br>        print(<span class="hljs-string">'DB connection made for： '</span>, self.data)<br><br><br>ik1 = Kls(<span class="hljs-number">12</span>)<br>ik1.do_reset()<br>ik1.set_db()<br></code></pre></td></tr></table></figure>



<h4 id="Python-中的接口如何实现？"><a href="#Python-中的接口如何实现？" class="headerlink" title="Python 中的接口如何实现？"></a>Python 中的接口如何实现？</h4><p>接口提取了一群类共同的函数，可以把接口当做一个函数的集合，然后让子类去实现接口中的函数。但是在 Python 中根本就没有一个叫做 interface 的关键字，如果非要去模仿接口的概念，可以使用抽象类来实现。抽象类是一个特殊的类，它的特殊之处在于只能被继承，不能被实例化。使用 abc 模块来实现抽象类。</p>
<h4 id="metaclass-作用？以及应用场景？"><a href="#metaclass-作用？以及应用场景？" class="headerlink" title="metaclass 作用？以及应用场景？"></a>metaclass 作用？以及应用场景？</h4><p>metaclass 即元类，metaclass 是类似创建类的模板，所有的类都是通过他来 create 的(调用<strong>new</strong>)，这使得你可以自由的控制创建类的那个过程，实现你所需要的功能。 我们可以使用元类创建单例模式和实现 ORM 模式。</p>
<h4 id="hasattr-、getattr-、setattr-的用法"><a href="#hasattr-、getattr-、setattr-的用法" class="headerlink" title="hasattr()、getattr()、setattr() 的用法"></a>hasattr()、getattr()、setattr() 的用法</h4><p>这三个方法属于 Python 的反射机制里面的，hasattr 可以判断一个对象是否含有某个属性，getattr 可以充当 get 获取对象属性的作用。而 setattr 可以充当 person.name = “liming”的赋值操作.</p>
<h4 id="请列举你知道的-Python-的魔法方法及用途。"><a href="#请列举你知道的-Python-的魔法方法及用途。" class="headerlink" title="请列举你知道的 Python 的魔法方法及用途。"></a>请列举你知道的 Python 的魔法方法及用途。</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">1 __init__：<br>类的初始化方法。它获取任何传给构造器的参数（比如我们调用 x = SomeClass(10, ‘foo’) ， __init__就会接到参数 10 和 ‘foo’ 。 __init__在 Python 的类定义中用的最多。<br><br>2 __new__：<br>__new__是对象实例化时第一个调用的方法，它只取下 cls 参数，并把其他参数传给 __init__ 。 __new__很少使用，但是也有它适合的场景，尤其是当类继承自一个像元组或者字符串这样不经常改变的类型的时候.<br><br>3 __del__：<br>__new__和 __init__是对象的构造器， __del__是对象的销毁器。它并非实现了语句 del x (因此该语句不等同于 x.__del__())。而是定义了当对象被垃圾回收时的行为。 当对象需要在销毁时做一些处理的时候这个方法很有用，比如 socket 对象、文件对象。但是需要注意的是，当 Python 解释器退出但对象仍然存活的时候，__del__并不会 执行。 所以养成一个手工清理的好习惯是很重要的，比如及时关闭连接。<br></code></pre></td></tr></table></figure>



<h4 id="如何知道一个-Python-对象的类型？"><a href="#如何知道一个-Python-对象的类型？" class="headerlink" title="如何知道一个 Python 对象的类型？"></a>如何知道一个 Python 对象的类型？</h4><p>type(object)</p>
<h4 id="Python-的传参是传值还是传址？"><a href="#Python-的传参是传值还是传址？" class="headerlink" title="Python 的传参是传值还是传址？"></a>Python 的传参是传值还是传址？</h4><p>Python 中的传参即不是传值也不是传地址，传的是对象的引用。</p>
<h4 id="Python-中的元类-metaclass-使用举例"><a href="#Python-中的元类-metaclass-使用举例" class="headerlink" title="Python 中的元类 (metaclass) 使用举例"></a>Python 中的元类 (metaclass) 使用举例</h4><p>可以使用元类实现一个单例模式，代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span><span class="hljs-params">(type)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, *args, **kwargs)</span>:</span><br>        print(<span class="hljs-string">"in init"</span>)<br>        self.__instance = <span class="hljs-literal">None</span><br>        super(Singleton, self).__init__(*args, **kwargs)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__call__</span><span class="hljs-params">(self, *args, **kwargs)</span>:</span><br>        print(<span class="hljs-string">"in call"</span>)<br>        <span class="hljs-keyword">if</span> self.__instance <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            self.__instance = super(Singleton, self).__call__(*args, **kwargs)<br>        print(self.__instance)<br>        <span class="hljs-keyword">return</span> self.__instance<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span><span class="hljs-params">(metaclass=Singleton)</span>:</span><br>    <span class="hljs-keyword">pass</span><br><br>f1 = Foo()<br>f2 = Foo()<br>print(f1 <span class="hljs-keyword">is</span> f2)<br></code></pre></td></tr></table></figure>



<h4 id="简述-any-和-all-方法"><a href="#简述-any-和-all-方法" class="headerlink" title="简述 any() 和 all() 方法"></a>简述 any() 和 all() 方法</h4><p>any(x)：判断 x 对象是否为空对象，如果都为空、0、false，则返回 false，如果不都为空、0、false，则返回 true。 all(x)：如果 all(x) 参数 x 对象的所有元素不为 0、’’、False 或者 x 为空对象，则返回 True，否则返回 False。</p>
<h4 id="filter-方法求出列表所有奇数并构造新列表，a-1-2-3-4-5-6-7-8-9-10"><a href="#filter-方法求出列表所有奇数并构造新列表，a-1-2-3-4-5-6-7-8-9-10" class="headerlink" title="filter 方法求出列表所有奇数并构造新列表，a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"></a>filter 方法求出列表所有奇数并构造新列表，a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]<br><br>print(list(filter(<span class="hljs-keyword">lambda</span> num: num % <span class="hljs-number">2</span> &gt; <span class="hljs-number">0</span>, a)))<br></code></pre></td></tr></table></figure>



<h4 id="什么是猴子补丁？"><a href="#什么是猴子补丁？" class="headerlink" title="什么是猴子补丁？"></a>什么是猴子补丁？</h4><p>猴子补丁（monkey patching)：在运行时动态修改模块、类或函数，通常是添加功能或修正缺陷。猴子补丁在代码运行时内存中）发挥作用，不会修改源码，因此只对当前运行的程序实例有效。因为猴子补丁破坏了封装，而且容易导致程序与补丁代码的实现细节紧密耦合，所以被视为临时的变通方案，不是集成代码的推荐方式。</p>
<h4 id="在-Python-中是如何管理内存的？"><a href="#在-Python-中是如何管理内存的？" class="headerlink" title="在 Python 中是如何管理内存的？"></a>在 Python 中是如何管理内存的？</h4><p>垃圾回收：Python 不像 C++，Java 等语言一样，他们可以不用事先声明变量类型而直接对变量进行赋值。对 Python 语言来讲，对象的类型和内存都是在运行时确定的。这也是为什么我们称 Python 语言为动态类型的原因（这里我们把动态类型可以简单的归结为对变量内存地址的分配是在运行时自动判断变量类型并对变量进行赋值）。</p>
<p>引用计数：Python 采用了类似 Windows 内核对象一样的方式来对内存进行管理。每一个对象，都维护这一个对指向该对对象的引用的计数。当变量被绑定在一个对象上的时候，该变量的引用计数就是 1，(还有另外一些情况也会导致变量引用计数的增加)，系统会自动维护这些标签，并定时扫描，当某标签的引用计数变为 0 的时候，该对就会被回收。</p>
<ul>
<li>内存池机制 Python 的内存机制以金字塔行，1、2 层主要有操作系统进行操作</li>
<li>第 0 层是 C 中的 malloc，free 等内存分配和释放函数进行操作</li>
<li>第 1 层和第 2 层是内存池，有 Python 的接口函数 PyMem_Malloc 函数实现，当对象小于 256K 时有该层直接分配内存</li>
<li>第 3 层是最上层，也就是我们对 Python 对象的直接操作</li>
<li>在 C 中如果频繁的调用 malloc 与 free 时,是会产生性能问题的.再加上频繁的分配与释放小块的内存会产生内存碎片。Python 在这里主要干的工作有：<ul>
<li>如果请求分配的内存在 1~256 字节之间就使用自己的内存管理系统,否则直接使用 malloc。</li>
<li>这里还是会调用 malloc 分配内存，但每次会分配一块大小为 256k 的大块内存。</li>
</ul>
</li>
<li>经由内存池登记的内存到最后还是会回收到内存池，并不会调用 C 的 free 释放掉以便下次使用。对于简单的 Python 对象，例如数值、字符串，元组（tuple 不允许被更改)采用的是复制的方式(深拷贝?)，也就是说当将另一个变量 B 赋值给变量 A 时，虽然 A 和 B 的内存空间仍然相同，但当 A 的值发生变化时，会重新给 A 分配空间，A 和 B 的地址变得不再相同。</li>
</ul>
<h4 id="当退出-Python-时是否释放所有内存分配？"><a href="#当退出-Python-时是否释放所有内存分配？" class="headerlink" title="当退出 Python 时是否释放所有内存分配？"></a>当退出 Python 时是否释放所有内存分配？</h4><p>不是的，循环引用其他对象或引用自全局命名空间的对象的模块，在 Python 退出时并非完全释放。</p>
<p>另外，也不会释放 c 库保留的内存部分</p>
<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><h4 id="1）使用正则表达式匹配出-lt-html-gt-lt-h1-gt-www-baidu-com-lt-h1-gt-lt-html-gt-中的地址（2）a-”张明-98-分”，用-re-sub，将-98-替换为-100"><a href="#1）使用正则表达式匹配出-lt-html-gt-lt-h1-gt-www-baidu-com-lt-h1-gt-lt-html-gt-中的地址（2）a-”张明-98-分”，用-re-sub，将-98-替换为-100" class="headerlink" title="1）使用正则表达式匹配出&lt;html&gt;&lt;h1&gt;www.baidu.com&lt;/h1&gt;&lt;/html&gt;中的地址（2）a=”张明 98 分”，用 re.sub，将 98 替换为 100"></a>1）使用正则表达式匹配出<code>&lt;html&gt;&lt;h1&gt;www.baidu.com&lt;/h1&gt;&lt;/html&gt;</code>中的地址（2）a=”张明 98 分”，用 re.sub，将 98 替换为 100</h4><p>(1)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br>s = <span class="hljs-string">"&lt;html&gt;&lt;h1&gt;www.baidu.com&lt;/h1&gt;&lt;/html&gt;"</span><br>print(re.findall(<span class="hljs-string">".*?&lt;h1&gt;(.*?)&lt;/h1&gt;&lt;/html&gt;"</span>, s))<br></code></pre></td></tr></table></figure>

<p>(2)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br>a=<span class="hljs-string">"张明 98 分"</span><br>print(re.sub(<span class="hljs-string">"\d+"</span>, <span class="hljs-string">"100"</span>, a))<br></code></pre></td></tr></table></figure>



<h4 id="正则表达式匹配中-和-匹配区别？"><a href="#正则表达式匹配中-和-匹配区别？" class="headerlink" title="正则表达式匹配中(.)和(.?)匹配区别？"></a>正则表达式匹配中(.<em>)和(.</em>?)匹配区别？</h4><p>(.<em>) 为贪婪模式极可能多的匹配内容 ,(.</em>?) 为非贪婪模式又叫懒惰模式，一般匹配到结果就好，匹配字符的少为主</p>
<h4 id="写一段匹配邮箱的正则表达式"><a href="#写一段匹配邮箱的正则表达式" class="headerlink" title="写一段匹配邮箱的正则表达式"></a>写一段匹配邮箱的正则表达式</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br>a = <span class="hljs-string">"example_001@gmail.com"</span><br><br>pat = re.compile(<span class="hljs-string">"^[a-zA-Z0-9]+[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$"</span>)<br>print(pat.findall(a))<br><br><span class="hljs-comment"># 通用邮箱正则匹配</span><br><span class="hljs-string">"""(?：[a-z0-9!#$%&amp;'*+/=?^_`&#123;|&#125;~-]+(?：\.[a-z0-9!#$%&amp;'*+/=?^_`&#123;|&#125;~-]+)*|"(?：[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?：(?：[a-z0-9](?：[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?：[a-z0-9-]*[a-z0-9])?|\[(?：(?：25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.)&#123;3&#125;(?：25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]：(?：[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])"""</span><br></code></pre></td></tr></table></figure>



<h3 id="其他内容"><a href="#其他内容" class="headerlink" title="其他内容"></a>其他内容</h3><h4 id="解释一下-Python-中-pass-语句的作用？"><a href="#解释一下-Python-中-pass-语句的作用？" class="headerlink" title="解释一下 Python 中 pass 语句的作用？"></a>解释一下 Python 中 pass 语句的作用？</h4><p>pass 实际上就是一个占位符，在写一个函数但是不确定里面写啥的时候，这个时候可以使用 pass。</p>
<h4 id="Python-中的作用域"><a href="#Python-中的作用域" class="headerlink" title="Python 中的作用域"></a>Python 中的作用域</h4><p>Python 中，一个变量的作用域总是由在代码中被赋值的地方所决定 当 Python 遇到一个变量的话它会按照这的顺序进行搜索 本地作用域(Local)—&gt;当前作用域被嵌入的本地作用域(Enclosing locals)—&gt;全局/模块作用域(Global)—&gt;内置作用域(Built-<strong>in</strong>)</p>
<h4 id="三元运算写法和应用场景？"><a href="#三元运算写法和应用场景？" class="headerlink" title="三元运算写法和应用场景？"></a>三元运算写法和应用场景？</h4><p>Python 中的三元运算又称三目运算，是对简单的条件语句的简写。 是一种比较 Pythonic 的学法，形式为：val = 1 if 条件成立 else 2 代码示例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span><span class="hljs-params">(val)</span>:</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span> <span class="hljs-keyword">if</span> val &gt; <span class="hljs-number">60</span> <span class="hljs-keyword">else</span> <span class="hljs-literal">False</span><br><br>print(run(<span class="hljs-number">100</span>))<br></code></pre></td></tr></table></figure>



<h4 id="了解-enumerate-么？"><a href="#了解-enumerate-么？" class="headerlink" title="了解 enumerate 么？"></a>了解 enumerate 么？</h4><p>enumerate 可以在迭代一个对象的时候，同时获取当前对象的索引和值。 代码示例如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> string <span class="hljs-keyword">import</span> ascii_lowercase<br><br><span class="hljs-keyword">for</span> idx, i <span class="hljs-keyword">in</span> enumerate(ascii_lowercase):<br>    print(idx, i)<br></code></pre></td></tr></table></figure>



<h4 id="列举-5-个-Python-中的标准模块"><a href="#列举-5-个-Python-中的标准模块" class="headerlink" title="列举 5 个 Python 中的标准模块"></a>列举 5 个 Python 中的标准模块</h4><p>pathlib：路径操作模块，比 os 模块拼接方便。 urllib：网络请求模块，包括对 url 的结构解析。 asyncio： Python 的异步库，基于事件循环的协程模块。 re：正则表达式模块。 itertools：提供了操作生成器的一些模块。</p>
<h4 id="如何在函数中设置一个全局变量"><a href="#如何在函数中设置一个全局变量" class="headerlink" title="如何在函数中设置一个全局变量"></a>如何在函数中设置一个全局变量</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">count = <span class="hljs-number">0</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span><span class="hljs-params">()</span>:</span><br>    <span class="hljs-keyword">global</span> count<br>    count = count + <span class="hljs-number">1</span><br><br>    print(count)<br><br>run()<br></code></pre></td></tr></table></figure>



<h4 id="pathlib-的用法举例"><a href="#pathlib-的用法举例" class="headerlink" title="pathlib 的用法举例"></a>pathlib 的用法举例</h4><p>具体已收录在印象笔记里</p>
<h4 id="Python-中的异常处理，写一个简单的应用场景"><a href="#Python-中的异常处理，写一个简单的应用场景" class="headerlink" title="Python 中的异常处理，写一个简单的应用场景"></a>Python 中的异常处理，写一个简单的应用场景</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-number">1</span> + <span class="hljs-string">''</span><br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    print(e)<br></code></pre></td></tr></table></figure>



<h4 id="Python-中递归的最大次数，那如何突破呢？"><a href="#Python-中递归的最大次数，那如何突破呢？" class="headerlink" title="Python 中递归的最大次数，那如何突破呢？"></a>Python 中递归的最大次数，那如何突破呢？</h4><p>默认最大1000次，突破方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br>sys.setrecursionlimit(<span class="hljs-number">1500</span>)<br></code></pre></td></tr></table></figure>

<p>另外需要注意的是 sys.setrecursionlimit() 只是修改解释器在解释时允许的最大递归次数，此外，限制最大递归次数的还和操作系统有关。</p>
<h4 id="什么是面向对象的-mro"><a href="#什么是面向对象的-mro" class="headerlink" title="什么是面向对象的 mro"></a>什么是面向对象的 mro</h4><p>Python 是支持面向对象编程的，同时也是支持多重继承的。一般我们通过调用类对象的 mro()方法获取其继承关系。</p>
<h4 id="isinstance-作用以及应用场景？"><a href="#isinstance-作用以及应用场景？" class="headerlink" title="isinstance 作用以及应用场景？"></a>isinstance 作用以及应用场景？</h4><p>isinstance 是判断一个对象是否为另一个对象的子类的，例如我们知道在 Python3 中 bool 类型其实是 int 的子类，所以我们可以对其检测。</p>
<h4 id="什么是断言？应用场景？"><a href="#什么是断言？应用场景？" class="headerlink" title="什么是断言？应用场景？"></a>什么是断言？应用场景？</h4><p>在 Python 中是断言语句 assert 实现此功能，一般在表达式为 True 的情况下，程序才能通过。</p>
<h4 id="lambda-表达式格式以及应用场景？"><a href="#lambda-表达式格式以及应用场景？" class="headerlink" title="lambda 表达式格式以及应用场景？"></a>lambda 表达式格式以及应用场景？</h4><p>lambda 表达式其实就是一个匿名函数,在函数编程中经常作为参数使用。</p>
<h4 id="新式类和旧式类的区别"><a href="#新式类和旧式类的区别" class="headerlink" title="新式类和旧式类的区别"></a>新式类和旧式类的区别</h4><p>Python 2.x 中默认都是经典类，只有显式继承了 object 才是新式类，Python 3.x 中默认都是新式类，经典类被移除，不必显式的继承 object。 新式类都从 object 继承，经典类不需要。 新式类的 MRO(method resolution order 基类搜索顺序)算法采用 C3 算法广度优先搜索，而旧式类的 MRO 算法是采用深度优先搜索。 新式类相同父类只执行一次构造函数，经典类重复执行多次。</p>
<h4 id="dir-是干什么用的？"><a href="#dir-是干什么用的？" class="headerlink" title="dir()是干什么用的？"></a>dir()是干什么用的？</h4><p>当在使用某一个对象不知道有哪些属性或者方法可以使用时，此时可以通过 dir() 方法进行查看。</p>
<h4 id="一个包里有三个模块，demo1-py、demo2-py、demo3-py，但使用-from-tools-import-导入模块时，如何保证只有-demo1、demo3-被导入了。"><a href="#一个包里有三个模块，demo1-py、demo2-py、demo3-py，但使用-from-tools-import-导入模块时，如何保证只有-demo1、demo3-被导入了。" class="headerlink" title="一个包里有三个模块，demo1.py、demo2.py、demo3.py，但使用 from tools import *导入模块时，如何保证只有 demo1、demo3 被导入了。"></a>一个包里有三个模块，demo1.py、demo2.py、demo3.py，但使用 from tools import *导入模块时，如何保证只有 demo1、demo3 被导入了。</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 在__init__.py文件中加入</span><br>__all__ = [<span class="hljs-string">"demo1.py"</span>, <span class="hljs-string">"demo3.py"</span>]<br></code></pre></td></tr></table></figure>



<h4 id="列举-5-个-Python-中的异常类型以及其含义"><a href="#列举-5-个-Python-中的异常类型以及其含义" class="headerlink" title="列举 5 个 Python 中的异常类型以及其含义"></a>列举 5 个 Python 中的异常类型以及其含义</h4><p>AttributeError 对象没有这个属性 </p>
<p>NotImplementedError 尚未实现的方法</p>
<p> <strong>StopIteration</strong> 迭代器没有更多的值</p>
<p> <strong>TypeError</strong> 对类型无效的操作</p>
<p> IndentationError 缩进错误</p>
<h4 id="copy-和-deepcopy-的区别是什么？"><a href="#copy-和-deepcopy-的区别是什么？" class="headerlink" title="copy 和 deepcopy 的区别是什么？"></a>copy 和 deepcopy 的区别是什么？</h4><p>copy.copy()浅拷贝，只拷贝父对象，不会拷贝对象的内部的子对象。 copy.deepcopy()深拷贝，拷贝对象及其子对象。</p>
<h4 id="代码中经常遇到的args-kwargs-含义及用法。"><a href="#代码中经常遇到的args-kwargs-含义及用法。" class="headerlink" title="代码中经常遇到的args, *kwargs 含义及用法。"></a>代码中经常遇到的<em>args, *</em>kwargs 含义及用法。</h4><p>在函数定义中使用 <em>args 和*</em>kwargs 传递可变长参数。 <em>args 用来将参数打包成 tuple 给函数体调用。 *</em>kwargs 打包关键字参数成 dict 给函数体调用。</p>
<h4 id="Python-中会有函数或成员变量包含单下划线前缀和结尾，和双下划线前缀结尾，区别是什么"><a href="#Python-中会有函数或成员变量包含单下划线前缀和结尾，和双下划线前缀结尾，区别是什么" class="headerlink" title="Python 中会有函数或成员变量包含单下划线前缀和结尾，和双下划线前缀结尾，区别是什么?"></a>Python 中会有函数或成员变量包含单下划线前缀和结尾，和双下划线前缀结尾，区别是什么?</h4><p>“单下划线” 开始的成员变量叫做保护变量，意思是只有类对象和子类对象自己能访问到这些变量； “双下划线” 开始的是私有成员，意思是只有类对象自己能访问，连子类对象也不能访问到这个数据。</p>
<p>以单下划线开头（_foo）的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用“from xxx import *”而导入；以双下划线开头的（__foo）代表类的私有成员；</p>
<p>以双下划线开头和结尾的（_<em>foo*</em>）代表 Python 里特殊方法专用的标识，如 _<strong>***init</strong>（）代表类的构造函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>：</span><br><span class="hljs-class">    """<span class="hljs-title">docstring</span> <span class="hljs-title">for</span> <span class="hljs-title">ClassName</span>"""</span><br><span class="hljs-class">    <span class="hljs-title">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>：</span><br>       self.__age = 12<br>       self._sex = <span class="hljs-number">12</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_sex</span><span class="hljs-params">(self)</span>：</span><br><span class="hljs-function">        <span class="hljs-title">return</span> "男"</span><br><span class="hljs-function">    <span class="hljs-title">def</span> <span class="hljs-title">set_age</span><span class="hljs-params">(self,age)</span>：</span><br>        self.__age = age<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_age</span><span class="hljs-params">(self)</span>：</span><br><span class="hljs-function">        <span class="hljs-title">return</span> <span class="hljs-title">self</span>.<span class="hljs-title">__age</span>   </span><br><span class="hljs-function"></span><br>if __name__ == '__main__'：<br>    p=Person()<br>    print(p._sex)<br>    <span class="hljs-comment">#print(p.__age)</span><br>    <span class="hljs-comment">#Python 自动将__age 解释成 _Person__age,于是我们用 _Person__age 访问，这次成功。</span><br>    print(p._Person__age)<br></code></pre></td></tr></table></figure>



<h4 id="w、a-、wb-文件写入模式的区别"><a href="#w、a-、wb-文件写入模式的区别" class="headerlink" title="w、a+、wb 文件写入模式的区别"></a>w、a+、wb 文件写入模式的区别</h4><p> w 表示写模式支持写入字符串，如果文件存在则覆盖。 a+ 和 w 的功能类型不过如果文件存在的话内容不会覆盖而是追加。 wb 是写入二进制字节类型的数据。</p>
<h4 id="举例-sort-和-sorted-的区别"><a href="#举例-sort-和-sorted-的区别" class="headerlink" title="举例 sort 和 sorted 的区别"></a>举例 sort 和 sorted 的区别</h4><p>相同之处 sort 和 sorted 都可以对列表元素排序，sort() 与 sorted() 的不同在于，sort 是在原位重新排列列表，而 sorted() 是产生一个新的列表。 sort 是应用在 list 上的方法，sorted 可以对所有可迭代的对象进行排序操作。</p>
<p>list 的 sort 方法返回的是对已经存在的列表进行操作，而内建函数 sorted 方法返回的是一个新的 list，而不是在原来的基础上进行的操作。</p>
<h4 id="什么是负索引？"><a href="#什么是负索引？" class="headerlink" title="什么是负索引？"></a>什么是负索引？</h4><p>负索引一般表示的是从后面取元素。</p>
<h4 id="pprint-模块是干什么的？"><a href="#pprint-模块是干什么的？" class="headerlink" title="pprint 模块是干什么的？"></a>pprint 模块是干什么的？</h4><p>pprint 是 print 函数的美化版，可以通过 import pprint 导入。</p>
<h4 id="解释一下-Python-中的赋值运算符"><a href="#解释一下-Python-中的赋值运算符" class="headerlink" title="解释一下 Python 中的赋值运算符"></a>解释一下 Python 中的赋值运算符</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 通过下面的代码列举出所有的赋值运算符</span><br>a=<span class="hljs-number">7</span><br>a+=<span class="hljs-number">1</span><br>print(a)<br>a-=<span class="hljs-number">1</span><br>print(a)<br>a*=<span class="hljs-number">2</span><br>print(a)<br>a/=<span class="hljs-number">2</span><br>print(a)<br>a**=<span class="hljs-number">2</span><br>print(a)<br>a//=<span class="hljs-number">3</span><br>print(a)<br>a%=<span class="hljs-number">4</span><br>print(a)<br></code></pre></td></tr></table></figure>



<h4 id="解释一下-Python-中的逻辑运算符"><a href="#解释一下-Python-中的逻辑运算符" class="headerlink" title="解释一下 Python 中的逻辑运算符"></a>解释一下 Python 中的逻辑运算符</h4><p>Python 中有三个逻辑运算符：and、or、not</p>
<h4 id="在-Python-中如何使用多进制数字？"><a href="#在-Python-中如何使用多进制数字？" class="headerlink" title="在 Python 中如何使用多进制数字？"></a>在 Python 中如何使用多进制数字？</h4><p>我们在 Python 中，除十进制外还可以使用二进制、八进制和十六进制</p>
<ul>
<li><p>二进制数字由 0 和 1 组成，我们使用 0b 或 0B 前缀表示二进制数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">print(<span class="hljs-number">0b10101</span>)<br></code></pre></td></tr></table></figure>
</li>
<li><p>使用 bin()函数将一个数字转换为它的二进制形式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">print(bin(<span class="hljs-number">0xf</span>))<br></code></pre></td></tr></table></figure>
</li>
<li><p>八进制数由数字 0-7 组成，用前缀 0o 或 0O 表示 8 进制数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">print(oct(<span class="hljs-number">8</span>))<br></code></pre></td></tr></table></figure>
</li>
<li><p>十六进数由数字 0-15 组成，用前缀 0x 或者 0X 表示 16 进制数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">print(hex(<span class="hljs-number">16</span>))<br></code></pre></td></tr></table></figure>



</li>
</ul>
<h4 id="怎样声明多个变量并赋值？"><a href="#怎样声明多个变量并赋值？" class="headerlink" title="怎样声明多个变量并赋值？"></a>怎样声明多个变量并赋值？</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">a, b, c = <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure>



<h3 id="算法和数据结构"><a href="#算法和数据结构" class="headerlink" title="算法和数据结构"></a>算法和数据结构</h3><h4 id="已知："><a href="#已知：" class="headerlink" title="已知："></a>已知：</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">AList = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br>BSet = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;<br></code></pre></td></tr></table></figure>

<p>(1) 从 AList 和 BSet 中 查找 4，最坏时间复杂度哪个大？ (2) 从 AList 和 BSet 中 插入 4，最坏时间复杂度哪个大？</p>
<p>(1) 对于查找，列表和集合的最坏时间复杂度都是 O(n)，所以一样的。 (2) 列表操作插入的最坏时间复杂度为 o(n),集合为 o(1)，所以 Alist 大。 set 是哈希表所以操作的复杂度基本上都是 o(1)。</p>
<h4 id="用-Python-实现一个二分查找的函数"><a href="#用-Python-实现一个二分查找的函数" class="headerlink" title="用 Python 实现一个二分查找的函数"></a>用 Python 实现一个二分查找的函数</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">binary_search</span><span class="hljs-params">(arr, target)</span>:</span><br>    left = <span class="hljs-number">0</span><br>    right = len(arr) - <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">while</span> left &lt;= right:<br>      	<span class="hljs-comment"># (n-m)/2 + m = (n + m)/2</span><br>        mid = (left + right) // <span class="hljs-number">2</span><br>        <span class="hljs-keyword">if</span> arr[mid] &lt; target:<br>            left = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> arr[mid] &gt; target:<br>            right = mid - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            print(<span class="hljs-string">f"index: <span class="hljs-subst">&#123;mid&#125;</span>, value: <span class="hljs-subst">&#123;arr[mid]&#125;</span>"</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>arr = [<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>]<br><br>binary_search(arr, <span class="hljs-number">8</span>)<br></code></pre></td></tr></table></figure>



<h4 id="Python-单例模式的实现方法"><a href="#Python-单例模式的实现方法" class="headerlink" title="Python 单例模式的实现方法"></a>Python 单例模式的实现方法</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Book</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__new__</span><span class="hljs-params">(cls, title)</span>:</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> hasattr(cls, <span class="hljs-string">"_ins"</span>):<br>            cls._ins = super().__new__(cls)<br>        print(<span class="hljs-string">'in __new__'</span>)<br>        <span class="hljs-keyword">return</span> cls._ins<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, title)</span>:</span><br>        print(<span class="hljs-string">"in __init__"</span>)<br>        super().__init__()<br>        self.title = title<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    b = Book(<span class="hljs-string">'The Spider Book'</span>)<br>    b2 = Book(<span class="hljs-string">'The Flask Book'</span>)<br>    print(id(b))<br>    print(id(b2))<br>    print(b.title)<br>    print(b2.title)<br></code></pre></td></tr></table></figure>

<p>线程安全单例模式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">synchronized</span><span class="hljs-params">(func)</span>:</span><br>    func.__lock__ = threading.Lock()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">lock_func</span><span class="hljs-params">(*args, **kwargs)</span>:</span><br>        <span class="hljs-keyword">with</span> func.__lock__:<br>            <span class="hljs-keyword">return</span> func(*args, **kwargs)<br><br>    <span class="hljs-keyword">return</span> lock_func<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span><span class="hljs-params">(object)</span>:</span><br>    instance = <span class="hljs-literal">None</span><br><br><span class="hljs-meta">    @synchronized</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__new__</span><span class="hljs-params">(cls, *args, **kwargs)</span>:</span><br>        <span class="hljs-string">"""</span><br><span class="hljs-string">        :type kwargs: object</span><br><span class="hljs-string">        """</span><br>        <span class="hljs-keyword">if</span> cls.instance <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            cls.instance = super().__new__(cls)<br>        <span class="hljs-keyword">return</span> cls.instance<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, num)</span>:</span><br>        self.a = num + <span class="hljs-number">5</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">printf</span><span class="hljs-params">(self)</span>:</span><br>        print(self.a)<br></code></pre></td></tr></table></figure>



<h4 id="使用-Python-实现一个斐波那契数列"><a href="#使用-Python-实现一个斐波那契数列" class="headerlink" title="使用 Python 实现一个斐波那契数列"></a>使用 Python 实现一个斐波那契数列</h4><p>斐波那契数列：数列从第 3 项开始，每一项都等于前两项之和。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">fibonacci</span><span class="hljs-params">(num)</span>:</span><br>    a, b = <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>    output = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(num):<br>        a, b = b, a + b<br>        output.append(b)<br>    print(output)<br><br>fibonacci(<span class="hljs-number">5</span>)<br></code></pre></td></tr></table></figure>



<h4 id="找出列表中的重复数字"><a href="#找出列表中的重复数字" class="headerlink" title="找出列表中的重复数字"></a>找出列表中的重复数字</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">-3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">95</span>, <span class="hljs-number">95</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">-3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>]<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">duplicate</span><span class="hljs-params">(arr)</span>:</span><br><br>    <span class="hljs-keyword">if</span> arr <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> len(arr) &lt;= <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> &#123;&#125;<br><br>    num_set = set()<br>    duplication = &#123;&#125;<br><br>    <span class="hljs-keyword">for</span> idx, i <span class="hljs-keyword">in</span> enumerate(arr):<br>        <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> num_set:<br>            num_set.add(i)<br>        <span class="hljs-keyword">else</span>:<br>            duplication[idx] = i<br><br>    <span class="hljs-keyword">return</span> duplication<br><br>print(duplicate(arr))<br></code></pre></td></tr></table></figure>



<h4 id="找出列表中的单个数字"><a href="#找出列表中的单个数字" class="headerlink" title="找出列表中的单个数字"></a>找出列表中的单个数字</h4><p>使用位运算做遍历异或操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find_single</span><span class="hljs-params">(arr)</span>:</span><br><br>    result = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arr:<br>        result ^= i<br><br>    <span class="hljs-keyword">if</span> result == <span class="hljs-number">0</span>:<br>        print(<span class="hljs-string">"没有落单元素"</span>)<br>    <span class="hljs-keyword">else</span>:<br>        print(<span class="hljs-string">f"落单元素 <span class="hljs-subst">&#123;result&#125;</span>"</span>)<br><br>find_single(arr)<br></code></pre></td></tr></table></figure>



<h4 id="根据前序遍历和中序遍历的结果，请重建出该二叉树"><a href="#根据前序遍历和中序遍历的结果，请重建出该二叉树" class="headerlink" title="根据前序遍历和中序遍历的结果，请重建出该二叉树"></a>根据前序遍历和中序遍历的结果，请重建出该二叉树</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">pre_order = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]<br>mid_order = [<span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">6</span>]<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span>:</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, data, left, right)</span>:</span><br>    self.data = data<br>    self.left = left<br>    self.right = right<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">construct_tree</span><span class="hljs-params">(pre_order, mid_order)</span>:</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> pre_order:<br>        <span class="hljs-keyword">return</span><br><br>    <span class="hljs-comment"># 根据先序遍历确定当前树根节点</span><br>    root_data = pre_order[<span class="hljs-number">0</span>]<br><br>    <span class="hljs-comment"># 在中序遍历中定位当前树的根节点位置</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(mid_order)):<br>        <span class="hljs-keyword">if</span> mid_order[i] == root_data:<br>            <span class="hljs-keyword">break</span><br><br>    left = construct_tree(pre_order[<span class="hljs-number">1</span>: <span class="hljs-number">1</span>+i], mid_order[:i])<br>    right = construct_tree(pre_order[<span class="hljs-number">1</span>+i:], mid_order[i+<span class="hljs-number">1</span>:])<br><br>    <span class="hljs-keyword">return</span> Node(root_data, left, right)<br></code></pre></td></tr></table></figure>



<h4 id="写一个冒泡排序"><a href="#写一个冒泡排序" class="headerlink" title="写一个冒泡排序"></a>写一个冒泡排序</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">arr = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">55</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>]<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bubble_sort</span><span class="hljs-params">(arr)</span>:</span><br>    n = len(arr)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(n - <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(n - i <span class="hljs-number">-1</span>):<br>            <span class="hljs-keyword">if</span> arr[j] &gt; arr[j+<span class="hljs-number">1</span>]:<br>                arr[j], arr[j+<span class="hljs-number">1</span>] = arr[j+<span class="hljs-number">1</span>], arr[j]<br>        print(arr)<br><br>    print(arr)<br><br>bubble_sort(arr)<br></code></pre></td></tr></table></figure>



<h4 id="写一个快速排序"><a href="#写一个快速排序" class="headerlink" title="写一个快速排序"></a>写一个快速排序</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(arrays, l, r)</span>:</span><br>    <span class="hljs-keyword">if</span> l &lt; r:<br>        q = partitions(arrays, l, r)<br>        quick_sort(arrays, l, q - <span class="hljs-number">1</span>)<br>        quick_sort(arrays, q + <span class="hljs-number">1</span>, r)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">partitions</span><span class="hljs-params">(arrays, l, r)</span>:</span><br>    val = arrays[r]<br>    idx = l<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(l, r):<br>        <span class="hljs-keyword">if</span> arrays[i] &lt; val:<br>            arrays[idx], arrays[i] = arrays[i], arrays[idx]<br>            idx += <span class="hljs-number">1</span><br><br>    arrays[idx],arrays[r] = arrays[r], arrays[idx]<br><br>    <span class="hljs-keyword">return</span> idx<br></code></pre></td></tr></table></figure>



<h4 id="写一个拓扑排序"><a href="#写一个拓扑排序" class="headerlink" title="写一个拓扑排序"></a>写一个拓扑排序</h4><h4 id="Python-实现一个二进制计算"><a href="#Python-实现一个二进制计算" class="headerlink" title="Python 实现一个二进制计算"></a>Python 实现一个二进制计算</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">binary_add</span><span class="hljs-params">(a, b)</span>:</span><br>    result = bin(int(a, <span class="hljs-number">2</span>) + int(b, <span class="hljs-number">2</span>))<br>    <span class="hljs-keyword">return</span> result[<span class="hljs-number">2</span>:]<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    a = input(<span class="hljs-string">"a: "</span>)<br>    b = input(<span class="hljs-string">"a: "</span>)<br>    print(binary_add(a, b))<br></code></pre></td></tr></table></figure>



<h4 id="有一组“-”和“-”符号，要求将“-”排到左边，“-”排到右边，写出具体的实现方法。"><a href="#有一组“-”和“-”符号，要求将“-”排到左边，“-”排到右边，写出具体的实现方法。" class="headerlink" title="有一组“+”和“-”符号，要求将“+”排到左边，“-”排到右边，写出具体的实现方法。"></a>有一组“+”和“-”符号，要求将“+”排到左边，“-”排到右边，写出具体的实现方法。</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">"++++++----+++----"</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func1</span><span class="hljs-params">(s)</span>:</span><br><br>    ns = s.replace(<span class="hljs-string">'+'</span>, <span class="hljs-string">"0"</span>).replace(<span class="hljs-string">'-'</span>, <span class="hljs-string">'1'</span>)<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">''</span>.join(sorted(ns)).replace(<span class="hljs-string">'0'</span>, <span class="hljs-string">"+"</span>).replace(<span class="hljs-string">'1'</span>, <span class="hljs-string">'-'</span>)<br><br>print(func1(s))<br></code></pre></td></tr></table></figure>

<h4 id="单链表反转"><a href="#单链表反转" class="headerlink" title="单链表反转"></a>单链表反转</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, val=None)</span>:</span><br>        self.val = val<br>        self.next = <span class="hljs-literal">None</span><br><br>n1 = Node(<span class="hljs-number">1</span>)<br>n2 = Node(<span class="hljs-number">2</span>)<br>n3 = Node(<span class="hljs-number">3</span>)<br>n4 = Node(<span class="hljs-number">4</span>)<br>n5 = Node(<span class="hljs-number">5</span>)<br><br>n1.next = n2<br>n2.next = n3<br>n3.next = n4<br>n4.next = n5<br><br>root = n1<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingleLinkList</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, root)</span>:</span><br>        self.head = root<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">output_link</span><span class="hljs-params">(self)</span>:</span><br>        current = self.head<br>        <span class="hljs-keyword">while</span> current:<br>            print(current.val)<br>            current = current.next<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reverse</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-string">"""</span><br><span class="hljs-string">        单链表反转</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        """</span><br>        pre = <span class="hljs-literal">None</span><br>        current = self.head<br>        <span class="hljs-keyword">while</span> current:<br>            tmp = current.next<br>            current.next = pre<br>            pre = current<br>            current = tmp<br>        self.head = pre<br><br>        self.output_link()<br></code></pre></td></tr></table></figure>

<h4 id="交叉链表求交点"><a href="#交叉链表求交点" class="headerlink" title="交叉链表求交点"></a>交叉链表求交点</h4><p>cur1、cur2，2 个指针的初始位置是链表 headA、headB 头结点，cur1、cur2 两个指针一直往后遍历。 直到 cur1 指针走到链表的末尾，然后 cur1 指向 headB； 直到 cur2 指针走到链表的末尾，然后 cur2 指向 headA； 然后再继续遍历； 每次 cur1、cur2 指向 None，则将 cur1、cur2 分别指向 headB、headA。 循环的次数越多，cur1、cur2 的距离越接近，直到 cur1 等于 cur2。则是两个链表的相交点。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, x)</span>:</span><br>        self.val = x<br>        self.next = <span class="hljs-literal">None</span><br><br>n1 = Node(<span class="hljs-number">1</span>)<br>n2 = Node(<span class="hljs-number">2</span>)<br>n3 = Node(<span class="hljs-number">3</span>)<br>n4 = Node(<span class="hljs-number">4</span>)<br>n5 = Node(<span class="hljs-number">5</span>)<br>n6 = Node(<span class="hljs-number">6</span>)<br>n7 = Node(<span class="hljs-number">7</span>)<br><br>n1.next = n7<br><br>n2.next = n3<br>n3.next = n4<br>n4.next = n5<br>n5.next = n6<br>n6.next = n7<br><br>head1 = n1<br>head2 = n2<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getIntersectionNode</span><span class="hljs-params">(head1, head2)</span>:</span><br>    cur1 = head1<br>    cur2 = head2<br><br>    <span class="hljs-keyword">while</span> cur1.val != cur2.val:<br>        cur1 = cur1.next <span class="hljs-keyword">if</span> cur1.next <span class="hljs-keyword">else</span> head1<br>        cur2 = cur2.next <span class="hljs-keyword">if</span> cur2.next <span class="hljs-keyword">else</span> head2<br><br>    print(cur1.val)<br></code></pre></td></tr></table></figure>

<h4 id="用队列实现栈"><a href="#用队列实现栈" class="headerlink" title="用队列实现栈"></a>用队列实现栈</h4><p>一个队列实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> queue <span class="hljs-keyword">import</span> Queue<br><br><span class="hljs-comment"># 1个队列实现栈</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyStack</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span><br>        self._q = Queue()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">push</span><span class="hljs-params">(self, val)</span>:</span><br>        <span class="hljs-string">"""</span><br><span class="hljs-string">        入栈</span><br><span class="hljs-string">        :param val:</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        """</span><br>        self._q.put(val)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pop</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-string">"""</span><br><span class="hljs-string">        出栈</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        """</span><br>        count = self._q.qsize()<br>        <span class="hljs-keyword">if</span> count == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>        <span class="hljs-keyword">while</span> count &gt; <span class="hljs-number">1</span>:<br>            self._q.put(self._q.get())<br>            count -= <span class="hljs-number">1</span><br><br>        print(self._q.get())<br></code></pre></td></tr></table></figure>

<p>两个队列实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> queue <span class="hljs-keyword">import</span> Queue<br><br><span class="hljs-comment"># 2个队列实现栈</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyStack</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span><br>        self.q1 = Queue()<br>        self.q2 = Queue()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">push</span><span class="hljs-params">(self, val)</span>:</span><br>        <span class="hljs-string">"""</span><br><span class="hljs-string">        入栈</span><br><span class="hljs-string">        :param val:</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        """</span><br>        self.q1.put(val)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pop</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-string">"""</span><br><span class="hljs-string">        出栈</span><br><span class="hljs-string">        :return:</span><br><span class="hljs-string">        """</span><br>        <span class="hljs-keyword">if</span> self.q1.qsize() == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>        <span class="hljs-keyword">while</span> self.q1.qsize() &gt; <span class="hljs-number">1</span>:<br>            self.q2.put(self.q1.get())<br>        <span class="hljs-keyword">if</span> self.q1.qsize() == <span class="hljs-number">1</span>:<br>            res = self.q1.get()<br>            self.q1,self.q2 = self.q2, self.q1<br>            print(res)<br></code></pre></td></tr></table></figure>

<h4 id="找出数据流的中位数"><a href="#找出数据流的中位数" class="headerlink" title="找出数据流的中位数"></a>找出数据流的中位数</h4><p>对于一个升序排序的数组，中位数为左半部分的最大值，右半部分的最小值，而左右两部分可以是无需的，只要保证左半部分的数均小于右半部分即可。因此，左右两半部分分别可用最大堆、最小堆实现。</p>
<p>如果有奇数个数，则中位数放在左半部分；如果有偶数个数，则取左半部分的最大值、右边部分的最小值之平均值。</p>
<p>分两种情况讨论： 当目前有偶数个数字时，数字先插入最小堆，然后选择最小堆的最小值插入最大堆（第一个数字插入左半部分的最小堆）。</p>
<p>当目前有奇数个数字时，数字先插入最大堆，然后选择最大堆的最大值插入最小堆。 最大堆：根结点的键值是所有堆结点键值中最大者，且每个结点的值都比其孩子的值大。 最小堆：根结点的键值是所有堆结点键值中最小者，且每个结点的值都比其孩子的值小。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> heapq <span class="hljs-keyword">import</span> *<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span><br>        self.maxheap = []<br>        self.minheap = []<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Insert</span><span class="hljs-params">(self, num)</span>:</span><br>        <span class="hljs-keyword">if</span> (len(self.maxheap) + len(self.minheap)) &amp; <span class="hljs-number">0x1</span>:<br>            <span class="hljs-comment"># 总数为奇数</span><br>            <span class="hljs-keyword">if</span> len(self.minheap) &gt; <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">if</span> num &gt; self.minheap[<span class="hljs-number">0</span>]:<br>                    heappush(self.minheap, num)<br>                    heappush(self.maxheap, -self.minheap[<span class="hljs-number">0</span>])<br>                    heappop(self.minheap)<br>                <span class="hljs-keyword">else</span>:<br>                    heappush(self.maxheap, -num)<br>            <span class="hljs-keyword">else</span>:<br>                heappush(self.maxheap, -num)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> len(self.maxheap) &gt; <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">if</span> num &lt; -self.maxheap[<span class="hljs-number">0</span>]:<br>                    heappush(self.maxheap, -num)<br>                    heappush(self.minheap, -self.maxheap[<span class="hljs-number">0</span>])<br>                    heappop(self.maxheap)<br>                <span class="hljs-keyword">else</span>:<br>                    heappush(self.minheap, num)<br>            <span class="hljs-keyword">else</span>:<br>                heappush(self.minheap, num)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">GetMedian</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">if</span> (len(self.maxheap) + len(self.minheap)) &amp; <span class="hljs-number">0x1</span>:<br>            mid = self.minheap[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">else</span>:<br>            mid = (self.minheap[<span class="hljs-number">0</span>] - self.maxheap[<span class="hljs-number">0</span>]) / <span class="hljs-number">2</span><br>        <span class="hljs-keyword">return</span> mid<br></code></pre></td></tr></table></figure>

<h4 id="二叉搜索树中第-K-小的元素"><a href="#二叉搜索树中第-K-小的元素" class="headerlink" title="二叉搜索树中第 K 小的元素"></a>二叉搜索树中第 K 小的元素</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span>：</span><br><span class="hljs-class">    <span class="hljs-title">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, x)</span>：</span><br>        self.val = x<br>        self.left = <span class="hljs-literal">None</span><br>        self.right = <span class="hljs-literal">None</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>：</span><br>    count = 0<br>    nodeVal = <span class="hljs-number">0</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">kthSmallest</span><span class="hljs-params">(self, root, k)</span>：</span><br><span class="hljs-function">        """</span><br><span class="hljs-function">        ：<span class="hljs-title">type</span> <span class="hljs-title">root</span>： <span class="hljs-title">TreeNode</span></span><br><span class="hljs-function">        ：<span class="hljs-title">type</span> <span class="hljs-title">k</span>： <span class="hljs-title">int</span></span><br><span class="hljs-function">        ：<span class="hljs-title">rtype</span>： <span class="hljs-title">int</span></span><br><span class="hljs-function">        """</span><br><span class="hljs-function">        <span class="hljs-title">self</span>.<span class="hljs-title">dfs</span><span class="hljs-params">(root, k)</span></span><br><span class="hljs-function">        <span class="hljs-title">return</span> <span class="hljs-title">self</span>.<span class="hljs-title">nodeVal</span></span><br><span class="hljs-function"></span><br><span class="hljs-function">    <span class="hljs-title">def</span> <span class="hljs-title">dfs</span><span class="hljs-params">(self, node, k)</span>：</span><br>        if node != None：<br>            self.dfs(node.left, k)<br>            self.count = self.count + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> self.count == k：<br>                self.nodeVal = node.val<br>                <span class="hljs-comment"># 将该节点的左右子树置为 None,来结束递归，减少时间复杂度</span><br>                node.left = <span class="hljs-literal">None</span><br>                node.right = <span class="hljs-literal">None</span><br>            self.dfs(node.right, k)<br></code></pre></td></tr></table></figure>

<h3 id="爬虫相关"><a href="#爬虫相关" class="headerlink" title="爬虫相关"></a>爬虫相关</h3><h4 id="绕过selenium的webdriver检测机制"><a href="#绕过selenium的webdriver检测机制" class="headerlink" title="绕过selenium的webdriver检测机制"></a>绕过selenium的webdriver检测机制</h4><p>webdriver 检测机制，单纯使用webdriver 会遭到反爬， 在console 中输入window.navigator.webdriver, 正常的浏览器会显示 undefined, webdriver下会显示 true。有兴趣的自行测试。</p>
<p>在js判断window.navigator.webdriver返回值就可以检测,懂js的可能会想到覆盖这个值，比如使用如下代码Object.defineProperties(navigator,{webdriver:{get:()=&gt;undefined}}),确实可以修改成功。这种写法还是存在某些问题的,如果此时你在模拟浏览器中通过点击链接、输入网址进入另一个页面,或者开启新的窗口,你会发现window.navigator.webdriver又变成了true.那么是不是可以在每一个页面都打开以后,再次通过webdriver执行上面的js代码,从而实现在每个页面都把window.navigator.webdriver设置为undefined呢?也不行。因为当你执行：driver.get(网址)的时候,浏览器会打开网站,加载页面并运行网站自带的js代码。所以在你重设window.navigator.webdriver之前,实际上网站早就已经知道你是模拟浏览器了。在启动Chromedriver之前,为Chrome开启实验性功能参数excludeSwitches,它的值为[‘enable-automation’]从而解决这个问题。</p>
<h4 id="谈谈布隆过滤器"><a href="#谈谈布隆过滤器" class="headerlink" title="谈谈布隆过滤器"></a>谈谈布隆过滤器</h4><p>它本身是一个很长的二进制向量(想象成数组)和一系列随机映射函数(想象成多个 Hash 函数)，二进制向量中存放的不是0，就是1</p>
<p>对一个key进行多次hash后，在hash结果对应的位置设置为1，查询时，经过同样的hash算法，查看对应位置的值，如果不全为1，则说明这个key不存在</p>
<p>使用目的：可以快速确定某项数据不存在，而减轻在数据库中查询的压力</p>
<p>缺点：不能保证某项数据肯定存在，因为hash算法结果会存在重复。</p>
<p>特点：二进制向量越长，映射函数越多；在存储空间和插入查询的时间复杂度都有巨大优势</p>
<h4 id="简要写一下-lxml-模块的使用方法框架"><a href="#简要写一下-lxml-模块的使用方法框架" class="headerlink" title="简要写一下 lxml 模块的使用方法框架"></a>简要写一下 lxml 模块的使用方法框架</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> lxml <span class="hljs-keyword">import</span> html<br><br>source=<span class="hljs-string">'''</span><br><span class="hljs-string">&lt;div class="nam"&gt;&lt;span&gt;中国&lt;/span&gt;&lt;/div&gt;</span><br><span class="hljs-string">'''</span><br>root = html.fromstring(source)<br><br>_content = root.xpath(<span class="hljs-string">"string(//div[@class='nam'])"</span>)<br><br><span class="hljs-keyword">if</span> _content <span class="hljs-keyword">and</span> isinstance(_content, list):<br>     content = _content[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">elif</span> isinstance(_content, str):<br>    content = _content<br><br>print(_content)<br></code></pre></td></tr></table></figure>

<h4 id="说一说-scrapy-的工作流程"><a href="#说一说-scrapy-的工作流程" class="headerlink" title="说一说 scrapy 的工作流程"></a>说一说 scrapy 的工作流程</h4><ol>
<li>spider 把百度需要下载的第一个 url：<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 交给引擎。</li>
<li>引擎把 url 交给调度器排序入队处理。</li>
<li>调度器把处理好的 request 返回给引擎。</li>
<li>通过引擎调动下载器，按照下载中间件的设置下载这个 request。</li>
<li>下载器下载完毕结果返回给引擎（如果失败：不好意思，这个 request 下载失败，然后引擎告诉调度器，这个 request 下载失败了，你记录一下，我们待会儿再下载。）</li>
<li>引擎调度 spider，把按照 Spider 中间件处理过了的请求，交给 spider 处理。</li>
<li>spider 把处理好的 url 和 item 传给引擎。</li>
<li>引擎根据不同的类型调度不同的模块，调度 Item Pipeline 处理 item。</li>
<li>把 url 交给调度器。 然后从第 4 步开始循环，直到获取到你需要的信息</li>
</ol>
<h4 id="scrapy-的去重原理"><a href="#scrapy-的去重原理" class="headerlink" title="scrapy 的去重原理"></a>scrapy 的去重原理</h4><p>scrapy 本身自带一个去重中间件，scrapy 源码中可以找到一个 dupefilters.py 去重器。里面有个方法叫做 request_seen，它在 scheduler(发起请求的第一时间)的时候被调用。它代码里面调用了 request_fingerprint 方法（就是给 request 生成一个指纹）。</p>
<p>就是给每一个传递过来的 url 生成一个固定长度的唯一的哈希值。但是这种量级千万到亿的级别内存是可以应付的。</p>
<h4 id="scrapy-中间件有几种类，你用过哪些中间件"><a href="#scrapy-中间件有几种类，你用过哪些中间件" class="headerlink" title="scrapy 中间件有几种类，你用过哪些中间件"></a>scrapy 中间件有几种类，你用过哪些中间件</h4><p>scrapy 的中间件理论上有三种(Schduler Middleware,Spider Middleware,Downloader Middleware)。在应用上一般有以下两种</p>
<ol>
<li>爬虫中间件 Spider Middleware：主要功能是在爬虫运行过程中进行一些处理。</li>
<li>下载器中间件 Downloader Middleware：这个中间件可以实现修改 User-Agent 等 headers 信息，处理重定向，设置代理，失败重试，设置 cookies 等功能。</li>
</ol>
<h4 id="列出你知道-header-的内容以及信息"><a href="#列出你知道-header-的内容以及信息" class="headerlink" title="列出你知道 header 的内容以及信息"></a>列出你知道 header 的内容以及信息</h4><p>User-Agent：User-Agent 的内容包含发出请求的用户信息。</p>
<p>Accept：指定客户端能够接收的内容类型。</p>
<p>Accept-Encoding：指定浏览器可以支持的 web 服务器返回内容压缩编码类型。 </p>
<p>Accept-Language：浏览器可接受的语言。 </p>
<p>Connection：表示是否需要持久连接。（HTTP 1.1 默认进行持久连接）。 </p>
<p>Content-Length：请求的内容长度。 </p>
<p>If-Modified-Since：如果请求的部分在指定时间之后被修改则请求成功，未被修改则返回 304 代码。</p>
<p>Referer：先前网页的地址，当前请求网页紧随其后，即来路。</p>
<h4 id="说一说打开浏览器访问-www-baidu-com-获取到结果，整个流程。"><a href="#说一说打开浏览器访问-www-baidu-com-获取到结果，整个流程。" class="headerlink" title="说一说打开浏览器访问 www.baidu.com 获取到结果，整个流程。"></a>说一说打开浏览器访问 <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 获取到结果，整个流程。</h4><p>浏览器向 DNS 服务器发送 baidu.com 域名解析请求。 DNS 服务器返回解析后的 ip 给客户端浏览器，浏览器想该 ip 发送页面请求。 DNS 服务器接收到请求后，查询该页面，并将页面发送给客户端浏览器。 客户端浏览器接收到页面后，解析页面中的引用，并再次向服务器发送引用资源请求。 服务器接收到资源请求后，查找并返回资源给客户端。 客户端浏览器接收到资源后，渲染，输出页面展现给用户。</p>
<h4 id="写爬虫是用多进程好？还是多线程好？-为什么？"><a href="#写爬虫是用多进程好？还是多线程好？-为什么？" class="headerlink" title="写爬虫是用多进程好？还是多线程好？ 为什么？"></a>写爬虫是用多进程好？还是多线程好？ 为什么？</h4><p>多线程，因为爬虫是对网络操作属于 io 密集型操作适合使用多线程或者协程。</p>
<h4 id="使用最多的数据库（mysql，mongodb，redis-等），对他的理解？"><a href="#使用最多的数据库（mysql，mongodb，redis-等），对他的理解？" class="headerlink" title="使用最多的数据库（mysql，mongodb，redis 等），对他的理解？"></a>使用最多的数据库（mysql，mongodb，redis 等），对他的理解？</h4><p>MySQL 数据库：开源免费的关系型数据库，需要实现创建数据库、数据表和表的字段，表与表之间可以进行关联（一对多、多对多），是持久化存储。</p>
<p>mongodb 数据库：是非关系型数据库，数据库的三元素是，数据库、集合、文档，可以进行持久化存储，也可作为内存数据库，存储数据不需要事先设定格式，数据以键值对的形式存储。</p>
<p>redis 数据库：非关系型数据库，使用前可以不用设置格式，以键值对的方式保存，文件格式相对自由，主要用与缓存数据库，也可以进行持久化存储。</p>
<h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><h4 id="TCP的可靠连接怎么保证"><a href="#TCP的可靠连接怎么保证" class="headerlink" title="TCP的可靠连接怎么保证"></a>TCP的可靠连接怎么保证</h4><p>校验和：发送的数据包的二进制相加然后取反，<strong>目的是检测数据在传输过程中的任何变化</strong>。如果收到段的检验和有差错，TCP将丢弃这个报文段和不确认收到此报文段。</p>
<p>确认应答+序列号：TCP给发送的<strong>每一个包进行编号</strong>，接收方<strong><em>\</em>对数据包进行排序**</strong>，把有序数据传送给应用层。</p>
<p>超时重传：当TCP<strong>发出一个段后，它启动一个定时器</strong>，<strong>等待目的端确认收到这个报文段</strong>。<strong>如果不能及时收到一个确认，将重发这个报文段</strong>。 </p>
<p>流量控制：<strong>TCP连接的每一方都有固定大小的缓冲空间</strong>，TCP的<strong>接收端只允许发送端发送接收端缓冲区能接纳的数据</strong>。</p>
<p>拥塞控制：网络拥塞时，减少数据的发送。</p>
<h4 id="tcp和udp的区别"><a href="#tcp和udp的区别" class="headerlink" title="tcp和udp的区别"></a>tcp和udp的区别</h4><ol>
<li>基于连接与无连接</li>
<li>TCP要求系统资源较多，UDP较少</li>
<li>UDP程序结构较简单</li>
<li>流模式（TCP）与数据报模式(UDP);</li>
<li>TCP保证数据正确性，UDP可能丢包</li>
<li>TCP保证数据顺序，UDP不保证</li>
</ol>
<h4 id="怎么能够让UDP实现可靠呢？"><a href="#怎么能够让UDP实现可靠呢？" class="headerlink" title="怎么能够让UDP实现可靠呢？"></a>怎么能够让UDP实现可靠呢？</h4><p>类似http3的QUIC协议</p>
<p>QUIC协议是基于UDP协议实现的，在一条链接上可以有多个流，流与流之间是互不影响的，当一个流出现丢包影响范围非常小，从而解决队头阻塞问题。</p>
<p>QUIC核心特性：</p>
<ol>
<li><p>连接建立延时低：传输层 0RTT 就能建立连接、加密层 0RTT 就能建立加密连接</p>
</li>
<li><p>改进的拥塞控制：</p>
<p>可拔插：应用程序层面就能实现不同的拥塞控制算法，不需要操作系统，不需要内核支持。即使是单个应用程序的不同连接也能支持配置不同的拥塞控制。应用程序不需要停机和升级就能实现拥塞控制的变更，我们在服务端只需要修改一下配置，reload 一下，完全不需要停止服务就能实现拥塞控制的切换。</p>
</li>
<li><p>单调递增的 Packet Number：</p>
<p>TCP 为了保证可靠性，使用了基于字节序号的 Sequence Number 及 Ack 来确认消息的有序到达。</p>
<p>UDP使用 Packet Number 代替了 TCP 的 sequence number，并且每个 Packet Number 都严格递增，也就是说就算 Packet N 丢失了，重传的 Packet N 的 Packet Number 已经不是 N，而是一个比 N 大的值。</p>
<p>但是单纯依靠严格递增的 Packet Number 肯定是无法保证数据的顺序性和可靠性。QUIC 又引入了一个 Stream Offset 的概念。</p>
<p>即一个 Stream 可以经过多个 Packet 传输，Packet Number 严格递增，没有依赖。但是 Packet 里的 Payload 如果是 Stream 的话，就需要依靠 Stream 的 Offset 来保证应用数据的顺序。如错误! 未找到引用源。所示，发送端先后发送了 Pakcet N 和 Pakcet N+1，Stream 的 Offset 分别是 x 和 x+y。</p>
<p>假设 Packet N 丢失了，发起重传，重传的 Packet Number 是 N+2，但是它的 Stream 的 Offset 依然是 x，这样就算 Packet N + 2 是后到的，依然可以将 Stream x 和 Stream x+y 按照顺序组织起来，交给应用程序处理。</p>
</li>
<li><p>更多的 Ack 块：Quic Ack Frame 可以同时提供 256 个 Ack Block，在丢包率比较高的网络下，更多的 Sack Block 可以提升网络的恢复速度，减少重传量。</p>
</li>
<li><p>基于 stream 和 connecton 级别的流量控制：</p>
<p>因为 QUIC 支持多路复用，所以在 Connection 和 Stream 级别提供了两种流量控制。Stream 可以认为就是一条 HTTP 请求。Connection 可以类比一条 TCP 连接。多路复用意味着在一条 Connetion 上会同时存在多条 Stream。既需要对单个 Stream 进行控制，又需要针对所有 Stream 进行总体控制。</p>
<p>原理：</p>
<p>通过 window_update 帧告诉对端自己可以接收的字节数，这样发送方就不会发送超过这个数量的数据。</p>
<p>通过 BlockFrame 告诉对端由于流量控制被阻塞了，无法发送数据。</p>
<p>QUIC 的流量控制和 TCP 有点区别，TCP 为了保证可靠性，窗口左边沿向右滑动时的长度取决于已经确认的字节数。如果中间出现丢包，就算接收到了更大序号的 Segment，窗口也无法超过这个序列号。</p>
<p>但 <strong>QUIC 不同，就算此前有些 packet 没有接收到，它的滑动只取决于接收到的最大偏移字节数</strong>。</p>
</li>
<li><p>没有队头阻塞的多路复用：</p>
<p>在一条 QUIC 连接上可以并发发送多个 HTTP 请求 (stream)。</p>
<p>QUIC 一个连接上的多个 stream 之间没有依赖。这样假如 stream2 丢了一个 udp packet，也只会影响 stream2 的处理。不会影响 stream2 之前及之后的 stream 的处理。</p>
</li>
</ol>
<h4 id="网络七层模型"><a href="#网络七层模型" class="headerlink" title="网络七层模型"></a>网络七层模型</h4><ul>
<li>物理层：<br>物理层负责最后将信息编码成电流脉冲或其它信号用于网上传输；<br><code>eg：RJ45等将数据转化成0和1；</code></li>
<li>数据链路层:<br>数据链路层通过物理网络链路􏰁供数据传输。不同的数据链路层定义了不同的网络和协 议特征,其中包括物理编址、网络拓扑结构、错误校验、数据帧序列以及流控;<br><code>可以简单的理解为：规定了0和1的分包形式，确定了网络数据包的形式；</code></li>
<li>网络层<br>网络层负责在源和终点之间建立连接;<br><code>可以理解为，此处需要确定计算机的位置，怎么确定？IPv4，IPv6！</code></li>
<li>传输层<br>传输层向高层􏰁提供可靠的端到端的网络数据流服务。<br><code>可以理解为：每一个应用程序都会在网卡注册一个端口号，该层就是端口与端口的通信！常用的（TCP／IP）协议；</code></li>
<li>会话层<br>会话层建立、管理和终止表示层与实体之间的通信会话；<br><code>建立一个连接（自动的手机信息、自动的网络寻址）;</code></li>
<li>表示层:<br>表示层􏰁供多种功能用于应用层数据编码和转化,以确保以一个系统应用层发送的信息 可以被另一个系统应用层识别;<br><code>可以理解为：解决不同系统之间的通信，eg：Linux下的QQ和Windows下的QQ可以通信；</code></li>
<li>应用层:<br>OSI 的应用层协议包括文件的传输、访问及管理协议(FTAM) ,以及文件虚拟终端协议(VIP)和公用管理系统信息(CMIP)等;<br><code>规定数据的传输协议；</code></li>
</ul>
<h4 id="http报文结构"><a href="#http报文结构" class="headerlink" title="http报文结构"></a>http报文结构</h4><p>HTTP报文由报文首部和报文主体构成，中间由一个空行分隔。 报文首部是客户端或服务器端需处理的请求或响应的内容及属性， 可以传递额外的重要信息。报文首部包括请求行和请求头部，报文主体主要包含应被发送的数据。通常，不一定有报文主体。</p>
<h4 id="http请求行有哪些"><a href="#http请求行有哪些" class="headerlink" title="http请求行有哪些"></a>http请求行有哪些</h4><p>请求行结构为：请求方法字段、URL字段和HTTP协议版本</p>
<p>请求方法包括：GET、POST、HEAD、PUT、DELETE、OPTIONS、TRACE、CONNECT</p>
<p>http协议版本包括： http1.1 http2 http3</p>
<h4 id="TCP通信的过程"><a href="#TCP通信的过程" class="headerlink" title="TCP通信的过程"></a>TCP通信的过程</h4><p><strong>建立连接、传输数据、断开连接</strong></p>
<h4 id="TCP-拥塞控制"><a href="#TCP-拥塞控制" class="headerlink" title="TCP 拥塞控制"></a>TCP 拥塞控制</h4><p>什么是拥塞控制：网络中的数据太多，导致某个路由器处理不过来或处理地太慢，这就是<strong>网络拥塞</strong>。若是对于<code>TCP</code>这种有重传机制的传输协议，当发生数据丢失时，重传数据将延长数据到达的时间；同时，高频率的重传，也将导致网络的拥塞得不到缓解。<strong>拥塞控制，就是在网络中发生拥塞时，减少向网络中发送数据的速度，防止造成恶性循环；同时在网络空闲时，提高发送数据的速度，最大限度地利用网络资源</strong>。</p>
<p><strong>TCP判断拥塞的方式就是检测有没有丢包</strong>。<code>TCP</code>如何调整发送速率——<strong>在没有丢包时慢慢提高拥塞窗口cwnd的大小，当发生丢包事件时，减少cwnd的大小</strong>。当然，具体的算法要复杂的多，<code>TCP</code>调整拥塞窗口的主要算法有 <strong>慢启动</strong> ， <strong>拥塞避免</strong> 以及 <strong>快速恢复</strong> ，其中前两个是<code>TCP</code>规范要求必须实现的，而第三个则是推荐实现的，<code>TCP</code>根据情况在这三者之间切换。</p>
<h4 id="每次握手失败对应的措施"><a href="#每次握手失败对应的措施" class="headerlink" title="每次握手失败对应的措施"></a>每次握手失败对应的措施</h4><p><strong>第一次握手失败：</strong></p>
<p>如果第一次的SYN传输失败，两端都不会申请资源。如果一段时间后之前的SYN发送成功了，这时客户端只会接收他最后发送的SYN的SYN+ACK回应，其他的一概忽略，服务端也是如此，会将之前多申请的资源释放了。</p>
<p><strong>第二次握手失败：</strong></p>
<p>如果服务端发送的SYN+ACK传输失败，客户端由于没有收到这条响应，不会申请资源，虽然服务端申请了资源，但是迟迟收不到来自客户端的ACK，也会将该资源释放。</p>
<p><strong>第三次握手失败:</strong></p>
<p>如果第三次握手的ACK传输失败，导致服务端迟迟没有收到ACK，就会释放资源，这时候客户端认为自己已经连接好了，就会给服务端发送数据，服务端由于没有收到第三次握手，就会以RST包对客户端响应。但是实际上服务端会因为没有收到客户端的ACK多次发送SYN+ACK，次数是可以设置的，如果最后还是没有收到客户端的ACK，则释放资源。</p>
<h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><h4 id="说一说多线程，多进程和协程的区别"><a href="#说一说多线程，多进程和协程的区别" class="headerlink" title="说一说多线程，多进程和协程的区别"></a>说一说多线程，多进程和协程的区别</h4><p>进程与线程比较</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript"><span class="hljs-number">1</span>) 地址空间：线程是进程内的一个执行单元，进程内至少有一个线程，它们共享进程的地址空间，<br>而进程有自己独立的地址空间<br><span class="hljs-number">2</span>) 资源拥有：进程是资源分配和拥有的单位,同一个进程内的线程共享进程的资源<br><span class="hljs-number">3</span>) 线程是处理器调度的基本单位,但进程不是<br><span class="hljs-number">4</span>) 二者均可并发执行<br><span class="hljs-number">5</span>) 每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口，<br>但是线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制<br></code></pre></td></tr></table></figure>

<p>协程与线程进行比较</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><code class="hljs angelscript"><span class="hljs-number">1</span>) 一个线程可以多个协程，一个进程也可以单独拥有多个协程，这样 Python 中则能使用多核 CPU。<br><span class="hljs-number">2</span>) 线程进程都是同步机制，而协程则是异步<br><span class="hljs-number">3</span>) 协程能保留上一次调用时的状态，每次过程重入时，就相当于进入上一次调用的状态<br></code></pre></td></tr></table></figure>



<h4 id="进程间通信方式"><a href="#进程间通信方式" class="headerlink" title="进程间通信方式"></a>进程间通信方式</h4><p><strong>匿名管道( pipe )：</strong>管道是一种半双工的通信方式，数据只能<strong>单向流动</strong>，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指<strong>父子进程关系</strong>。</p>
<p>高级管道(popen)：将另一个程序当做一个新的进程在当前程序进程中启动，则它算是当前程序的子进程，这种方式我们成为高级管道方式。</p>
<p>有名管道 (named pipe) ： 有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间的通信。</p>
<p>消息队列( message queue ) ： 消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。</p>
<p>信号量( semophore ) ： 信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。</p>
<p>信号 ( sinal ) ： 信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。</p>
<p>共享内存( shared memory ) ：共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号两，配合使用，来实现进程间的同步和通信。</p>
<p>套接字( socket ) ： 套接口也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同机器间的进程通信。</p>
<h4 id="线程间通信方式"><a href="#线程间通信方式" class="headerlink" title="线程间通信方式"></a>线程间通信方式</h4><p>全局变量、消息传递（因为每个线程都有自己的消息队列）</p>
<h4 id="IO-多路复用的作用？"><a href="#IO-多路复用的作用？" class="headerlink" title="IO 多路复用的作用？"></a>IO 多路复用的作用？</h4><p>阻塞 I/O 只能阻塞一个 I/O 操作，而 I/O 复用模型能够阻塞多个 I/O 操作，所以才叫做多路复用。</p>
<p>I/O 多路复用是用于提升效率，单个进程可以同时监听多个网络连接 IO。 在 IO 密集型的系统中， 相对于线程切换的开销问题，IO 多路复用可以极大的提升系统效率。</p>
<h4 id="怎么来保证线程之间的安全运行"><a href="#怎么来保证线程之间的安全运行" class="headerlink" title="怎么来保证线程之间的安全运行"></a>怎么来保证线程之间的安全运行</h4><p>使用互斥锁来实现同步，避免资源竞争问题发生。</p>
<p>除了使用互斥锁可以保证线程同步外，还有其他方式可以实现同步，解决线程安全，如通过队列来实现同步，因为队列是串行的，底层封装了锁。</p>
<h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h4><p>在线程间共享多个资源的时候，如果两个线程分别占有一部分资源并且同时等待对方的资源，就会造成死锁。</p>
<p>为了避免死锁一直阻塞下去，可以在其中一方添加超时时间，如果超时了，就跳过。</p>
<h4 id="线程池中的线程的状态，状态之间的转换关系"><a href="#线程池中的线程的状态，状态之间的转换关系" class="headerlink" title="线程池中的线程的状态，状态之间的转换关系"></a>线程池中的线程的状态，状态之间的转换关系</h4><p><strong>1、新建状态(New)</strong>：新创建了一个线程对象。</p>
<p><strong>2、就绪状态(Runnable)</strong>：线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于“<strong>可运行线程池</strong>”中，变得可运行，只<strong>等待获取<a href="http://product.it168.com/list/b/0217_1.shtml" target="_blank" rel="noopener">CPU</a>的使用权</strong>。<strong>即在就绪状态的进程除CPU之外，其它的运行所需资源都已全部获得。</strong></p>
<p><strong>3、运行状态(Running)：</strong>就绪状态的线程获取了CPU，执行程序代码。</p>
<p><strong>4、阻塞状态(Blocked)：</strong>阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。</p>
<p>阻塞分为：</p>
<p>1、等待阻塞 2、同步阻塞 3、其他阻塞</p>
<h4 id="内存泄漏与内存溢出"><a href="#内存泄漏与内存溢出" class="headerlink" title="内存泄漏与内存溢出"></a>内存泄漏与内存溢出</h4><p>内存泄漏：你使用malloc或new向 内存申请了一块内存空间,但没有用free以及delete对该块内存进行释放,造成程序失去了对该块内存的控制.</p>
<p>内存溢出：你申请了10个字节的内存,但写入了大于10个字节的数据</p>
<p>内存溢出原因：<br>1.内存中加载的数据量过于庞大，如一次从数据库取出过多数据；<br>2.集合类中有对对象的引用，使用完后未清空，产生了堆积，使得JVM不能回收；<br>3.代码中存在死循环或循环产生过多重复的对象实体；<br>4.使用的第三方软件中的BUG；<br>5.启动参数内存值设定的过小</p>
<p>内存溢出的解决方案：<br>第一步，修改JVM启动参数，直接增加内存。(-Xms，-Xmx参数一定不要忘记加。)</p>
<p>第二步，检查错误日志，查看“OutOfMemory”错误前是否有其 它异常或错误。</p>
<p>第三步，对代码进行走查和分析，找出可能发生内存溢出的位置。</p>
<h4 id="堆栈溢出"><a href="#堆栈溢出" class="headerlink" title="堆栈溢出"></a>堆栈溢出</h4><p>以递归为例说明堆栈溢出解决方案：</p>
<p>方案一：</p>
<p>手动设置系统调用栈大小</p>
<p>方案二：</p>
<p>使用“尾递归+生成器”彻底解决堆栈溢出</p>
<p>尾递归是指在返回时，仅调用自身，不包含其他运算式，如加减乘除等，同时使用“yield”关键字返回生成器对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> types<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">my_recursion</span><span class="hljs-params">(cur_i, tail_num=<span class="hljs-number">1</span>)</span>:</span><br>    <span class="hljs-keyword">if</span> cur_i == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">yield</span> tail_num<br><br>    <span class="hljs-keyword">yield</span> my_recursion(cur_i<span class="hljs-number">-1</span>, cur_i + tail_num)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">my_recursion_wrapper</span><span class="hljs-params">(generator, i)</span>:</span><br>    gen = generator(i)<br><br>    <span class="hljs-keyword">while</span> isinstance(gen, types.GeneratorType):<br>        gen = gen.__next__()<br><br>    <span class="hljs-keyword">return</span> gen<br><br>print(my_recursion_wrapper(my_recursion, <span class="hljs-number">100000</span>))<br></code></pre></td></tr></table></figure>



<h4 id="核心线程与非核心线程"><a href="#核心线程与非核心线程" class="headerlink" title="核心线程与非核心线程"></a>核心线程与非核心线程</h4><p>核心线程 ：固定线程数 可闲置 不会被销毁 ThreadPoolExecutor的allowCoreThreadTimeOut属性设置为true时，keepAliveTime同样会作用于核心线程</p>
<p>非核心线程数：非核心线程闲置时的超时时长，超过这个时长，非核心线程就会被回收</p>
<h4 id="什么是消息队列？什么场景需要他？用了会出现什么问题？"><a href="#什么是消息队列？什么场景需要他？用了会出现什么问题？" class="headerlink" title="什么是消息队列？什么场景需要他？用了会出现什么问题？"></a>什么是消息队列？什么场景需要他？用了会出现什么问题？</h4><p>消息从某一端发出后，首先进入一个容器进行临时存储，当达到某种条件后，再由这个容器发送给另一端。 这个容器的一种具体实现就是<strong><em>消息队列</em></strong>。</p>
<p>应用在<strong>异步处理，应用解耦，流量削锋和消息通讯</strong>四个场景。</p>
<p>会出现的问题：消息<strong>重复消费</strong>、<strong>消息丢失</strong>、<strong>消息的顺序消费</strong></p>
<h4 id="全局变量count-0，1个主线程打印start后，多个子线程按顺序对count-1，并打印出count值，count-n时，主线程打印end并退出"><a href="#全局变量count-0，1个主线程打印start后，多个子线程按顺序对count-1，并打印出count值，count-n时，主线程打印end并退出" class="headerlink" title="全局变量count=0，1个主线程打印start后，多个子线程按顺序对count+1，并打印出count值，count==n时，主线程打印end并退出"></a>全局变量count=0，1个主线程打印start后，多个子线程按顺序对count+1，并打印出count值，count==n时，主线程打印end并退出</h4><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<br>count = <span class="hljs-number">0</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">my_thread</span><span class="hljs-params">(num)</span>:</span><br>    print(<span class="hljs-string">f"子线程<span class="hljs-subst">&#123;num&#125;</span> start"</span>)<br>    <span class="hljs-keyword">global</span> count<br>    count += <span class="hljs-number">1</span><br>    print(<span class="hljs-string">f"子线程<span class="hljs-subst">&#123;num&#125;</span> end"</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span><br>    print(<span class="hljs-string">f"主线程 start"</span>)<br>    n = <span class="hljs-number">4</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>):<br>        t = threading.Thread(target=my_thread, args=[i])<br>        t.start()<br>        t.join()<br><br>    print(<span class="hljs-string">f"主线程 end"</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    main()<br>    print(count)<br></code></pre></td></tr></table></figure>



<h4 id="线程池中线程的数量由什么确定"><a href="#线程池中线程的数量由什么确定" class="headerlink" title="线程池中线程的数量由什么确定"></a>线程池中线程的数量由什么确定</h4><p>最佳线程数目 = （线程等待时间与线程CPU时间之比 + 1）* CPU数目</p>
<h4 id="孤儿进程、僵尸进程和守护进程"><a href="#孤儿进程、僵尸进程和守护进程" class="headerlink" title="孤儿进程、僵尸进程和守护进程"></a>孤儿进程、僵尸进程和守护进程</h4><p>孤儿进程： 父进程退出，子进程还在运行的这些子进程都是孤儿进程，孤儿进程将被init 进程（进程号为1）所收养，并由init 进程对他们完成状态收集工作。</p>
<p>守护进程，也就是通常说的Daemon进程，是Linux中的后台服务进程。它是一个生存期较长的进程，通常独立于控制终端并且周期性地执行某种任务或等待处理某些发生的事件。守护进程是脱离于终端并且在后台运行的进程。守护进程脱离于终端是为了避免进程在执行过程中的信息在任何终端上显示并且进程也不会被任何终端所产生的终端信息所打断。</p>
<p>僵尸进程： 进程使用fork 创建子进程，如果子进程退出，而父进程并没有调用wait 获waitpid 获取子进程的状态信息，那么子进程的进程描述符仍然保存在系统中的这些进程是僵尸进程。</p>
<p>避免僵尸进程的方法：</p>
<p>1.fork 两次用孙子进程去完成子进程的任务</p>
<p>2.用wait()函数使父进程阻塞</p>
<p>3.使用信号量，在signal handler 中调用waitpid,这样父进程不用阻塞</p>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><h4 id="数据库事务的四大特性以及事务的隔离级别"><a href="#数据库事务的四大特性以及事务的隔离级别" class="headerlink" title="数据库事务的四大特性以及事务的隔离级别"></a>数据库事务的四大特性以及事务的隔离级别</h4><p>四大特性（ACID）</p>
<p>原子性：事务包含的所有操作要么全部成功，要么全部失败回滚。</p>
<p>一致性：一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。</p>
<p>隔离性：事务之间不会相互干扰。</p>
<p>持久性：持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</p>
<p>四种隔离级别及解决的问题</p>
<p>Serializable (串行化)：可避免脏读、不可重复读、幻读的发生。</p>
<p>Repeatable read (可重复读)：可避免脏读、不可重复读的发生。</p>
<p>Read committed (读已提交)：可避免脏读的发生。</p>
<p>Read uncommitted (读未提交)：最低级别，任何情况都无法保证。</p>
<h4 id="mysql的引擎，介绍下InnoDB"><a href="#mysql的引擎，介绍下InnoDB" class="headerlink" title="mysql的引擎，介绍下InnoDB"></a>mysql的引擎，介绍下InnoDB</h4><p>innodb、MyISAM、MEMORY、Archive</p>
<p>innodb简单介绍</p>
<p>innodb通过使用MVCC来获取高并发性，并且实现sql标准的4种隔离级别，同时使用一种被称成next-key locking的策略来避免换读(phantom)现象。除此之外innodb引擎还提供了插入缓存(insert buffer)、二次写(double write)、自适应哈西索引(adaptive hash index)、预读(read ahead)等高性能技术。</p>
<p>特点：支持外键、行锁、非锁定读(默认情况下读取不会产生锁)。</p>
<p>内存：由缓冲池(buffer pool),重做日志缓存(redo log buffer),额外的内存池(additional memory pool)组成。</p>
<p>工作方式：将数据文件按页(每页16K)读入InnoDBbuffer pool，然后按最近最少使用算法(LRU)保留缓存数据，最后通过一定频率将脏页刷新到文件。</p>
<h4 id="MySQL索引及查询优化"><a href="#MySQL索引及查询优化" class="headerlink" title="MySQL索引及查询优化"></a>MySQL索引及查询优化</h4><p>索引(Index)是帮助<code>MySQL</code>高效获取数据的数据结构。类似于图书馆的目录索引结构。</p>
<p>B-树索引和哈希索引</p>
<h4 id="怎么建立索引来进行查询优化"><a href="#怎么建立索引来进行查询优化" class="headerlink" title="怎么建立索引来进行查询优化"></a>怎么建立索引来进行查询优化</h4><p>索引创建原则</p>
<ul>
<li>最左前缀匹配原则，非常重要的原则 </li>
<li>尽量选择区分度高的列作为索引 </li>
<li>=和in可以乱序 </li>
<li>索引列不能参与计算，保持列“干净” </li>
<li>尽量的扩展索引，不要新建索引 </li>
<li>使用短索引 </li>
<li>索引列排序 </li>
<li>like语句操作</li>
</ul>
<h4 id="mysql查询优化"><a href="#mysql查询优化" class="headerlink" title="mysql查询优化"></a>mysql查询优化</h4><h5 id="使用-Explain-进行分析"><a href="#使用-Explain-进行分析" class="headerlink" title="使用 Explain 进行分析"></a>使用 Explain 进行分析</h5><p>使用Explain分析SELECT查询语句，比较重要的字段有。</p>
<ul>
<li>select_type: 查询类型，有简单查询、联合查询、子查询</li>
<li>key: 使用的索引</li>
<li>rows：扫描的行数</li>
</ul>
<h5 id="优化数据访问"><a href="#优化数据访问" class="headerlink" title="优化数据访问"></a>优化数据访问</h5><ul>
<li><p>减少请求的数据量</p>
<ul>
<li>只返回必要的列：最好不要使用SELECT * 语句</li>
<li>只返回必要的行：使用LIMIT语句限制返回的数据</li>
<li><strong>缓存重复查询的数据</strong>：使用缓存可以避免在数据库中进行查询，特别在要查询的数据经常被重复查询时，缓存带来的查询性能提升将会是非常明显的。</li>
</ul>
</li>
<li><p>减少服务端扫描的行数</p>
<ul>
<li>最有效的就是使用索引来覆盖查询</li>
</ul>
</li>
</ul>
<h5 id="重构查询方式"><a href="#重构查询方式" class="headerlink" title="重构查询方式"></a>重构查询方式</h5><ul>
<li>切分大查询：一次大查询可能会锁住很多数据，占满整个事务日志、耗尽系统资源、阻塞很多小的但很重要的查询。</li>
<li>分解大连接查询：将一个大链接查询分解成对每一个表进行一次单表查询，然后再应用程序中进行关联。</li>
<li>好处：<ul>
<li>让缓存更高效。对于连接查询，如果其中一个表发生变化，那么整个查询缓存就无法使用。而分解后的多个查询，即使其中一个表发生变化，对其它表的查询缓存依然可以使用。</li>
<li>分解成多个单表查询，这些单表查询的缓存结果更可能被其它查询使用到，从而减少冗余记录的查询。</li>
<li>减少锁竞争；</li>
<li>在应用层进行连接，可以更容易对数据库进行拆分，从而更容易做到高性能和可伸缩。</li>
<li>查询本身效率也可能会有所提升。例如下面的例子中，使用 IN() 代替连接查询，可以让 MySQL 按照 ID 顺序进行查询，这可能比随机的连接要更高效。</li>
</ul>
</li>
</ul>
<h4 id="乐观锁悲观锁"><a href="#乐观锁悲观锁" class="headerlink" title="乐观锁悲观锁"></a>乐观锁悲观锁</h4><p>悲观锁（Pessimistic Lock），顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。ReentrantLock（基于队列同步器）实现。</p>
<p>乐观锁（Optimistic Lock），顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在提交更新的时候会判断一下在此期间别人有没有去更新这个数据。乐观锁适用于读多写少的应用场景，这样可以提高吞吐量。CAS实现（compare and swap）。</p>
<h4 id="mysql联合索引，最左匹配原则，最左匹配原则只是一个约束，为什么要这样约束呢"><a href="#mysql联合索引，最左匹配原则，最左匹配原则只是一个约束，为什么要这样约束呢" class="headerlink" title="mysql联合索引，最左匹配原则，最左匹配原则只是一个约束，为什么要这样约束呢"></a>mysql联合索引，最左匹配原则，最左匹配原则只是一个约束，为什么要这样约束呢</h4><p><strong>最左前缀匹配原则：</strong>在MySQL建立联合索引时会遵守最左前缀匹配原则，即最左优先，在检索数据时从联合索引的最左边开始匹配。</p>
<p>要想理解联合索引的最左匹配原则，先来理解下索引的底层原理。索引的底层是一颗B+树，那么联合索引的底层也就是一颗B+树，只不过联合索引的B+树节点中存储的是键值。由于构建一棵B+树只能根据一个值来确定索引关系，所以数据库依赖联合索引最左的字段来构建。</p>
<p>优化查询效率。</p>
<h4 id="B树和B-树的区别"><a href="#B树和B-树的区别" class="headerlink" title="B树和B+树的区别"></a>B树和B+树的区别</h4><p>B树索引</p>
<p><code>BTree</code>又叫多路平衡查找树，其特性如下：</p>
<ul>
<li>树中每个节点最多包含m个孩子。</li>
<li>除根节点与叶子节点外，每个节点至少有[ceil(m/2)]个孩子（ceil()为向上取整）。</li>
<li>若根节点不是叶子节点，则至少有两个孩子。</li>
<li>所有的叶子节点都在同一层。</li>
<li>每个非叶子节点由n个key与n+1个指针组成，其中[ceil(m/2)-1] &lt;= n &lt;= m-1 。</li>
</ul>
<p>B+Tree索引</p>
<p><code>B+Tree</code>是在<code>B-Tree</code>基础上的一种优化，使其更适合实现外存储索引结构。在B+Tree中，所有数据记录节点都是按照键值大小顺序存放在同一层的叶子节点上，而非叶子节点上只存储key值信息，这样可以大大加大每个节点存储的key值数量，降低B+Tree的高度。</p>
<p>B+Tree相对于B-Tree有几点不同：</p>
<p>非叶子节点只存储键值信息， 数据记录都存放在叶子节点中， 将上一节中的B-Tree优化，由于B+Tree的非叶子节点只存储键值信息，所以B+Tree的高度可以被压缩到特别的低。</p>
<p>B+Tree上通常有两个头指针，一个指向根节点，另一个指向关键字最小的叶子节点，而且所有叶子节点（即数据节点）之间是一种链式环结构。所以我们除了可以对B+Tree进行主键的范围查找和分页查找，还可以从根节点开始，进行随机查找。</p>
<h4 id="数据库锁有哪些"><a href="#数据库锁有哪些" class="headerlink" title="数据库锁有哪些"></a>数据库锁有哪些</h4><p>共享锁、排它锁、行锁、意向锁</p>
<h4 id="Redis中的持久化机制"><a href="#Redis中的持久化机制" class="headerlink" title="Redis中的持久化机制"></a>Redis中的持久化机制</h4><p>RDB持久化是指在指定的时间间隔内将内存中的数据集快照写入磁盘。</p>
<p>也是默认的持久化方式，这种方式是就是将内存中数据以快照的方式写入到二进制文件中,默认的文件名为dump.rdb。</p>
<p>优势：</p>
<ul>
<li>一旦采用该方式，那么你的整个Redis数据库将只包含一个文件，这样非常方便进行备份。比如你可能打算没1天归档一些数据。</li>
<li>方便备份，我们可以很容易的将一个一个RDB文件移动到其他的存储介质上</li>
<li>RDB 在恢复大数据集时的速度比 AOF 的恢复速度要快。</li>
<li>RDB 可以最大化 Redis 的性能：父进程在保存 RDB 文件时唯一要做的就是 fork 出一个子进程，然后这个子进程就会处理接下来的所有保存工作，父进程无须执行任何磁盘 I/O 操作。</li>
</ul>
<p>劣势：</p>
<ul>
<li>如果你需要尽量避免在服务器故障时丢失数据，那么 RDB 不适合你。 虽然 Redis 允许你设置不同的保存点（save point）来控制保存 RDB 文件的频率， 但是， 因为RDB 文件需要保存整个数据集的状态， 所以它并不是一个轻松的操作。 因此你可能会至少 5 分钟才保存一次 RDB 文件。 在这种情况下， 一旦发生故障停机， 你就可能会丢失好几分钟的数据。</li>
<li>每次保存 RDB 的时候，Redis 都要 fork() 出一个子进程，并由子进程来进行实际的持久化工作。 在数据集比较庞大时， fork() 可能会非常耗时，造成服务器在某某毫秒内停止处理客户端； 如果数据集非常巨大，并且 CPU 时间非常紧张的话，那么这种停止时间甚至可能会长达整整一秒。 虽然 AOF 重写也需要进行 fork() ，但无论 AOF 重写的执行间隔有多长，数据的耐久性都不会有任何损失。</li>
</ul>
<p>AOF持久化是redis会将每一个收到的写命令都通过write函数追加到文件中(默认是 appendonly.aof)。</p>
<p>当redis重启时会通过重新执行文件中保存的写命令来在内存中重建整个数据库的内容。当然由于os会在内核中缓存 write做的修改，所以可能不是立即写到磁盘上。这样aof方式的持久化也还是有可能会丢失部分修改。不过我们可以通过配置文件告诉redis我们想要 通过fsync函数强制os写入到磁盘的时机。</p>
<p>优势：</p>
<ul>
<li>使用 AOF 持久化会让 Redis 变得非常耐久（much more durable）：你可以设置不同的 fsync 策略，比如无 fsync ，每秒钟一次 fsync ，或者每次执行写入命令时 fsync 。 AOF 的默认策略为每秒钟 fsync 一次，在这种配置下，Redis 仍然可以保持良好的性能，并且就算发生故障停机，也最多只会丢失一秒钟的数据（ fsync 会在后台线程执行，所以主线程可以继续努力地处理命令请求）。</li>
<li>AOF 文件是一个只进行追加操作的日志文件（append only log）， 因此对 AOF 文件的写入不需要进行 seek ， 即使日志因为某些原因而包含了未写入完整的命令（比如写入时磁盘已满，写入中途停机，等等）， redis-check-aof 工具也可以轻易地修复这种问题。<br>Redis 可以在 AOF 文件体积变得过大时，自动地在后台对 AOF 进行重写： 重写后的新 AOF 文件包含了恢复当前数据集所需的最小命令集合。 整个重写操作是绝对安全的，因为 Redis 在创建新 AOF 文件的过程中，会继续将命令追加到现有的 AOF 文件里面，即使重写过程中发生停机，现有的 AOF 文件也不会丢失。 而一旦新 AOF 文件创建完毕，Redis 就会从旧 AOF 文件切换到新 AOF 文件，并开始对新 AOF 文件进行追加操作。</li>
<li>AOF 文件有序地保存了对数据库执行的所有写入操作， 这些写入操作以 Redis 协议的格式保存， 因此 AOF 文件的内容非常容易被人读懂， 对文件进行分析（parse）也很轻松。 导出（export） AOF 文件也非常简单： 举个例子， 如果你不小心执行了 FLUSHALL 命令， 但只要 AOF 文件未被重写， 那么只要停止服务器， 移除 AOF 文件末尾的 FLUSHALL 命令， 并重启 Redis ， 就可以将数据集恢复到 FLUSHALL 执行之前的状态。</li>
</ul>
<p>劣势：</p>
<ul>
<li>对于相同的数据集来说，AOF 文件的体积通常要大于 RDB 文件的体积。</li>
<li>根据所使用的 fsync 策略，AOF 的速度可能会慢于 RDB 。 在一般情况下， 每秒 fsync 的性能依然非常高， 而关闭 fsync 可以让 AOF 的速度和 RDB 一样快， 即使在高负荷之下也是如此。 不过在处理巨大的写入载入时，RDB 可以提供更有保证的最大延迟时间（latency）。</li>
<li>AOF 在过去曾经发生过这样的 bug ： 因为个别命令的原因，导致 AOF 文件在重新载入时，无法将数据集恢复成保存时的原样。 （举个例子，阻塞命令 BRPOPLPUSH 就曾经引起过这样的 bug 。） 测试套件里为这种情况添加了测试： 它们会自动生成随机的、复杂的数据集， 并通过重新载入这些数据来确保一切正常。 虽然这种 bug 在 AOF 文件中并不常见， 但是对比来说， RDB 几乎是不可能出现这种 bug 的。</li>
</ul>
<h4 id="Redis的集群"><a href="#Redis的集群" class="headerlink" title="Redis的集群"></a>Redis的集群</h4><p>可以支撑多个master和多个slave，也可以支撑海量数据的存储，实现高并发与高可用。</p>
<p>集群中一个master挂掉以后，它对应的slave就会顶替成为新的master，</p>
<p>Redis集群中各节点之间可以相互进行通信。</p>
<p>Redis集群中各节点之间都相互知道对方的全部信息，客户端与集群进行通信的时候，只需要与集群中的某一个结点建立连接即可。</p>
<p>redis集群中有多台redis服务器不可避免会有服务器挂掉。redis集群服务器之间通过互相的ping-pong判断是否节点可以连接上。如果有一半以上的节点去ping一个节点的时候没有回应，集群就认为这个节点宕机了（客观下线），如果挂的是主节点，会进行主节点切换。</p>
<h4 id="Redis为什么快"><a href="#Redis为什么快" class="headerlink" title="Redis为什么快"></a>Redis为什么快</h4><ul>
<li>完全基于内存，时间复杂度为O(1)</li>
<li>数据结构简单，对数据操作也简单，Redis中的数据结构是专门进行设计的</li>
<li>采用单线程，避免了不必要的上下文切换和竞争条件，也不存在多进程或者多线程导致的切换而消耗 CPU，不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗</li>
<li>使用多路I/O复用模型，非阻塞IO</li>
<li>使用底层模型不同，它们之间底层实现方式以及与客户端之间通信的应用协议不一样，Redis直接自己构建了VM 机制 ，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求</li>
</ul>
<h4 id="Redis6-0-之前为什么不使用多线程"><a href="#Redis6-0-之前为什么不使用多线程" class="headerlink" title="Redis6.0 之前为什么不使用多线程"></a>Redis6.0 之前为什么不使用多线程</h4><p>使用了单线程后，可维护性高。多线程模型虽然在某些方面表现优异，但是它却引入了程序执行顺序的不确定性，带来了并发读写的一系列问题，增加了系统复杂度、同时可能存在线程切换、甚至加锁解锁、死锁造成的性能损耗。</p>
<p>Redis 通过 AE 事件模型以及 IO 多路复用等技术，处理性能非常高，因此没有必要使用多线程。</p>
<p>单线程机制使得 Redis 内部实现的复杂度大大降低，Hash 的惰性 Rehash、Lpush 等等 “线程不安全” 的命令都可以无锁进行。</p>
<h4 id="Redis-6-0-为什么要引入多线程呢"><a href="#Redis-6-0-为什么要引入多线程呢" class="headerlink" title="Redis 6.0 为什么要引入多线程呢"></a>Redis 6.0 为什么要引入多线程呢</h4><ul>
<li>提高网络 IO 性能，典型的实现比如使用 DPDK 来替代内核网络栈的方式</li>
<li>使用多线程充分利用多核，典型的实现比如 Memcached</li>
</ul>
<h4 id="redis网络模型"><a href="#redis网络模型" class="headerlink" title="redis网络模型"></a>redis网络模型</h4><p>多路IO复用－非阻塞同步IO模型</p>
<h4 id="redis-的zset"><a href="#redis-的zset" class="headerlink" title="redis 的zset"></a>redis 的zset</h4><p>zset叫做有序集合。zset的每一个成员都有一个分数与之对应，并且分数是可以重复的。</p>
<p>有序集合的增删改由于有啦排序，执行效率就是非常快速的，即便是访问集合中间的数据也是非常高效的。</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
</search>
